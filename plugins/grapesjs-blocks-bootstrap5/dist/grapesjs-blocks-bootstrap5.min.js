/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/bootstrap-btn-sizes.js":
/*!************************************!*\
  !*** ./src/bootstrap-btn-sizes.js ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
  'lg': 'Large',
  'sm': 'Small'
});

/***/ }),

/***/ "./src/bootstrap-contexts.js":
/*!***********************************!*\
  !*** ./src/bootstrap-contexts.js ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (['primary', 'secondary', 'success', 'info', 'warning', 'danger', 'light', 'dark']);

/***/ }),

/***/ "./src/commands.js":
/*!*************************!*\
  !*** ./src/commands.js ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (function (editor) {
  var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var commands = editor.Commands;
});

/***/ }),

/***/ "./src/components.js":
/*!***************************!*\
  !*** ./src/components.js ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _components_Collapse__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./components/Collapse */ "./src/components/Collapse.js");
/* harmony import */ var _components_Dropdown__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./components/Dropdown */ "./src/components/Dropdown.js");
/* harmony import */ var _components_tabs_TabsNavigation__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./components/tabs/TabsNavigation */ "./src/components/tabs/TabsNavigation.js");
/* harmony import */ var _components_tabs_TabsPanes__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./components/tabs/TabsPanes */ "./src/components/tabs/TabsPanes.js");
/* harmony import */ var _components_tabs_Tab__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./components/tabs/Tab */ "./src/components/tabs/Tab.js");
/* harmony import */ var _components_tabs_TabPane__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./components/tabs/TabPane */ "./src/components/tabs/TabPane.js");
/* harmony import */ var _components_Form__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./components/Form */ "./src/components/Form.js");
/* harmony import */ var _components_Input__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./components/Input */ "./src/components/Input.js");
/* harmony import */ var _components_InputGroup__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./components/InputGroup */ "./src/components/InputGroup.js");
/* harmony import */ var _components_Textarea__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./components/Textarea */ "./src/components/Textarea.js");
/* harmony import */ var _components_Select__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./components/Select */ "./src/components/Select.js");
/* harmony import */ var _components_Checkbox__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./components/Checkbox */ "./src/components/Checkbox.js");
/* harmony import */ var _components_Radio__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./components/Radio */ "./src/components/Radio.js");
/* harmony import */ var _components_Button__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./components/Button */ "./src/components/Button.js");
/* harmony import */ var _components_ButtonGroup__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./components/ButtonGroup */ "./src/components/ButtonGroup.js");
/* harmony import */ var _components_ButtonToolbar__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./components/ButtonToolbar */ "./src/components/ButtonToolbar.js");
/* harmony import */ var _components_Label__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./components/Label */ "./src/components/Label.js");
/* harmony import */ var _components_Link__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./components/Link */ "./src/components/Link.js");
/* harmony import */ var _components_FileInput__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./components/FileInput */ "./src/components/FileInput.js");
/* harmony import */ var _components_Image__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./components/Image */ "./src/components/Image.js");
/* harmony import */ var _components_video_Video__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./components/video/Video */ "./src/components/video/Video.js");
/* harmony import */ var _components_video_Embed__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./components/video/Embed */ "./src/components/video/Embed.js");
/* harmony import */ var _components_Paragraph__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./components/Paragraph */ "./src/components/Paragraph.js");
/* harmony import */ var _components_Header__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./components/Header */ "./src/components/Header.js");
/* harmony import */ var _components_Card__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ./components/Card */ "./src/components/Card.js");
/* harmony import */ var _components_Badge__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ./components/Badge */ "./src/components/Badge.js");
/* harmony import */ var _components_Alert__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ./components/Alert */ "./src/components/Alert.js");
/* harmony import */ var _components_MediaObject__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ./components/MediaObject */ "./src/components/MediaObject.js");
/* harmony import */ var _components_ColumnBreak__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ./components/ColumnBreak */ "./src/components/ColumnBreak.js");
/* harmony import */ var _components_Column__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! ./components/Column */ "./src/components/Column.js");
/* harmony import */ var _components_Row__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! ./components/Row */ "./src/components/Row.js");
/* harmony import */ var _components_Container__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! ./components/Container */ "./src/components/Container.js");
/* harmony import */ var _components_Text__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! ./components/Text */ "./src/components/Text.js");
/* harmony import */ var _components_Default__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(/*! ./components/Default */ "./src/components/Default.js");
/* harmony import */ var _components_JsfInput__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(/*! ./components/JsfInput */ "./src/components/JsfInput.js");



































/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (function (editor) {
  var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var c = config;
  var domc = editor.DomComponents;
  var blocks = c.blocks;
  var bm = editor.BlockManager;
  var cats = c.blockCategories;
  var traits = {
    id: {
      name: 'id',
      label: c.labels.trait_id
    },
    "for": {
      name: 'for',
      label: c.labels.trait_for
    },
    name: {
      name: 'name',
      label: c.labels.trait_name
    },
    placeholder: {
      name: 'placeholder',
      label: c.labels.trait_placeholder
    },
    value: {
      name: 'value',
      label: c.labels.trait_value
    },
    required: {
      type: 'checkbox',
      name: 'required',
      label: c.labels.trait_required
    },
    checked: {
      label: c.labels.trait_checked,
      type: 'checkbox',
      name: 'checked',
      changeProp: 1
    }
  };
  if (cats.media) {
    if (blocks.image) {
      (0,_components_Image__WEBPACK_IMPORTED_MODULE_19__.ImageBlock)(bm, c.labels.image);
      (0,_components_Image__WEBPACK_IMPORTED_MODULE_19__["default"])(domc);
    }
    if (blocks.video) {
      (0,_components_video_Embed__WEBPACK_IMPORTED_MODULE_21__["default"])(domc);
      (0,_components_video_Video__WEBPACK_IMPORTED_MODULE_20__.VideoBlock)(bm, c.labels.video);
      (0,_components_video_Video__WEBPACK_IMPORTED_MODULE_20__["default"])(domc);
    }
  }

  // Rebuild the default component and add utility settings to it (border, bg, color, etc)
  if (cats.basic) {
    if (blocks["default"]) {
      (0,_components_Default__WEBPACK_IMPORTED_MODULE_33__["default"])(domc);
    }

    // Rebuild the text component and add display utility setting
    if (blocks.text) {
      (0,_components_Text__WEBPACK_IMPORTED_MODULE_32__.TextBlock)(bm, c.labels.text);
      (0,_components_Text__WEBPACK_IMPORTED_MODULE_32__["default"])(domc);
    }

    // Rebuild the link component with settings for collapse-control
    if (blocks.link) {
      (0,_components_Link__WEBPACK_IMPORTED_MODULE_17__.LinkBlock)(bm, c.labels.link);
      (0,_components_Link__WEBPACK_IMPORTED_MODULE_17__["default"])(editor);
    }

    // Basic
    /*if (blocks.list) {
      ListBlock(bm, c.labels.list)
      List(domc);
    }*/

    /*if (blocks.description_list) {
    }*/
  }

  // LAYOUT
  if (cats.layout) {
    if (blocks.container) {
      (0,_components_Container__WEBPACK_IMPORTED_MODULE_31__.ContainerBlock)(bm, c.labels.container);
      (0,_components_Container__WEBPACK_IMPORTED_MODULE_31__["default"])(domc);
    }
    if (blocks.row) {
      (0,_components_Row__WEBPACK_IMPORTED_MODULE_30__.RowBlock)(bm, c.labels.row);
      (0,_components_Row__WEBPACK_IMPORTED_MODULE_30__["default"])(domc);
    }
    if (blocks.column) {
      (0,_components_Column__WEBPACK_IMPORTED_MODULE_29__.ColumnBlock)(bm, c.labels.column);
      (0,_components_Column__WEBPACK_IMPORTED_MODULE_29__["default"])(domc, editor);
      (0,_components_ColumnBreak__WEBPACK_IMPORTED_MODULE_28__.ColumnBreakBlock)(bm, c.labels.column_break);
      (0,_components_ColumnBreak__WEBPACK_IMPORTED_MODULE_28__["default"])(domc);
    }
    // Media object
    if (blocks.media_object) {
      (0,_components_MediaObject__WEBPACK_IMPORTED_MODULE_27__.MediaObjectBlock)(bm, c.labels.media_object);
      (0,_components_MediaObject__WEBPACK_IMPORTED_MODULE_27__["default"])(domc);
    }
  }

  // Bootstrap COMPONENTS
  if (cats.components) {
    // Alert
    if (blocks.alert) {
      (0,_components_Alert__WEBPACK_IMPORTED_MODULE_26__.AlertBlock)(bm, c.labels.alert);
      (0,_components_Alert__WEBPACK_IMPORTED_MODULE_26__["default"])(domc);
    }
    if (blocks.tabs) {
      (0,_components_tabs_TabsNavigation__WEBPACK_IMPORTED_MODULE_2__.TabsBlock)(bm, c);
      (0,_components_tabs_TabsNavigation__WEBPACK_IMPORTED_MODULE_2__["default"])(domc, config);
      (0,_components_tabs_Tab__WEBPACK_IMPORTED_MODULE_4__["default"])(domc, config);
      (0,_components_tabs_TabsPanes__WEBPACK_IMPORTED_MODULE_3__["default"])(domc, config);
      (0,_components_tabs_TabPane__WEBPACK_IMPORTED_MODULE_5__["default"])(domc, config);
    }

    // Badge
    if (blocks.badge) {
      (0,_components_Badge__WEBPACK_IMPORTED_MODULE_25__.BadgeBlock)(bm, c.labels.badge);
      (0,_components_Badge__WEBPACK_IMPORTED_MODULE_25__["default"])(domc);
    }

    // Card
    if (blocks.card) {
      (0,_components_Card__WEBPACK_IMPORTED_MODULE_24__.CardBlock)(bm, c);
      (0,_components_Card__WEBPACK_IMPORTED_MODULE_24__["default"])(domc, editor);
    }

    // Collapse
    if (blocks.collapse) {
      (0,_components_Collapse__WEBPACK_IMPORTED_MODULE_0__.CollapseBlock)(bm, c.labels.collapse);
      (0,_components_Collapse__WEBPACK_IMPORTED_MODULE_0__["default"])(editor);
    }

    // Dropdown
    if (blocks.dropdown) {
      (0,_components_Dropdown__WEBPACK_IMPORTED_MODULE_1__.DropDownBlock)(bm, c.labels.dropdown);
      (0,_components_Dropdown__WEBPACK_IMPORTED_MODULE_1__["default"])(editor);
    }
  }

  // TYPOGRAPHY
  if (cats.typography) {
    if (blocks.header) {
      (0,_components_Header__WEBPACK_IMPORTED_MODULE_23__.HeaderBlock)(bm, c.labels.header);
      (0,_components_Header__WEBPACK_IMPORTED_MODULE_23__["default"])(domc);
    }
    if (blocks.paragraph) {
      (0,_components_Paragraph__WEBPACK_IMPORTED_MODULE_22__.ParagraphBlock)(bm, c.labels.paragraph);
      (0,_components_Paragraph__WEBPACK_IMPORTED_MODULE_22__["default"])(domc);
    }
  }
  if (cats.forms) {
    if (blocks.form) {
      (0,_components_Form__WEBPACK_IMPORTED_MODULE_6__.FormBlock)(bm, c.labels.form);
      (0,_components_Form__WEBPACK_IMPORTED_MODULE_6__["default"])(domc, traits, config);
    }
    if (blocks.input) {
      (0,_components_Input__WEBPACK_IMPORTED_MODULE_7__.InputBlock)(bm, c.labels.input);
      (0,_components_Input__WEBPACK_IMPORTED_MODULE_7__["default"])(domc, traits, config);
      (0,_components_FileInput__WEBPACK_IMPORTED_MODULE_18__.FileInputBlock)(bm, c.labels.file_input);
      (0,_components_FileInput__WEBPACK_IMPORTED_MODULE_18__["default"])(domc, traits, config);
    }
    if (blocks.form_group_input) {
      (0,_components_InputGroup__WEBPACK_IMPORTED_MODULE_8__.InputGroupBlock)(bm, c.labels.form_group_input);
      (0,_components_InputGroup__WEBPACK_IMPORTED_MODULE_8__["default"])(domc, traits, config);
    }
    if (blocks.textarea) {
      (0,_components_Textarea__WEBPACK_IMPORTED_MODULE_9__.TextareaBlock)(bm, c.labels.textarea);
      (0,_components_Textarea__WEBPACK_IMPORTED_MODULE_9__["default"])(domc, traits, config);
    }
    if (blocks.select) {
      (0,_components_Select__WEBPACK_IMPORTED_MODULE_10__.SelectBlock)(bm, c.labels.select);
      (0,_components_Select__WEBPACK_IMPORTED_MODULE_10__["default"])(editor, domc, traits, config);
    }
    if (blocks.checkbox) {
      (0,_components_Checkbox__WEBPACK_IMPORTED_MODULE_11__.CheckboxBlock)(bm, c.labels.checkbox);
      (0,_components_Checkbox__WEBPACK_IMPORTED_MODULE_11__["default"])(domc, traits, config);
    }
    if (blocks.radio) {
      (0,_components_Radio__WEBPACK_IMPORTED_MODULE_12__.RadioBlock)(bm, c.labels.radio);
      (0,_components_Radio__WEBPACK_IMPORTED_MODULE_12__["default"])(domc, traits, config);
    }
    if (blocks.label) {
      (0,_components_Label__WEBPACK_IMPORTED_MODULE_16__.LabelBlock)(bm, c.labels.label);
      (0,_components_Label__WEBPACK_IMPORTED_MODULE_16__["default"])(domc, traits, config);
    }
    if (blocks.button) {
      (0,_components_Button__WEBPACK_IMPORTED_MODULE_13__.ButtonBlock)(bm, c.labels.button);
      (0,_components_Button__WEBPACK_IMPORTED_MODULE_13__["default"])(domc);
    }
    if (blocks.button_group) {
      (0,_components_ButtonGroup__WEBPACK_IMPORTED_MODULE_14__.ButtonGroupBlock)(bm, c.labels.button_group);
      (0,_components_ButtonGroup__WEBPACK_IMPORTED_MODULE_14__["default"])(domc);
    }
    if (blocks.button_toolbar) {
      (0,_components_ButtonToolbar__WEBPACK_IMPORTED_MODULE_15__.ButtonToolbarBlock)(bm, c.labels.button_toolbar, c);
      (0,_components_ButtonToolbar__WEBPACK_IMPORTED_MODULE_15__["default"])(domc);
    }
  }
  if (cats.jsfForms) {
    if (blocks.jsfInputText) {
      (0,_components_JsfInput__WEBPACK_IMPORTED_MODULE_34__["default"])(domc, traits, config);
      (0,_components_JsfInput__WEBPACK_IMPORTED_MODULE_34__.JsfInputBlock)(bm, c.labels.jsfInputText);
    }
  }
});

/***/ }),

/***/ "./src/components/Alert.js":
/*!*********************************!*\
  !*** ./src/components/Alert.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   AlertBlock: () => (/* binding */ AlertBlock),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _bootstrap_contexts__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../bootstrap-contexts */ "./src/bootstrap-contexts.js");
/* harmony import */ var raw_loader_icons_exclamation_triangle_solid_svg__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! raw-loader!../icons/exclamation-triangle-solid.svg */ "../../node_modules/raw-loader/dist/cjs.js!./src/icons/exclamation-triangle-solid.svg");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils */ "./src/utils.js");
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }



var AlertBlock = function AlertBlock(bm, label) {
  bm.add('alert', {
    label: "\n            ".concat(raw_loader_icons_exclamation_triangle_solid_svg__WEBPACK_IMPORTED_MODULE_1__["default"], "\n            <div>").concat(label, "</div>\n        "),
    category: 'Components',
    content: {
      type: 'alert',
      content: 'This is an alert—check it out!'
    }
  });
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (function (domc) {
  var textType = domc.getType('text');
  var textModel = textType.model;
  var textView = textType.view;
  domc.addType('alert', {
    isComponent: function isComponent(el) {
      if (el && el.classList && el.classList.contains('alert')) {
        return {
          type: 'alert'
        };
      }
    },
    extend: 'text',
    model: {
      defaults: Object.assign({}, textModel.prototype.defaults, {
        'custom-name': 'Alert',
        tagName: 'div',
        classes: ['alert'],
        traits: [{
          type: 'class_select',
          options: [{
            value: '',
            name: 'None'
          }].concat(_toConsumableArray(_bootstrap_contexts__WEBPACK_IMPORTED_MODULE_0__["default"].map(function (v) {
            return {
              value: 'alert-' + v,
              name: (0,_utils__WEBPACK_IMPORTED_MODULE_2__.capitalize)(v)
            };
          }))),
          label: 'Context'
        }].concat(textModel.prototype.defaults.traits)
      })
    },
    extendView: 'text'
  });
});

/***/ }),

/***/ "./src/components/Badge.js":
/*!*********************************!*\
  !*** ./src/components/Badge.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   BadgeBlock: () => (/* binding */ BadgeBlock),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _bootstrap_contexts__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../bootstrap-contexts */ "./src/bootstrap-contexts.js");
/* harmony import */ var raw_loader_icons_certificate_solid_svg__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! raw-loader!../icons/certificate-solid.svg */ "../../node_modules/raw-loader/dist/cjs.js!./src/icons/certificate-solid.svg");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils */ "./src/utils.js");
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }



var BadgeBlock = function BadgeBlock(bm, label) {
  bm.add('badge', {
    label: "\n            ".concat(raw_loader_icons_certificate_solid_svg__WEBPACK_IMPORTED_MODULE_1__["default"], "\n            <div>").concat(label, "</div>\n        "),
    category: 'Components',
    content: {
      type: 'badge',
      content: 'New!'
    }
  });
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (function (domc) {
  var textType = domc.getType('text');
  var textModel = textType.model;
  var textView = textType.view;
  domc.addType('badge', {
    isComponent: function isComponent(el) {
      if (el && el.classList && el.classList.contains('badge')) {
        return {
          type: 'badge'
        };
      }
    },
    extend: 'text',
    model: {
      defaults: Object.assign({}, textModel.prototype.defaults, {
        'custom-name': 'Badge',
        tagName: 'span',
        classes: ['badge'],
        traits: [{
          type: 'class_select',
          options: [{
            value: '',
            name: 'None'
          }].concat(_toConsumableArray(_bootstrap_contexts__WEBPACK_IMPORTED_MODULE_0__["default"].map(function (v) {
            return {
              value: 'badge-' + v,
              name: (0,_utils__WEBPACK_IMPORTED_MODULE_2__.capitalize)(v)
            };
          }))),
          label: 'Context'
        }, {
          type: 'class_select',
          options: [{
            value: '',
            name: 'Default'
          }, {
            value: 'badge-pill',
            name: 'Pill'
          }],
          label: 'Shape'
        }].concat(textModel.prototype.defaults.traits)
      })
    },
    extendView: 'text'
  });
});

/***/ }),

/***/ "./src/components/Button.js":
/*!**********************************!*\
  !*** ./src/components/Button.js ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ButtonBlock: () => (/* binding */ ButtonBlock),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _bootstrap_contexts__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../bootstrap-contexts */ "./src/bootstrap-contexts.js");
/* harmony import */ var _bootstrap_btn_sizes__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../bootstrap-btn-sizes */ "./src/bootstrap-btn-sizes.js");
/* harmony import */ var raw_loader_icons_button_svg__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! raw-loader!../icons/button.svg */ "../../node_modules/raw-loader/dist/cjs.js!./src/icons/button.svg");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils */ "./src/utils.js");
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }




var ButtonBlock = function ButtonBlock(bm, label) {
  bm.add('button', {
    label: "".concat(raw_loader_icons_button_svg__WEBPACK_IMPORTED_MODULE_2__["default"], "<div>").concat(label, "</div>"),
    category: 'Forms',
    content: '<button class="btn btn-primary">Send</button>'
  });
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (function (dc) {
  var defaultType = dc.getType('default');
  var defaultModel = defaultType.model;
  var defaultView = defaultType.view;
  dc.addType('button', {
    isComponent: function isComponent(el) {
      if (el && el.classList && el.classList.contains('btn')) {
        return {
          type: 'button'
        };
      }
    },
    extend: 'default',
    model: {
      defaults: _objectSpread(_objectSpread({}, defaultModel.prototype.defaults), {}, {
        'custom-name': 'Button',
        droppable: false,
        attributes: {
          role: 'button'
        },
        classes: ['btn'],
        traits: [{
          type: 'content',
          label: 'Text'
        }, {
          label: 'Type',
          type: 'select',
          name: 'type',
          options: [{
            value: 'submit',
            name: 'Submit'
          }, {
            value: 'reset',
            name: 'Reset'
          }, {
            value: 'button',
            name: 'Button'
          }]
        }, {
          type: 'class_select',
          options: [{
            value: '',
            name: 'None'
          }].concat(_toConsumableArray(_bootstrap_contexts__WEBPACK_IMPORTED_MODULE_0__["default"].map(function (v) {
            return {
              value: "btn-".concat(v),
              name: (0,_utils__WEBPACK_IMPORTED_MODULE_3__.capitalize)(v)
            };
          })), _toConsumableArray(_bootstrap_contexts__WEBPACK_IMPORTED_MODULE_0__["default"].map(function (v) {
            return {
              value: "btn-outline-".concat(v),
              name: (0,_utils__WEBPACK_IMPORTED_MODULE_3__.capitalize)(v) + ' (Outline)'
            };
          }))),
          label: 'Context'
        }, {
          type: 'class_select',
          options: [{
            value: '',
            name: 'Default'
          }].concat(_toConsumableArray(Object.keys(_bootstrap_btn_sizes__WEBPACK_IMPORTED_MODULE_1__["default"]).map(function (k) {
            return {
              value: "btn-".concat(k),
              name: _bootstrap_btn_sizes__WEBPACK_IMPORTED_MODULE_1__["default"][k]
            };
          }))),
          label: 'Size'
        }, {
          type: 'class_select',
          options: [{
            value: '',
            name: 'Inline'
          }, {
            value: 'btn-block',
            name: 'Block'
          }],
          label: 'Width'
        }].concat(defaultModel.prototype.defaults.traits)
      }),
      afterChange: function afterChange(e) {
        if (this.attributes.type === 'button') {
          if (this.attributes.classes.filter(function (klass) {
            return klass.id === 'btn';
          }).length === 0) {
            this.changeType('link');
          }
        }
      }
    },
    extendView: 'default',
    view: {
      events: {
        'click': 'handleClick'
      },
      init: function init() {
        this.listenTo(this.model, 'change:content', this.updateContent);
      },
      updateContent: function updateContent() {
        this.el.innerHTML = this.model.get('content');
      },
      handleClick: function handleClick(e) {
        e.preventDefault();
      }
    }
  });
});

/***/ }),

/***/ "./src/components/ButtonGroup.js":
/*!***************************************!*\
  !*** ./src/components/ButtonGroup.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ButtonGroupBlock: () => (/* binding */ ButtonGroupBlock),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _bootstrap_btn_sizes__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../bootstrap-btn-sizes */ "./src/bootstrap-btn-sizes.js");
/* harmony import */ var raw_loader_icons_button_svg__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! raw-loader!../icons/button.svg */ "../../node_modules/raw-loader/dist/cjs.js!./src/icons/button.svg");
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }


var ButtonGroupBlock = function ButtonGroupBlock(bm, label) {
  bm.add('button_group', {
    label: "\n            ".concat(raw_loader_icons_button_svg__WEBPACK_IMPORTED_MODULE_1__["default"], "\n            <div>").concat(label, "</div>\n        "),
    category: 'Forms',
    content: {
      type: 'button_group'
    }
  });
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (function (dc) {
  var defaultType = dc.getType('default');
  var defaultModel = defaultType.model;
  var defaultView = defaultType.view;
  dc.addType('button_group', {
    isComponent: function isComponent(el) {
      if (el && el.classList && el.classList.contains('btn-group')) {
        return {
          type: 'button_group'
        };
      }
    },
    extend: 'default',
    model: {
      defaults: Object.assign({}, defaultModel.prototype.defaults, {
        'custom-name': 'Button Group',
        tagName: 'div',
        classes: ['btn-group'],
        droppable: '.btn',
        attributes: {
          role: 'group'
        },
        traits: [{
          type: 'class_select',
          options: [{
            value: '',
            name: 'Default'
          }].concat(_toConsumableArray(Object.keys(_bootstrap_btn_sizes__WEBPACK_IMPORTED_MODULE_0__["default"]).map(function (k) {
            return {
              value: 'btn-group-' + k,
              name: _bootstrap_btn_sizes__WEBPACK_IMPORTED_MODULE_0__["default"][k]
            };
          }))),
          label: 'Size'
        }, {
          type: 'class_select',
          options: [{
            value: '',
            name: 'Horizontal'
          }, {
            value: 'btn-group-vertical',
            name: 'Vertical'
          }],
          label: 'Size'
        }, {
          type: 'Text',
          label: 'ARIA Label',
          name: 'aria-label',
          placeholder: 'A group of buttons'
        }].concat(defaultModel.prototype.defaults.traits)
      })
    },
    extendView: 'default'
  });
});

/***/ }),

/***/ "./src/components/ButtonToolbar.js":
/*!*****************************************!*\
  !*** ./src/components/ButtonToolbar.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ButtonToolbarBlock: () => (/* binding */ ButtonToolbarBlock),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var raw_loader_icons_button_svg__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! raw-loader!../icons/button.svg */ "../../node_modules/raw-loader/dist/cjs.js!./src/icons/button.svg");

var ButtonToolbarBlock = function ButtonToolbarBlock(bm, label) {
  bm.add('button_toolbar', {
    label: "\n            ".concat(raw_loader_icons_button_svg__WEBPACK_IMPORTED_MODULE_0__["default"], "\n            <div>").concat(label, "</div>\n        "),
    category: 'Forms',
    content: {
      type: 'button_toolbar'
    }
  });
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (function (dc) {
  var defaultType = dc.getType('default');
  var defaultModel = defaultType.model;
  var defaultView = defaultType.view;
  dc.addType('button_toolbar', {
    isComponent: function isComponent(el) {
      if (el && el.classList && el.classList.contains('btn-toolbar')) {
        return {
          type: 'button_toolbar'
        };
      }
    },
    extend: 'default',
    model: {
      defaults: Object.assign({}, defaultModel.prototype.defaults, {
        'custom-name': 'Button Toolbar',
        tagName: 'div',
        classes: ['btn-toolbar'],
        droppable: '.btn-group',
        attributes: {
          role: 'toolbar'
        },
        traits: [{
          type: 'Text',
          label: 'ARIA Label',
          name: 'aria-label',
          placeholder: 'A toolbar of button groups'
        }].concat(defaultModel.prototype.defaults.traits)
      })
    },
    extendView: 'default'
  });
});

/***/ }),

/***/ "./src/components/Card.js":
/*!********************************!*\
  !*** ./src/components/Card.js ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   CardBlock: () => (/* binding */ CardBlock),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var raw_loader_icons_credit_card_solid_svg__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! raw-loader!../icons/credit-card-solid.svg */ "../../node_modules/raw-loader/dist/cjs.js!./src/icons/credit-card-solid.svg");

var CardBlock = function CardBlock(bm, c) {
  bm.add('card', {
    label: "\n            ".concat(raw_loader_icons_credit_card_solid_svg__WEBPACK_IMPORTED_MODULE_0__["default"], "\n            <div>").concat(c.labels.card, "</div>\n        "),
    category: 'Components',
    content: {
      type: 'card'
    }
  });
  bm.add('card_container', {
    label: "\n            ".concat(raw_loader_icons_credit_card_solid_svg__WEBPACK_IMPORTED_MODULE_0__["default"], "\n            <div>").concat(c.labels.card_container, "</div>\n        "),
    category: 'Components',
    content: {
      type: 'card_container'
    }
  });
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (function (domc, editor) {
  var comps = editor.DomComponents;
  var defaultType = comps.getType('default');
  var defaultModel = defaultType.model;
  var defaultView = defaultType.view;
  var imageType = domc.getType('image');
  var imageModel = imageType.model;
  var imageView = imageType.view;
  domc.addType('card', {
    isComponent: function isComponent(el) {
      if (el && el.classList && el.classList.contains('card')) {
        return {
          type: 'card'
        };
      }
    },
    extend: 'default',
    model: {
      defaults: Object.assign({}, defaultModel.prototype.defaults, {
        'custom-name': 'Card',
        classes: ['card'],
        traits: [{
          type: 'checkbox',
          label: 'Image Top',
          name: 'card-img-top',
          changeProp: 1
        }, {
          type: 'checkbox',
          label: 'Header',
          name: 'card-header',
          changeProp: 1
        }, {
          type: 'checkbox',
          label: 'Image',
          name: 'card-img',
          changeProp: 1
        }, {
          type: 'checkbox',
          label: 'Image Overlay',
          name: 'card-img-overlay',
          changeProp: 1
        }, {
          type: 'checkbox',
          label: 'Body',
          name: 'card-body',
          changeProp: 1
        }, {
          type: 'checkbox',
          label: 'Footer',
          name: 'card-footer',
          changeProp: 1
        }, {
          type: 'checkbox',
          label: 'Image Bottom',
          name: 'card-img-bottom',
          changeProp: 1
        }].concat(defaultModel.prototype.defaults.traits)
      }),
      init2: function init2() {
        this.listenTo(this, 'change:card-img-top', this.cardImageTop);
        this.listenTo(this, 'change:card-header', this.cardHeader);
        this.listenTo(this, 'change:card-img', this.cardImage);
        this.listenTo(this, 'change:card-img-overlay', this.cardImageOverlay);
        this.listenTo(this, 'change:card-body', this.cardBody);
        this.listenTo(this, 'change:card-footer', this.cardFooter);
        this.listenTo(this, 'change:card-img-bottom', this.cardImageBottom);
        this.components().comparator = 'card-order';
        this.set('card-img-top', true);
        this.set('card-body', true);
      },
      cardImageTop: function cardImageTop() {
        this.createCardComponent('card-img-top');
      },
      cardHeader: function cardHeader() {
        this.createCardComponent('card-header');
      },
      cardImage: function cardImage() {
        this.createCardComponent('card-img');
      },
      cardImageOverlay: function cardImageOverlay() {
        this.createCardComponent('card-img-overlay');
      },
      cardBody: function cardBody() {
        this.createCardComponent('card-body');
      },
      cardFooter: function cardFooter() {
        this.createCardComponent('card-footer');
      },
      cardImageBottom: function cardImageBottom() {
        this.createCardComponent('card-img-bottom');
      },
      createCardComponent: function createCardComponent(prop) {
        var state = this.get(prop);
        var type = prop.replace(/-/g, '_').replace(/img/g, 'image');
        var children = this.components();
        var existing = children.filter(function (comp) {
          return comp.attributes.type === type;
        })[0]; // should only be one of each.

        if (state && !existing) {
          var comp = children.add({
            type: type
          });
          var comp_children = comp.components();
          if (prop === 'card-header') {
            comp_children.add({
              type: 'header',
              tagName: 'h4',
              style: {
                'margin-bottom': '0px'
              },
              content: 'Card Header'
            });
          }
          if (prop === 'card-img-overlay') {
            comp_children.add({
              type: 'header',
              tagName: 'h4',
              classes: ['card-title'],
              content: 'Card title'
            });
            comp_children.add({
              type: 'text',
              tagName: 'p',
              classes: ['card-text'],
              content: "Some quick example text to build on the card title and make up the bulk of the card's content."
            });
          }
          if (prop === 'card-body') {
            comp_children.add({
              type: 'header',
              tagName: 'h4',
              classes: ['card-title'],
              content: 'Card title'
            });
            comp_children.add({
              type: 'header',
              tagName: 'h6',
              classes: ['card-subtitle', 'text-muted', 'mb-2'],
              content: 'Card subtitle'
            });
            comp_children.add({
              type: 'text',
              tagName: 'p',
              classes: ['card-text'],
              content: "Some quick example text to build on the card title and make up the bulk of the card's content."
            });
            comp_children.add({
              type: 'link',
              classes: ['card-link'],
              href: '#',
              content: 'Card link'
            });
            comp_children.add({
              type: 'link',
              classes: ['card-link'],
              href: '#',
              content: 'Another link'
            });
          }
          this.order();
        } else if (!state) {
          existing.destroy();
        }
      },
      order: function order() {}
    },
    extendView: 'default'
  });
  domc.addType('card_image_top', {
    isComponent: function isComponent(el) {
      if (el && el.classList && el.classList.contains('card-img-top')) {
        return {
          type: 'card_image_top'
        };
      }
    },
    extend: 'image',
    model: {
      defaults: Object.assign({}, imageModel.prototype.defaults, {
        'custom-name': 'Card Image Top',
        classes: ['card-img-top'],
        'card-order': 1
      })
    },
    extendView: 'image'
  });
  domc.addType('card_header', {
    isComponent: function isComponent(el) {
      if (el && el.classList && el.classList.contains('card-header')) {
        return {
          type: 'card_header'
        };
      }
    },
    extend: 'default',
    model: {
      defaults: Object.assign({}, defaultModel.prototype.defaults, {
        'custom-name': 'Card Header',
        classes: ['card-header'],
        'card-order': 2
      })
    },
    extendView: 'default'
  });
  domc.addType('card_image', {
    isComponent: function isComponent(el) {
      if (el && el.classList && el.classList.contains('card-img')) {
        return {
          type: 'card_image'
        };
      }
    },
    extend: 'image',
    model: {
      defaults: Object.assign({}, imageModel.prototype.defaults, {
        'custom-name': 'Card Image',
        classes: ['card-img'],
        'card-order': 3
      })
    },
    extendView: 'image'
  });
  domc.addType('card_image_overlay', {
    isComponent: function isComponent(el) {
      if (el && el.classList && el.classList.contains('card-img-overlay')) {
        return {
          type: 'card_image_overlay'
        };
      }
    },
    extend: 'default',
    model: {
      defaults: Object.assign({}, defaultModel.prototype.defaults, {
        'custom-name': 'Card Image Overlay',
        classes: ['card-img-overlay'],
        'card-order': 4
      })
    },
    extendView: 'default'
  });
  domc.addType('card_body', {
    isComponent: function isComponent(el) {
      if (el && el.classList && el.classList.contains('card-body')) {
        return {
          type: 'card_body'
        };
      }
    },
    extend: 'default',
    model: {
      defaults: Object.assign({}, defaultModel.prototype.defaults, {
        'custom-name': 'Card Body',
        classes: ['card-body'],
        'card-order': 5
      })
    },
    extendView: 'default'
  });
  domc.addType('card_footer', {
    isComponent: function isComponent(el) {
      if (el && el.classList && el.classList.contains('card-footer')) {
        return {
          type: 'card_footer'
        };
      }
    },
    extend: 'default',
    model: {
      defaults: Object.assign({}, defaultModel.prototype.defaults, {
        'custom-name': 'Card Footer',
        classes: ['card-footer'],
        'card-order': 6
      })
    },
    extendView: 'default'
  });
  domc.addType('card_image_bottom', {
    isComponent: function isComponent(el) {
      if (el && el.classList && el.classList.contains('card-img-bottom')) {
        return {
          type: 'card_image_bottom'
        };
      }
    },
    extend: 'image',
    model: {
      defaults: Object.assign({}, imageModel.prototype.defaults, {
        'custom-name': 'Card Image Bottom',
        classes: ['card-img-bottom'],
        'card-order': 7
      })
    },
    extendView: 'image'
  });
  domc.addType('card_container', {
    isComponent: function isComponent(el) {
      var css = Array.from(el.classList || []);
      var includes = ['card-group', 'card-deck', 'card-columns'];
      var intersection = css.filter(function (x) {
        return includes.includes(x);
      });
      if (el && el.classList && intersection.length) {
        return {
          type: 'card_container'
        };
      }
    },
    extend: 'default',
    model: {
      defaults: Object.assign({}, defaultModel.prototype.defaults, {
        'custom-name': 'Card Container',
        classes: ['card-group'],
        droppable: '.card',
        traits: [{
          type: 'class_select',
          options: [{
            value: 'card-group',
            name: 'Group'
          }, {
            value: 'card-deck',
            name: 'Deck'
          }, {
            value: 'card-columns',
            name: 'Columns'
          }],
          label: 'Layout'
        }].concat(defaultModel.prototype.defaults.traits)
      })
    },
    extendView: 'default'
  });
});

/***/ }),

/***/ "./src/components/Checkbox.js":
/*!************************************!*\
  !*** ./src/components/Checkbox.js ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   CheckboxBlock: () => (/* binding */ CheckboxBlock),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var raw_loader_icons_check_square_solid_svg__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! raw-loader!../icons/check-square-solid.svg */ "../../node_modules/raw-loader/dist/cjs.js!./src/icons/check-square-solid.svg");
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }

var CheckboxBlock = function CheckboxBlock(bm, label) {
  bm.add('checkbox', {
    label: "\n            ".concat(raw_loader_icons_check_square_solid_svg__WEBPACK_IMPORTED_MODULE_0__["default"], "\n            <div>").concat(label, "</div>\n        "),
    category: 'Forms',
    content: "\n        <div class=\"form-check\">\n          <input class=\"form-check-input\" type=\"checkbox\" value=\"\" id=\"defaultCheck1\">\n          <label class=\"form-check-label\" for=\"defaultCheck1\">\n            Default checkbox\n          </label>\n        </div>\n      "
  });
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (function (dc, traits) {
  var config = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  var defaultType = dc.getType('default');
  var defaultModel = defaultType.model;
  var defaultView = defaultType.view;
  var inputType = dc.getType('input');
  var inputModel = inputType.model;
  dc.addType('checkbox', {
    isComponent: function isComponent(el) {
      if (el.tagName === 'INPUT' && el.type === 'checkbox') {
        return {
          type: 'checkbox'
        };
      }
    },
    extend: 'default',
    model: {
      defaults: _objectSpread(_objectSpread({}, inputModel.prototype.defaults), {}, {
        'custom-name': config.labels.checkbox,
        copyable: false,
        droppable: false,
        attributes: {
          type: 'checkbox'
        },
        traits: [traits.id, traits.name, traits.value, traits.required, traits.checked]
      }),
      init: function init() {
        this.listenTo(this, 'change:checked', this.handleChecked);
      },
      handleChecked: function handleChecked() {
        var checked = this.get('checked');
        var attrs = this.get('attributes');
        var view = this.view;
        if (checked) {
          attrs.checked = true;
        } else {
          delete attrs.checked;
        }
        if (view) {
          view.el.checked = checked;
        }
        this.set('attributes', _objectSpread({}, attrs));
      }
    },
    extendView: 'default',
    view: {
      events: {
        'click': 'handleClick'
      },
      handleClick: function handleClick(e) {
        e.preventDefault();
      }
    }
  });
});

/***/ }),

/***/ "./src/components/Collapse.js":
/*!************************************!*\
  !*** ./src/components/Collapse.js ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   CollapseBlock: () => (/* binding */ CollapseBlock),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var raw_loader_icons_compress_solid_svg__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! raw-loader!../icons/compress-solid.svg */ "../../node_modules/raw-loader/dist/cjs.js!./src/icons/compress-solid.svg");

var CollapseBlock = function CollapseBlock(bm, label) {
  bm.add('collapse', {
    label: "\n            ".concat(raw_loader_icons_compress_solid_svg__WEBPACK_IMPORTED_MODULE_0__["default"], "\n            <div>").concat(label, "</div>\n        "),
    category: 'Components',
    content: {
      type: 'collapse'
    }
  });
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (function (editor) {
  var comps = editor.DomComponents;
  var defaultType = comps.getType('default');
  var defaultModel = defaultType.model;
  var defaultView = defaultType.view;
  comps.addType('collapse', {
    isComponent: function isComponent(el) {
      if (el && el.classList && el.classList.contains('dropdown')) {
        return {
          type: 'dropdown'
        };
      }
    },
    extend: 'default',
    model: {
      defaults: Object.assign({}, defaultModel.prototype.defaults, {
        'custom-name': 'Dropdown',
        classes: ['collapse'],
        droppable: true,
        traits: [{
          type: 'class_select',
          options: [{
            value: '',
            name: 'Closed'
          }, {
            value: 'show',
            name: 'Open'
          }],
          label: 'Initial state'
        }].concat(defaultModel.prototype.defaults.traits)
      })
      /*init2() {
        window.asdf = this;
        const toggle = {
          type: 'button',
          content: 'Click to toggle',
          classes: ['btn', 'dropdown-toggle']
        }
        const toggle_comp = this.append(toggle)[0];
        const menu = {
          type: 'dropdown_menu'
        }
        const menu_comp = this.append(menu)[0];
        this.setupToggle(null, null, {force: true});
        const comps = this.components();
        comps.bind('add', this.setupToggle.bind(this));
        comps.bind('change', this.setupToggle.bind(this));
        comps.bind('remove', this.setupToggle.bind(this));
        const classes = this.get('classes');
        classes.bind('add', this.setupToggle.bind(this));
        classes.bind('change', this.setupToggle.bind(this));
        classes.bind('remove', this.setupToggle.bind(this));
      },
      setupToggle(a, b, options = {}) {
        const toggle = this.components().filter(c => c.getAttributes().class.split(' ').includes('dropdown-toggle'))[0];
        // raise error if toggle not found
        const menu = this.components().filter(c => c.getAttributes().class.split(' ').includes('dropdown-menu'))[0];
        // raise error if menu not found
          if(options.force !== true && options.ignore === true) {
          return;
        }
          if(toggle && menu) {
            function hasEvent(comp) {
            let eca = comp._events['change:attributes'];
            if(!eca) return false;
            return eca.filter(e => e.callback.name == 'setupToggle').length != 0;
          }
            // setup event listeners if they aren't set
          if(!hasEvent(toggle)) {
            this.listenTo(toggle, 'change:attributes', this.setupToggle);
          }
          if(!hasEvent(menu)) {
            this.listenTo(menu, 'change:attributes', this.setupToggle);
          }
            // setup toggle
          var toggle_attrs = toggle.getAttributes();
          toggle_attrs['role'] = 'button'; // if A
          var menu_attrs = menu.getAttributes();
          if(!toggle_attrs.hasOwnProperty('data-toggle')) {
            toggle_attrs['data-toggle'] = 'dropdown';
          }
          if(!toggle_attrs.hasOwnProperty('aria-haspopup')) {
            toggle_attrs['aria-haspopup'] = true;
          }
          const dropdown_classes = this.getAttributes().class.split(' ');
          toggle_attrs['aria-expanded'] = dropdown_classes.includes('show');
          toggle.set('attributes', toggle_attrs, {ignore: true});
          // setup menu
          // toggle needs ID for aria-labelled on the menu, could alert here
          if(toggle_attrs.hasOwnProperty('id')) {
            menu_attrs['aria-labelledby'] = toggle_attrs.id;
          } else {
            delete menu_attrs['aria-labelledby'];
          }
          menu.set('attributes', menu_attrs, {ignore: true});
        }
      }*/
    },

    extendView: 'default',
    view: {
      /*init() {
        this.model.setupToggle
      }*/
    }
  });
});

/***/ }),

/***/ "./src/components/Column.js":
/*!**********************************!*\
  !*** ./src/components/Column.js ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ColumnBlock: () => (/* binding */ ColumnBlock),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var raw_loader_icons_columns_solid_svg__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! raw-loader!../icons/columns-solid.svg */ "../../node_modules/raw-loader/dist/cjs.js!./src/icons/columns-solid.svg");
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }

var ColumnBlock = function ColumnBlock(bm, label) {
  bm.add('column').set({
    label: "\n            ".concat(raw_loader_icons_columns_solid_svg__WEBPACK_IMPORTED_MODULE_0__["default"], "\n            <div>").concat(label, "</div>\n        "),
    category: 'Layout',
    content: {
      type: 'column',
      classes: ['col']
    }
  });
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (function (domc, editor) {
  var defaultType = domc.getType('default');
  var defaultModel = defaultType.model;
  var defaultView = defaultType.view;
  var spans = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];
  domc.addType('column', {
    isComponent: function isComponent(el) {
      var match = false;
      if (el && el.classList) {
        el.classList.forEach(function (klass) {
          if (klass == "col" || klass.match(/^col-/)) {
            match = true;
          }
        });
      }
      if (match) return {
        type: 'column'
      };
    },
    extend: 'default',
    model: {
      defaults: Object.assign({}, defaultModel.prototype.defaults, {
        'custom-name': 'Column',
        draggable: '.row',
        droppable: true,
        resizable: {
          updateTarget: function updateTarget(el, rect, opt) {
            var selected = editor.getSelected();
            if (!selected) {
              return;
            }

            //compute the current screen size (bootstrap semantic)
            var docWidth = el.getRootNode().body.offsetWidth;
            var currentSize = "";
            if (docWidth >= 1200) {
              currentSize = "xl";
            } else if (docWidth >= 992) {
              currentSize = "lg";
            } else if (docWidth >= 768) {
              currentSize = "md";
            } else if (docWidth >= 576) {
              currentSize = "sm";
            }

            //compute the threshold when add on remove 1 col span to the element
            var row = el.parentElement;
            var oneColWidth = row.offsetWidth / 12;
            //the threshold is half one column width
            var threshold = oneColWidth * 0.5;

            //check if we are growing or shrinking the column
            var grow = rect.w > el.offsetWidth + threshold;
            var shrink = rect.w < el.offsetWidth - threshold;
            if (grow || shrink) {
              var testRegexp = new RegExp("^col-" + currentSize + "-\\d{1,2}$");
              if (!currentSize) {
                testRegexp = new RegExp("^col-\\d{1,2}$");
              }
              var found = false;
              var sizesSpans = {};
              var oldSpan = 0;
              var oldClass = null;
              var _iterator = _createForOfIteratorHelper(el.classList),
                _step;
              try {
                for (_iterator.s(); !(_step = _iterator.n()).done;) {
                  var cl = _step.value;
                  if (cl.indexOf("col-") === 0) {
                    var _cl$split = cl.split("-"),
                      _cl$split2 = _slicedToArray(_cl$split, 3),
                      c = _cl$split2[0],
                      size = _cl$split2[1],
                      span = _cl$split2[2];
                    if (!span) {
                      span = size;
                      size = "";
                    }
                    sizesSpans[size] = span;
                    if (size === currentSize) {
                      //found the col-XX-99 class
                      oldClass = cl;
                      oldSpan = span;
                      found = true;
                    }
                  }
                }
              } catch (err) {
                _iterator.e(err);
              } finally {
                _iterator.f();
              }
              if (!found) {
                var sizeOrder = ["", "xs", "sm", "md", "lg", "xl"];
                for (var _i = 0, _sizeOrder = sizeOrder; _i < _sizeOrder.length; _i++) {
                  var s = _sizeOrder[_i];
                  if (sizesSpans[s]) {
                    oldSpan = sizesSpans[s];
                    found = true;
                  }
                  if (s === currentSize) {
                    break;
                  }
                }
              }
              var newSpan = Number(oldSpan);
              if (grow) {
                newSpan++;
              } else {
                newSpan--;
              }
              if (newSpan > 12) {
                newSpan = 12;
              }
              if (newSpan < 1) {
                newSpan = 1;
              }
              var newClass = "col-" + currentSize + "-" + newSpan;
              if (!currentSize) {
                newClass = "col-" + newSpan;
              }
              //update the class
              selected.addClass(newClass);
              if (oldClass && oldClass !== newClass) {
                selected.removeClass(oldClass);
              }
              //notify the corresponding trait to update its value accordingly
              selected.getTrait((currentSize || "xs") + "_width").view.postUpdate();
            }
          },
          tl: 0,
          tc: 0,
          tr: 0,
          cl: 0,
          cr: 1,
          bl: 0,
          bc: 0,
          br: 0
        },
        traits: [{
          id: "xs_width",
          type: 'class_select',
          options: [{
            value: 'col',
            name: 'Equal'
          }, {
            value: 'col-auto',
            name: 'Variable'
          }].concat(_toConsumableArray(spans.map(function (i) {
            return {
              value: 'col-' + i,
              name: i + '/12'
            };
          }))),
          label: 'XS Width'
        }, {
          id: "sm_width",
          type: 'class_select',
          options: [{
            value: '',
            name: 'None'
          }, {
            value: 'col-sm',
            name: 'Equal'
          }, {
            value: 'col-sm-auto',
            name: 'Variable'
          }].concat(_toConsumableArray(spans.map(function (i) {
            return {
              value: 'col-sm-' + i,
              name: i + '/12'
            };
          }))),
          label: 'SM Width'
        }, {
          id: "md_width",
          type: 'class_select',
          options: [{
            value: '',
            name: 'None'
          }, {
            value: 'col-md',
            name: 'Equal'
          }, {
            value: 'col-md-auto',
            name: 'Variable'
          }].concat(_toConsumableArray(spans.map(function (i) {
            return {
              value: 'col-md-' + i,
              name: i + '/12'
            };
          }))),
          label: 'MD Width'
        }, {
          id: "lg_width",
          type: 'class_select',
          options: [{
            value: '',
            name: 'None'
          }, {
            value: 'col-lg',
            name: 'Equal'
          }, {
            value: 'col-lg-auto',
            name: 'Variable'
          }].concat(_toConsumableArray(spans.map(function (i) {
            return {
              value: 'col-lg-' + i,
              name: i + '/12'
            };
          }))),
          label: 'LG Width'
        }, {
          id: "xl_width",
          type: 'class_select',
          options: [{
            value: '',
            name: 'None'
          }, {
            value: 'col-xl',
            name: 'Equal'
          }, {
            value: 'col-xl-auto',
            name: 'Variable'
          }].concat(_toConsumableArray(spans.map(function (i) {
            return {
              value: 'col-xl-' + i,
              name: i + '/12'
            };
          }))),
          label: 'XL Width'
        }, {
          type: 'class_select',
          options: [{
            value: '',
            name: 'None'
          }].concat(_toConsumableArray(spans.map(function (i) {
            return {
              value: 'offset-' + i,
              name: i + '/12'
            };
          }))),
          label: 'XS Offset'
        }, {
          type: 'class_select',
          options: [{
            value: '',
            name: 'None'
          }].concat(_toConsumableArray(spans.map(function (i) {
            return {
              value: 'offset-sm-' + i,
              name: i + '/12'
            };
          }))),
          label: 'SM Offset'
        }, {
          type: 'class_select',
          options: [{
            value: '',
            name: 'None'
          }].concat(_toConsumableArray(spans.map(function (i) {
            return {
              value: 'offset-md-' + i,
              name: i + '/12'
            };
          }))),
          label: 'MD Offset'
        }, {
          type: 'class_select',
          options: [{
            value: '',
            name: 'None'
          }].concat(_toConsumableArray(spans.map(function (i) {
            return {
              value: 'offset-lg-' + i,
              name: i + '/12'
            };
          }))),
          label: 'LG Offset'
        }, {
          type: 'class_select',
          options: [{
            value: '',
            name: 'None'
          }].concat(_toConsumableArray(spans.map(function (i) {
            return {
              value: 'offset-xl-' + i,
              name: i + '/12'
            };
          }))),
          label: 'XL Offset'
        }].concat(defaultModel.prototype.defaults.traits)
      })
    },
    extendView: 'default'
  });
});

/***/ }),

/***/ "./src/components/ColumnBreak.js":
/*!***************************************!*\
  !*** ./src/components/ColumnBreak.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ColumnBreakBlock: () => (/* binding */ ColumnBreakBlock),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var raw_loader_icons_equals_solid_svg__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! raw-loader!../icons/equals-solid.svg */ "../../node_modules/raw-loader/dist/cjs.js!./src/icons/equals-solid.svg");

var ColumnBreakBlock = function ColumnBreakBlock(bm, label) {
  bm.add('column_break').set({
    label: "\n            ".concat(raw_loader_icons_equals_solid_svg__WEBPACK_IMPORTED_MODULE_0__["default"], "\n            <div>").concat(label, "</div>\n        "),
    category: 'Layout',
    content: {
      type: 'column_break'
    }
  });
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (function (domc) {
  var defaultType = domc.getType('default');
  var defaultModel = defaultType.model;
  var defaultView = defaultType.view;
  domc.addType('column_break', {
    isComponent: function isComponent(el) {
      if (el && el.classList && el.classList.contains('w-100')) {
        // also check if parent is `.row`
        return {
          type: 'column_break'
        };
      }
    },
    extend: 'default',
    model: {
      defaults: Object.assign({}, defaultModel.prototype.defaults, {
        'custom-name': 'Column Break',
        tagName: 'div',
        classes: ['w-100']
      })
    },
    extendView: 'default'
  });
});

/***/ }),

/***/ "./src/components/Container.js":
/*!*************************************!*\
  !*** ./src/components/Container.js ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ContainerBlock: () => (/* binding */ ContainerBlock),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var raw_loader_icons_window_maximize_solid_svg__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! raw-loader!../icons/window-maximize-solid.svg */ "../../node_modules/raw-loader/dist/cjs.js!./src/icons/window-maximize-solid.svg");

var ContainerBlock = function ContainerBlock(bm, label) {
  bm.add('container').set({
    label: "\n            ".concat(raw_loader_icons_window_maximize_solid_svg__WEBPACK_IMPORTED_MODULE_0__["default"], "\n            <div>").concat(label, "</div>\n        "),
    category: 'Layout',
    content: {
      type: 'container',
      classes: ['container']
    }
  });
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (function (domc) {
  var defaultType = domc.getType('default');
  var defaultModel = defaultType.model;
  var defaultView = defaultType.view;
  domc.addType('container', {
    isComponent: function isComponent(el) {
      if (el && el.classList && (el.classList.contains('container') || el.classList.contains('container-fluid'))) {
        return {
          type: 'container'
        };
      }
    },
    extend: 'default',
    model: {
      defaults: Object.assign({}, defaultModel.prototype.defaults, {
        'custom-name': 'Container',
        tagName: 'div',
        droppable: true,
        traits: [{
          type: 'class_select',
          options: [{
            value: 'container',
            name: 'Fixed'
          }, {
            value: 'container-fluid',
            name: 'Fluid'
          }],
          label: 'Width'
        }].concat(defaultModel.prototype.defaults.traits)
      })
    },
    extendView: 'default'
  });
});

/***/ }),

/***/ "./src/components/Default.js":
/*!***********************************!*\
  !*** ./src/components/Default.js ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _bootstrap_contexts__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../bootstrap-contexts */ "./src/bootstrap-contexts.js");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils */ "./src/utils.js");
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }


/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (function (domc) {
  var contexts_w_white = _bootstrap_contexts__WEBPACK_IMPORTED_MODULE_0__["default"].concat(['white']);
  var defaultType = domc.getType('default');
  var defaultModel = defaultType.model;
  var defaultView = defaultType.view;
  domc.addType('default', {
    extend: 'default',
    model: {
      defaults: Object.assign({}, defaultModel.prototype.defaults, {
        tagName: 'div',
        traits: [{
          type: 'class_select',
          options: [{
            value: '',
            name: 'Default'
          }].concat(_toConsumableArray(contexts_w_white.map(function (v) {
            return {
              value: 'text-' + v,
              name: (0,_utils__WEBPACK_IMPORTED_MODULE_1__.capitalize)(v)
            };
          }))),
          label: 'Text color'
        }, {
          type: 'class_select',
          options: [{
            value: '',
            name: 'Default'
          }].concat(_toConsumableArray(contexts_w_white.map(function (v) {
            return {
              value: 'bg-' + v,
              name: (0,_utils__WEBPACK_IMPORTED_MODULE_1__.capitalize)(v)
            };
          }))),
          label: 'Background color'
        }, {
          type: 'class_select',
          options: [{
            value: '',
            name: 'Default'
          }, {
            value: 'border',
            name: 'Full'
          }, {
            value: 'border-top-0',
            name: 'No top'
          }, {
            value: 'border-right-0',
            name: 'No right'
          }, {
            value: 'border-bottom-0',
            name: 'No bottom'
          }, {
            value: 'border-left-0',
            name: 'No left'
          }, {
            value: 'border-0',
            name: 'None'
          }],
          label: 'Border width'
        }, {
          type: 'class_select',
          options: [{
            value: '',
            name: 'Default'
          }].concat(_toConsumableArray(contexts_w_white.map(function (v) {
            return {
              value: 'border border-' + v,
              name: (0,_utils__WEBPACK_IMPORTED_MODULE_1__.capitalize)(v)
            };
          }))),
          label: 'Border color'
        }, {
          type: 'class_select',
          options: [{
            value: '',
            name: 'Default'
          }, {
            value: 'rounded',
            name: 'Rounded'
          }, {
            value: 'rounded-top',
            name: 'Rounded top'
          }, {
            value: 'rounded-right',
            name: 'Rounded right'
          }, {
            value: 'rounded-bottom',
            name: 'Rounded bottom'
          }, {
            value: 'rounded-left',
            name: 'Rounded left'
          }, {
            value: 'rounded-circle',
            name: 'Circle'
          }, {
            value: 'rounded-0',
            name: 'Square'
          }],
          label: 'Border radius'
        }, {
          type: 'text',
          label: 'ID',
          name: 'id',
          placeholder: 'my_element'
        }, {
          type: 'text',
          label: 'Title',
          name: 'title',
          placeholder: 'My Element'
        }] //.concat(defaultModel.prototype.defaults.traits)
      }),
      init: function init() {
        var classes = this.get('classes');
        classes.bind('add', this.classesChanged.bind(this));
        classes.bind('change', this.classesChanged.bind(this));
        classes.bind('remove', this.classesChanged.bind(this));
        this.init2();
      },
      /* BS comps use init2, not init */init2: function init2() {},
      /* method where we can check if we should changeType */classesChanged: function classesChanged() {},
      /* replace the comp with a copy of a different type */changeType: function changeType(new_type) {
        var coll = this.collection;
        var at = coll.indexOf(this);
        var button_opts = {
          type: new_type,
          style: this.getStyle(),
          attributes: this.getAttributes(),
          content: this.view.el.innerHTML
        };
        coll.remove(this);
        coll.add(button_opts, {
          at: at
        });
        this.destroy();
      }
    },
    extendView: 'default'
  });
});

/***/ }),

/***/ "./src/components/Dropdown.js":
/*!************************************!*\
  !*** ./src/components/Dropdown.js ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DropDownBlock: () => (/* binding */ DropDownBlock),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var raw_loader_icons_caret_square_down_regular_svg__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! raw-loader!../icons/caret-square-down-regular.svg */ "../../node_modules/raw-loader/dist/cjs.js!./src/icons/caret-square-down-regular.svg");
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
/*
known issues:
- BS dropdown JS isn't attached if you remove the existing toggle and add a new one
*/


var DropDownBlock = function DropDownBlock(bm, label) {
  bm.add('dropdown', {
    label: "\n            ".concat(raw_loader_icons_caret_square_down_regular_svg__WEBPACK_IMPORTED_MODULE_0__["default"], "\n            <div>").concat(label, "</div>\n        "),
    category: 'Components',
    content: {
      type: 'dropdown'
    }
  });
  /*bm.add('dropdown_menu', {
    label: c.labels.dropdown_menu,
    category: 'Components',
    attributes: {class:'fa fa-caret-down'},
    content: {
      type: 'dropdown_menu'
    }
  });
  bm.add('dropdown_item', {
    label: c.labels.dropdown_item,
    category: 'Components',
    attributes: {class:'fa fa-link'},
    content: {
      type: 'dropdown_item'
    }
  });*/
};

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (function (editor) {
  var comps = editor.DomComponents;
  var defaultType = comps.getType('default');
  var defaultModel = defaultType.model;
  var defaultView = defaultType.view;
  function hasEvent(comp) {
    var eca = comp._events['change:attributes'];
    if (!eca) return false;
    return eca.filter(function (e) {
      return e.callback.name === 'setupToggle';
    }).length !== 0;
  }
  comps.addType('dropdown', {
    isComponent: function isComponent(el) {
      if (el && el.classList && el.classList.contains('dropdown')) {
        return {
          type: 'dropdown'
        };
      }
    },
    extend: 'default',
    model: {
      defaults: _objectSpread(_objectSpread({}, defaultModel.prototype.defaults), {}, {
        'custom-name': 'Dropdown',
        classes: ['dropdown'],
        droppable: 'a, button, .dropdown-menu',
        traits: [{
          type: 'select',
          label: 'Initial state',
          name: 'initial_state',
          options: [{
            value: '',
            name: 'Closed'
          }, {
            value: 'show',
            name: 'Open'
          }]
        }].concat(defaultModel.prototype.defaults.traits)
      }),
      init2: function init2() {
        var toggle = {
          type: 'button',
          content: 'Click to toggle',
          classes: ['btn', 'dropdown-toggle']
        };
        var toggle_comp = this.append(toggle)[0];
        var menu = {
          type: 'dropdown_menu'
        };
        var menu_comp = this.append(menu)[0];
        this.setupToggle(null, null, {
          force: true
        });
        var comps = this.components();
        comps.bind('add', this.setupToggle.bind(this));
        comps.bind('remove', this.setupToggle.bind(this));
        var classes = this.get('classes');
        classes.bind('add', this.setupToggle.bind(this));
        classes.bind('change', this.setupToggle.bind(this));
        classes.bind('remove', this.setupToggle.bind(this));
      },
      setupToggle: function setupToggle(a, b) {
        var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
        var toggle = this.components().filter(function (c) {
          return c.getAttributes()["class"].split(' ').includes('dropdown-toggle');
        })[0];
        var menu = this.components().filter(function (c) {
          return c.getAttributes()["class"].split(' ').includes('dropdown-menu');
        })[0];
        if (options.force !== true && options.ignore === true) {
          return;
        }
        if (toggle && menu) {
          // setup event listeners if they aren't set
          if (!hasEvent(toggle)) {
            this.listenTo(toggle, 'change:attributes', this.setupToggle);
          }
          if (!hasEvent(menu)) {
            this.listenTo(menu, 'change:attributes', this.setupToggle);
          }

          // setup toggle
          var toggle_attrs = toggle.getAttributes();
          toggle_attrs['role'] = 'button';
          var menu_attrs = menu.getAttributes();
          if (!toggle_attrs.hasOwnProperty('data-toggle')) {
            toggle_attrs['data-toggle'] = 'dropdown';
          }
          if (!toggle_attrs.hasOwnProperty('aria-haspopup')) {
            toggle_attrs['aria-haspopup'] = true;
          }
          toggle.set('attributes', toggle_attrs, {
            ignore: true
          });

          // setup menu
          // toggle needs ID for aria-labelled on the menu, could alert here
          if (toggle_attrs.hasOwnProperty('id')) {
            menu_attrs['aria-labelledby'] = toggle_attrs.id;
          } else {
            delete menu_attrs['aria-labelledby'];
          }
          menu.set('attributes', menu_attrs, {
            ignore: true
          });
        }
      },
      updated: function updated(property, value) {
        if (value.hasOwnProperty('initial_state')) {
          var menu = this.components().filter(function (c) {
            return c.getAttributes()["class"].split(' ').includes('dropdown-menu');
          })[0];
          var attrs = menu.getAttributes();
          var classes = attrs["class"].split(' ');
          if (classes.includes('show')) {
            // Close the menu
            attrs['aria-expanded'] = false;
            menu.removeClass('show');
          } else {
            // Open the menu
            attrs['aria-expanded'] = true;
            menu.addClass('show');
          }
        }
      }
    },
    extendView: 'default'
  });

  // need aria-labelledby to equal dropdown-toggle id
  // need to insert dropdown-item class on links when added
  comps.addType('dropdown_menu', {
    isComponent: function isComponent(el) {
      if (el && el.classList && el.classList.contains('dropdown-menu')) {
        return {
          type: 'dropdown_menu'
        };
      }
    },
    extend: 'default',
    model: {
      defaults: Object.assign({}, defaultModel.prototype.defaults, {
        'custom-name': 'Dropdown Menu',
        classes: ['dropdown-menu'],
        draggable: '.dropdown',
        droppable: true
      }),
      init2: function init2() {
        var header = {
          type: 'header',
          tagName: 'h6',
          classes: ['dropdown-header'],
          content: 'Dropdown header'
        };
        var link = {
          type: 'link',
          classes: ['dropdown-item'],
          content: 'Dropdown item'
        };
        var divider = {
          type: 'default',
          classes: ['dropdown-divider']
        };
        this.append(header);
        this.append(link);
        this.append(divider);
        this.append(link);
      }
    },
    view: defaultView
  });
});

/***/ }),

/***/ "./src/components/FileInput.js":
/*!*************************************!*\
  !*** ./src/components/FileInput.js ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   FileInputBlock: () => (/* binding */ FileInputBlock),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils */ "./src/utils.js");
/* harmony import */ var raw_loader_icons_file_input_svg__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! raw-loader!../icons/file-input.svg */ "../../node_modules/raw-loader/dist/cjs.js!./src/icons/file-input.svg");
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }


var FileInputBlock = function FileInputBlock(bm, label) {
  bm.add('file-input', {
    label: "\n            ".concat(raw_loader_icons_file_input_svg__WEBPACK_IMPORTED_MODULE_1__["default"], "\n            <div>").concat(label, "</div>\n        "),
    category: 'Forms',
    content: "<input type=\"file\" name=\"file\" class=\"form-control-file\" id=\"exampleFormControlFile1\">"
  });
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (function (dc, traits) {
  var config = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  var defaultType = dc.getType('default');
  var defaultModel = defaultType.model;
  var defaultView = defaultType.view;
  var type = 'file-input';
  dc.addType(type, {
    isComponent: function isComponent(el) {
      if (el.tagName === 'INPUT' && (0,_utils__WEBPACK_IMPORTED_MODULE_0__.elHasClass)(el, 'form-control-file')) {
        return {
          type: type
        };
      }
    },
    extend: 'default',
    model: {
      defaults: _objectSpread(_objectSpread({}, defaultModel.prototype.defaults), {}, {
        'custom-name': config.labels.input,
        tagName: 'input',
        draggable: 'form .form-group',
        droppable: false,
        traits: [traits.name, traits.required, {
          type: 'checkbox',
          label: config.labels.trait_multiple,
          name: 'multiple'
        }]
      })
    },
    extendView: 'default'
  });
});

/***/ }),

/***/ "./src/components/Form.js":
/*!********************************!*\
  !*** ./src/components/Form.js ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   FormBlock: () => (/* binding */ FormBlock),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var raw_loader_icons_form_svg__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! raw-loader!../icons/form.svg */ "../../node_modules/raw-loader/dist/cjs.js!./src/icons/form.svg");

var FormBlock = function FormBlock(bm, label) {
  bm.add('form', {
    label: "\n      ".concat(raw_loader_icons_form_svg__WEBPACK_IMPORTED_MODULE_0__["default"], "\n      <div>").concat(label, "</div>"),
    category: 'Forms',
    content: {
      type: 'form'
    }
    //     `
    //     <form>
    //       <div class="form-group">
    //         <label>Name</label>
    //         <input name="name" placeholder="Type here your name" class="form-control"/>
    //       </div>
    //       <div class="form-group">
    //         <label>Email</label>
    //         <input name="email" type="email" placeholder="Type here your email" class="form-control"/>
    //       </div>
    //       <div class="form-check">
    //         <input name="sex" type="checkbox" class="form-check-input" value="M">
    //         <label class="form-check-label">M</label>
    //       </div>
    //       <div class="form-check">
    //         <input name="sex" type="checkbox" class="form-check-input" value="F">
    //         <label class="form-check-label">F</label>
    //       </div>
    //       <div class="form-group">
    //         <label>Message</label>
    //         <textarea name="message" class="form-control"></textarea>
    //       </div>
    //       <div class="form-group">
    //         <button type="submit" class="btn btn-primary">Send</button>
    //       </div>
    //     </form>
    //   `,
  });
};

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (function (dc, traits) {
  var config = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  var defaultType = dc.getType('default');
  var defaultModel = defaultType.model;
  var defaultView = defaultType.view;
  var actionTrait;

  // If the formPredefinedActions is set in the config you can add a dropdown menu to the actions trait
  if (config.formPredefinedActions && config.formPredefinedActions.length) {
    actionTrait = {
      type: 'select',
      label: config.labels.trait_action,
      name: 'action',
      options: []
    };
    config.formPredefinedActions.forEach(function (action) {
      actionTrait.options.push({
        value: action.value,
        name: action.name
      });
    });
  } else {
    actionTrait = {
      label: config.labels.trait_action,
      name: 'action'
    };
  }
  dc.addType('form', {
    isComponent: function isComponent(el) {
      if (el.tagName === 'FORM') {
        return {
          type: 'form'
        };
      }
    },
    extend: 'default',
    model: {
      defaults: {
        tagName: 'form',
        droppable: ':not(form)',
        draggable: ':not(form)',
        traits: [{
          type: 'select',
          label: config.labels.trait_enctype,
          name: 'enctype',
          options: [{
            value: 'application/x-www-form-urlencoded',
            name: 'application/x-www-form-urlencoded (default)'
          }, {
            value: 'multipart/form-data',
            name: 'multipart/form-data'
          }, {
            value: 'text/plain',
            name: 'text/plain'
          }]
        }, {
          type: 'select',
          label: config.labels.trait_method,
          name: 'method',
          options: [{
            value: 'post',
            name: 'POST'
          }, {
            value: 'get',
            name: 'GET'
          }]
        }, actionTrait]
      },
      init: function init() {
        this.listenTo(this, 'change:formState', this.updateFormState);
      },
      updateFormState: function updateFormState() {
        var state = this.get('formState');
        switch (state) {
          case 'success':
            this.showState('success');
            break;
          case 'error':
            this.showState('error');
            break;
          default:
            this.showState('normal');
        }
      },
      showState: function showState(state) {
        var st = state || 'normal';
        var failVis, successVis;
        if (st === 'success') {
          failVis = 'none';
          successVis = 'block';
        } else if (st === 'error') {
          failVis = 'block';
          successVis = 'none';
        } else {
          failVis = 'none';
          successVis = 'none';
        }
        var successModel = this.getStateModel('success');
        var failModel = this.getStateModel('error');
        var successStyle = successModel.getStyle();
        var failStyle = failModel.getStyle();
        successStyle.display = successVis;
        failStyle.display = failVis;
        successModel.setStyle(successStyle);
        failModel.setStyle(failStyle);
      },
      getStateModel: function getStateModel(state) {
        var st = state || 'success';
        var stateName = 'form-state-' + st;
        var stateModel;
        var comps = this.get('components');
        for (var i = 0; i < comps.length; i++) {
          var model = comps.models[i];
          if (model.get('form-state-type') === st) {
            stateModel = model;
            break;
          }
        }
        if (!stateModel) {
          var contentStr = formMsgSuccess;
          if (st === 'error') {
            contentStr = formMsgError;
          }
          stateModel = comps.add({
            'form-state-type': st,
            type: 'text',
            removable: false,
            copyable: false,
            draggable: false,
            attributes: {
              'data-form-state': st
            },
            content: contentStr
          });
        }
        return stateModel;
      }
    },
    extendView: 'default',
    view: {
      events: {
        submit: function submit(e) {
          e.preventDefault();
        }
      }
    }
  });
});

/***/ }),

/***/ "./src/components/Header.js":
/*!**********************************!*\
  !*** ./src/components/Header.js ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   HeaderBlock: () => (/* binding */ HeaderBlock),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var raw_loader_icons_heading_solid_svg__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! raw-loader!../icons/heading-solid.svg */ "../../node_modules/raw-loader/dist/cjs.js!./src/icons/heading-solid.svg");

var HeaderBlock = function HeaderBlock(bm, label) {
  bm.add('header', {
    label: "\n            ".concat(raw_loader_icons_heading_solid_svg__WEBPACK_IMPORTED_MODULE_0__["default"], "\n            <div>").concat(label, "</div>\n        "),
    category: 'Typography',
    content: {
      type: 'header',
      content: 'Bootstrap heading'
    }
  });
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (function (domc) {
  var textType = domc.getType('text');
  var textModel = textType.model;
  var textView = textType.view;
  domc.addType('header', {
    isComponent: function isComponent(el) {
      if (el && ['H1', 'H2', 'H3', 'H4', 'H5', 'H6'].includes(el.tagName)) {
        return {
          type: 'header'
        };
      }
    },
    extend: 'text',
    model: {
      defaults: Object.assign({}, textModel.prototype.defaults, {
        'custom-name': 'Header',
        tagName: 'h1',
        traits: [{
          type: 'select',
          options: [{
            value: 'h1',
            name: 'One (largest)'
          }, {
            value: 'h2',
            name: 'Two'
          }, {
            value: 'h3',
            name: 'Three'
          }, {
            value: 'h4',
            name: 'Four'
          }, {
            value: 'h5',
            name: 'Five'
          }, {
            value: 'h6',
            name: 'Six (smallest)'
          }],
          label: 'Size',
          name: 'tagName',
          changeProp: 1
        }, {
          type: 'class_select',
          options: [{
            value: '',
            name: 'None'
          }, {
            value: 'display-1',
            name: 'One (largest)'
          }, {
            value: 'display-2',
            name: 'Two '
          }, {
            value: 'display-3',
            name: 'Three '
          }, {
            value: 'display-4',
            name: 'Four (smallest)'
          }],
          label: 'Display Heading'
        }].concat(textModel.prototype.defaults.traits)
      })
    },
    extendView: 'text'
  });
});

/***/ }),

/***/ "./src/components/Image.js":
/*!*********************************!*\
  !*** ./src/components/Image.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ImageBlock: () => (/* binding */ ImageBlock),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var raw_loader_icons_image_solid_svg__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! raw-loader!../icons/image-solid.svg */ "../../node_modules/raw-loader/dist/cjs.js!./src/icons/image-solid.svg");

var ImageBlock = function ImageBlock(bm, label) {
  bm.add('bs-image', {
    label: "\n            ".concat(raw_loader_icons_image_solid_svg__WEBPACK_IMPORTED_MODULE_0__["default"], "\n            <div>").concat(label, "</div>\n        "),
    category: 'Media',
    content: {
      type: 'bs-image'
    }
  });
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (function (domComponent) {
  var img_src_default = 'https://dummyimage.com/800x500/999/222';
  var imageType = domComponent.getType('image');
  var model = imageType.model;
  var view = imageType.view;
  var type = 'bs-image';
  domComponent.addType(type, {
    isComponent: function isComponent(el) {
      if (el && el.tagName === 'IMG') {
        return {
          type: type
        };
      }
    },
    extend: 'image',
    model: {
      defaults: Object.assign({}, model.prototype.defaults, {
        'custom-name': 'Image',
        tagName: 'img',
        resizable: 1,
        attributes: {
          src: img_src_default
        },
        classes: ['img-fluid'],
        traits: [{
          type: 'text',
          label: 'Source (URL)',
          name: 'src'
        }, {
          type: 'text',
          label: 'Alternate text',
          name: 'alt'
        }].concat(model.prototype.defaults.traits)
      })
    },
    extendView: 'image'
  });
});

/***/ }),

/***/ "./src/components/Input.js":
/*!*********************************!*\
  !*** ./src/components/Input.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   InputBlock: () => (/* binding */ InputBlock),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var raw_loader_icons_input_svg__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! raw-loader!../icons/input.svg */ "../../node_modules/raw-loader/dist/cjs.js!./src/icons/input.svg");
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }

var InputBlock = function InputBlock(bm, label) {
  bm.add('input', {
    label: "\n      ".concat(raw_loader_icons_input_svg__WEBPACK_IMPORTED_MODULE_0__["default"], "\n      <div>").concat(label, "</div>"),
    category: 'Forms',
    content: '<input name="input1" class="form-control"/>'
  });
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (function (dc, traits) {
  var config = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  var defaultType = dc.getType('default');
  var defaultModel = defaultType.model;
  var defaultView = defaultType.view;
  dc.addType('input', {
    isComponent: function isComponent(el) {
      if (el.tagName === 'INPUT') {
        return {
          type: 'input'
        };
      }
    },
    extend: 'default',
    model: {
      defaults: _objectSpread(_objectSpread({}, defaultModel.prototype.defaults), {}, {
        'custom-name': config.labels.input,
        tagName: 'input',
        draggable: 'form, form *',
        droppable: false,
        traits: [traits.value, traits.name, traits.placeholder, {
          label: config.labels.trait_type,
          type: 'select',
          name: 'type',
          options: [{
            value: 'text',
            name: config.labels.type_text
          }, {
            value: 'email',
            name: config.labels.type_email
          }, {
            value: 'password',
            name: config.labels.type_password
          }, {
            value: 'number',
            name: config.labels.type_number
          }, {
            value: 'date',
            name: config.labels.type_date
          }, {
            value: 'hidden',
            name: config.labels.type_hidden
          }]
        }, traits.required]
      })
    },
    extendView: 'default'
  });
});

/***/ }),

/***/ "./src/components/InputGroup.js":
/*!**************************************!*\
  !*** ./src/components/InputGroup.js ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   InputGroupBlock: () => (/* binding */ InputGroupBlock),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var raw_loader_icons_form_group_svg__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! raw-loader!../icons/form-group.svg */ "../../node_modules/raw-loader/dist/cjs.js!./src/icons/form-group.svg");
/* harmony import */ var raw_loader_icons_input_group_svg__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! raw-loader!../icons/input-group.svg */ "../../node_modules/raw-loader/dist/cjs.js!./src/icons/input-group.svg");
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }


var InputGroupBlock = function InputGroupBlock(bm, label, c) {
  bm.add('form_group_input', {
    label: "\n      ".concat(raw_loader_icons_form_group_svg__WEBPACK_IMPORTED_MODULE_0__["default"], "\n      <div>").concat(label, "</div>"),
    category: 'Forms',
    content: "\n      <div class=\"form-group\">\n        <label>Name</label>\n        <input name=\"name\" placeholder=\"Type here your name\" class=\"form-control\"/>\n      </div>\n      "
  });
  bm.add('input_group', {
    label: "\n      ".concat(raw_loader_icons_input_group_svg__WEBPACK_IMPORTED_MODULE_1__["default"], "\n      <div>").concat(label, "</div>"),
    category: 'Forms',
    content: "\n      <div class=\"input-group\">\n        <div class=\"input-group-prepend\">\n          <span class=\"input-group-text\">$</span>\n        </div>\n        <input name=\"input1\" type=\"text\" class=\"form-control\" aria-label=\"Amount (to the nearest dollar)\">\n        <div class=\"input-group-append\">\n          <span class=\"input-group-text\">.00</span>\n        </div>\n      </div>\n      "
  });
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (function (dc, traits) {
  var config = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  var defaultType = dc.getType('default');
  var defaultModel = defaultType.model;
  var defaultView = defaultType.view;
  dc.addType('input_group', {
    isComponent: function isComponent(el) {
      if (el && el.classList && el.classList.contains('form_group_input')) {
        return {
          type: 'form_group_input'
        };
      }
    },
    extend: 'default',
    model: {
      defaults: _objectSpread(_objectSpread({}, defaultModel.prototype.defaults), {}, {
        'custom-name': config.labels.input_group,
        tagName: 'div',
        traits: []
      })
    },
    extendView: 'default'
  });
});

/***/ }),

/***/ "./src/components/JsfInput.js":
/*!************************************!*\
  !*** ./src/components/JsfInput.js ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   JsfInputBlock: () => (/* binding */ JsfInputBlock),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var raw_loader_icons_input_svg__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! raw-loader!../icons/input.svg */ "../../node_modules/raw-loader/dist/cjs.js!./src/icons/input.svg");
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }

var JsfInputBlock = function JsfInputBlock(bm, label) {
  bm.add('h:inputText', {
    label: "\n      ".concat(raw_loader_icons_input_svg__WEBPACK_IMPORTED_MODULE_0__["default"], "\n      <div>").concat(label, "</div>"),
    category: 'jsfForms',
    content: '<h:inputText data-gjs-type="jsfInputText" class="form-control my-class"></h:inputText>'
  });
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (function (dc, traits) {
  var config = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  var defaultType = dc.getType('input');
  var defaultModel = defaultType.model;
  dc.addType('jsfInputText', {
    isComponent: function isComponent(el) {
      console.log("### In jsfInputText.IsComponent: el.tagName: ");
      console.log(el);
      if (el.hasOwnProperty('tagName')) console.log('## ' + el.tagName);else console.log("## no tagName");
      console.log("## is h:inputtext: " + (el && el.hasOwnProperty('tagName') && el.tagName === 'H:INPUTTEXT'));
      // console.log(el.classList);

      if (el && el.hasOwnProperty('tagName') && el.tagName === 'H:INPUTTEXT') {
        console.log("### In jsfInputText.IsComponent: result is true ");
        return true; // {type: 'jsfInputText'};
      }

      console.log("### In jsfInputText.IsComponent: result is false ");
    },
    extend: 'input',
    model: {
      defaults: _objectSpread(_objectSpread({}, defaultModel.prototype.defaults), {}, {
        tagName: 'h:inputText',
        'custom-name': config.labels.jsfInputText,
        draggable: 'form, form *',
        droppable: false,
        traits: [traits.value, traits.name, traits.placeholder, traits.required, {
          label: config.labels.trait_value,
          type: 'text',
          name: 'type'
          // options: [
          //     {value: 'text', name: config.labels.type_text},
          //     {value: 'email', name: config.labels.type_email},
          //     {value: 'password', name: config.labels.type_password},
          //     {value: 'number', name: config.labels.type_number},
          //     {value: 'date', name: config.labels.type_date},
          //     {value: 'hidden', name: config.labels.type_hidden},
          // ]
        }]
      })
    },

    extendView: 'input',
    view: {
      tagName: 'input',
      attributes: {
        type: 'text'
      }
    }
  });
});

/***/ }),

/***/ "./src/components/Label.js":
/*!*********************************!*\
  !*** ./src/components/Label.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   LabelBlock: () => (/* binding */ LabelBlock),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var raw_loader_icons_label_svg__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! raw-loader!../icons/label.svg */ "../../node_modules/raw-loader/dist/cjs.js!./src/icons/label.svg");
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }

var LabelBlock = function LabelBlock(bm, label) {
  bm.add('label', {
    label: "\n      ".concat(raw_loader_icons_label_svg__WEBPACK_IMPORTED_MODULE_0__["default"], "\n      <div>").concat(label, "</div>"),
    category: 'Forms',
    content: '<label>Label</label>'
  });
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (function (dc, traits) {
  var config = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  var textType = dc.getType('text');
  var textModel = textType.model;
  var textView = textType.view;
  dc.addType('label', {
    isComponent: function isComponent(el) {
      if (el.tagName == 'LABEL') {
        return {
          type: 'label'
        };
      }
    },
    extend: 'text',
    model: {
      defaults: _objectSpread(_objectSpread({}, textModel.prototype.defaults), {}, {
        'custom-name': config.labels.label,
        tagName: 'label',
        traits: [traits["for"]]
      })
    },
    extendView: 'text'
  });
});

/***/ }),

/***/ "./src/components/Link.js":
/*!********************************!*\
  !*** ./src/components/Link.js ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   LinkBlock: () => (/* binding */ LinkBlock),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var raw_loader_icons_link_solid_svg__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! raw-loader!../icons/link-solid.svg */ "../../node_modules/raw-loader/dist/cjs.js!./src/icons/link-solid.svg");
/*
known issues:
- BS dropdown JS isn't attached if you remove the existing toggle and add a new one
*/


var LinkBlock = function LinkBlock(bm, label) {
  bm.add('link', {
    label: "\n            ".concat(raw_loader_icons_link_solid_svg__WEBPACK_IMPORTED_MODULE_0__["default"], "\n            <div>").concat(label, "</div>\n        "),
    category: 'Basic',
    content: {
      type: 'link',
      content: 'Link text'
    }
  });
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (function (editor) {
  var comps = editor.DomComponents;
  var textType = comps.getType('text');
  var textModel = textType.model;
  var linkType = comps.getType('link');
  var linkView = linkType.view;
  comps.addType('link', {
    isComponent: function isComponent(el) {
      if (el && el.tagName && el.tagName === 'A') {
        return {
          type: 'link'
        };
      }
    },
    extend: 'text',
    model: {
      defaults: Object.assign({}, textModel.prototype.defaults, {
        'custom-name': 'Link',
        tagName: 'a',
        droppable: true,
        editable: true,
        traits: [{
          type: 'text',
          label: 'Href',
          name: 'href',
          placeholder: 'https://www.grapesjs.com'
        }, {
          type: 'select',
          options: [{
            value: '',
            name: 'This window'
          }, {
            value: '_blank',
            name: 'New window'
          }],
          label: 'Target',
          name: 'target'
        }, {
          type: 'select',
          options: [{
            value: '',
            name: 'None'
          }, {
            value: 'button',
            name: 'Self'
          }, {
            value: 'collapse',
            name: 'Collapse'
          }, {
            value: 'dropdown',
            name: 'Dropdown'
          }],
          label: 'Toggles',
          name: 'data-toggle',
          changeProp: 1
        }].concat(textModel.prototype.defaults.traits)
      }),
      init2: function init2() {
        //textModel.prototype.init.call(this);
        this.listenTo(this, 'change:data-toggle', this.setupToggle);
        this.listenTo(this, 'change:attributes', this.setupToggle); // for when href changes
      },
      setupToggle: function setupToggle(a, b) {
        var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
        // TODO this should be in the dropdown comp and not the link comp
        if (options.ignore === true && options.force !== true) {
          return;
        }
        console.log('setup toggle');
        var attrs = this.getAttributes();
        var href = attrs.href;
        // old attributes are not removed from DOM even if deleted...
        delete attrs['data-toggle'];
        delete attrs['aria-expanded'];
        delete attrs['aria-controls'];
        delete attrs['aria-haspopup'];
        if (href && href.length > 0 && href.match(/^#/)) {
          console.log('link has href');
          // find the el where id == link href
          var els = this.em.get('Editor').DomComponents.getWrapper().find(href);
          if (els.length > 0) {
            console.log('referenced el found');
            var el = els[0]; // should only be one el with this ID
            var el_attrs = el.getAttributes();
            //delete el_attrs['aria-labelledby'];
            var el_classes = el_attrs["class"];
            if (el_classes) {
              console.log('el has classes');
              var el_classes_list = el_classes.split(' ');
              var includes = ['collapse', 'dropdown-menu'];
              var intersection = el_classes_list.filter(function (x) {
                return includes.includes(x);
              });
              if (intersection.length) {
                console.log('link data-toggle matches el class');
                switch (intersection[0]) {
                  case 'collapse':
                    attrs['data-toggle'] = 'collapse';
                    break;
                }
                attrs['aria-expanded'] = el_classes_list.includes('show');
                if (intersection[0] === 'collapse') {
                  attrs['aria-controls'] = href.substring(1);
                }
              }
            }
          }
        }
        this.set('attributes', attrs, {
          ignore: true
        });
      },
      classesChanged: function classesChanged(e) {
        console.log('classes changed');
        if (this.attributes.type === 'link') {
          if (this.attributes.classes.filter(function (klass) {
            return klass.id === 'btn';
          }).length > 0) {
            this.changeType('button');
          }
        }
      }
    },
    extendView: 'link'
  });
});

/***/ }),

/***/ "./src/components/MediaObject.js":
/*!***************************************!*\
  !*** ./src/components/MediaObject.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   MediaObjectBlock: () => (/* binding */ MediaObjectBlock),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var raw_loader_icons_columns_solid_svg__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! raw-loader!../icons/columns-solid.svg */ "../../node_modules/raw-loader/dist/cjs.js!./src/icons/columns-solid.svg");

var MediaObjectBlock = function MediaObjectBlock(bm, label) {
  bm.add('media_object').set({
    label: "\n            ".concat(raw_loader_icons_columns_solid_svg__WEBPACK_IMPORTED_MODULE_0__["default"], "\n            <div>").concat(label, "</div>\n        "),
    category: 'Layout',
    content: "<div class=\"media\">\n                 <img class=\"mr-3\" src=\"\">\n                 <div class=\"media-body\">\n                 <h5>Media heading</h5>\n                 <div>Cras sit amet nibh libero, in gravida nulla. Nulla vel metus scelerisque ante sollicitudin. Cras purus odio, vestibulum in vulputate at, tempus viverra turpis. Fusce condimentum nunc ac nisi vulputate fringilla. Donec lacinia congue felis in faucibus.</div>\n                 </div>\n                 </div>"
  });
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (function (domc) {
  var defaultType = domc.getType('default');
  var defaultModel = defaultType.model;
  var defaultView = defaultType.view;
  domc.addType('media_object', {
    isComponent: function isComponent(el) {
      if (el && el.classList && el.classList.contains('media')) {
        return {
          type: 'media'
        };
      }
    },
    extend: 'default',
    model: {
      defaults: Object.assign({}, defaultModel.prototype.defaults, {
        'custom-name': 'Media Object',
        tagName: 'div',
        classes: ['media']
      })
    },
    extendView: 'default'
  });
  domc.addType('media_body', {
    isComponent: function isComponent(el) {
      if (el && el.classList && el.classList.contains('media-body')) {
        return {
          type: 'media_body'
        };
      }
    },
    extend: 'default',
    model: {
      defaults: Object.assign({}, defaultModel.prototype.defaults, {
        'custom-name': 'Media Body',
        tagName: 'div',
        classes: ['media-body']
      })
    },
    extendView: 'default'
  });
});

/***/ }),

/***/ "./src/components/Paragraph.js":
/*!*************************************!*\
  !*** ./src/components/Paragraph.js ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ParagraphBlock: () => (/* binding */ ParagraphBlock),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var raw_loader_icons_paragraph_solid_svg__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! raw-loader!../icons/paragraph-solid.svg */ "../../node_modules/raw-loader/dist/cjs.js!./src/icons/paragraph-solid.svg");

var ParagraphBlock = function ParagraphBlock(bm, label) {
  bm.add('paragraph', {
    label: "\n            ".concat(raw_loader_icons_paragraph_solid_svg__WEBPACK_IMPORTED_MODULE_0__["default"], "\n            <div>").concat(label, "</div>\n        "),
    category: 'Typography',
    content: {
      type: 'paragraph',
      content: 'Vivamus sagittis lacus vel augue laoreet rutrum faucibus dolor auctor. Duis mollis, est non commodo luctus.'
    }
  });
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (function (domc) {
  var textType = domc.getType('text');
  var textModel = textType.model;
  var textView = textType.view;
  domc.addType('paragraph', {
    isComponent: function isComponent(el) {
      if (el && el.tagName && el.tagName === 'P') {
        return {
          type: 'paragraph'
        };
      }
    },
    extend: 'text',
    model: {
      defaults: Object.assign({}, textModel.prototype.defaults, {
        'custom-name': 'Paragraph',
        tagName: 'p',
        traits: [{
          type: 'class_select',
          options: [{
            value: '',
            name: 'No'
          }, {
            value: 'lead',
            name: 'Yes'
          }],
          label: 'Lead?'
        }].concat(textModel.prototype.defaults.traits)
      })
    },
    extendView: 'text'
  });
});

/***/ }),

/***/ "./src/components/Radio.js":
/*!*********************************!*\
  !*** ./src/components/Radio.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   RadioBlock: () => (/* binding */ RadioBlock),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var raw_loader_icons_dot_circle_regular_svg__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! raw-loader!../icons/dot-circle-regular.svg */ "../../node_modules/raw-loader/dist/cjs.js!./src/icons/dot-circle-regular.svg");
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }

var RadioBlock = function RadioBlock(bm, label) {
  bm.add('radio', {
    label: "\n            ".concat(raw_loader_icons_dot_circle_regular_svg__WEBPACK_IMPORTED_MODULE_0__["default"], "\n            <div>").concat(label, "</div>\n        "),
    category: 'Forms',
    content: "\n        <div class=\"form-check\">\n          <input class=\"form-check-input\" type=\"radio\" name=\"exampleRadios\" id=\"exampleRadios1\" value=\"option1\" checked>\n          <label class=\"form-check-label\" for=\"exampleRadios1\">\n            Default radio\n          </label>\n        </div>\n      "
  });
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (function (dc, traits) {
  var config = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  var checkType = dc.getType('checkbox');

  // RADIO
  dc.addType('radio', {
    isComponent: function isComponent(el) {
      if (el.tagName === 'INPUT' && el.type === 'radio') {
        return {
          type: 'radio'
        };
      }
    },
    extend: 'checkbox',
    model: {
      defaults: _objectSpread(_objectSpread({}, checkType.model.prototype.defaults), {}, {
        'custom-name': config.labels.radio,
        attributes: {
          type: 'radio'
        }
      })
    },
    extendView: 'checkbox'
  });
});

/***/ }),

/***/ "./src/components/Row.js":
/*!*******************************!*\
  !*** ./src/components/Row.js ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   RowBlock: () => (/* binding */ RowBlock),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var raw_loader_icons_window_maximize_solid_svg__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! raw-loader!../icons/window-maximize-solid.svg */ "../../node_modules/raw-loader/dist/cjs.js!./src/icons/window-maximize-solid.svg");

var RowBlock = function RowBlock(bm, label) {
  bm.add('row').set({
    label: "\n            ".concat(raw_loader_icons_window_maximize_solid_svg__WEBPACK_IMPORTED_MODULE_0__["default"], "\n            <div>").concat(label, "</div>\n        "),
    category: 'Layout',
    content: {
      type: 'row',
      classes: ['row']
    }
  });
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (function (domc) {
  var defaultType = domc.getType('default');
  var defaultModel = defaultType.model;
  var defaultView = defaultType.view;
  domc.addType('row', {
    isComponent: function isComponent(el) {
      if (el && el.classList && el.classList.contains('row')) {
        return {
          type: 'row'
        };
      }
    },
    extend: 'default',
    model: {
      defaults: Object.assign({}, defaultModel.prototype.defaults, {
        'custom-name': 'Row',
        tagName: 'div',
        draggable: '.container, .container-fluid',
        droppable: true,
        traits: [{
          type: 'class_select',
          options: [{
            value: '',
            name: 'Yes'
          }, {
            value: 'no-gutters',
            name: 'No'
          }],
          label: 'Gutters?'
        }].concat(defaultModel.prototype.defaults.traits)
      })
    },
    extendView: 'default'
  });
});

/***/ }),

/***/ "./src/components/Select.js":
/*!**********************************!*\
  !*** ./src/components/Select.js ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   SelectBlock: () => (/* binding */ SelectBlock),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var raw_loader_icons_select_input_svg__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! raw-loader!../icons/select-input.svg */ "../../node_modules/raw-loader/dist/cjs.js!./src/icons/select-input.svg");
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }

var SelectBlock = function SelectBlock(bm, label) {
  bm.add('select', {
    label: "\n      ".concat(raw_loader_icons_select_input_svg__WEBPACK_IMPORTED_MODULE_0__["default"], "\n      <div>").concat(label, "</div>"),
    category: 'Forms',
    content: "<select class=\"form-control\" name=\"select1\">\n        ".concat(label ? "<option value=\"\">".concat(label, "</option>") : '', "\n        <option value=\"1\">").concat(label, " 1</option>\n        </select>")
  });
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (function (editor, dc, traits) {
  var config = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
  var defaultType = dc.getType('default');
  var defaultModel = defaultType.model;
  var inputType = dc.getType('input');
  var inputModel = inputType.model;
  var preventDefaultClick = function preventDefaultClick() {
    return defaultType.view.extend({
      events: {
        'mousedown': 'handleClick'
      },
      handleClick: function handleClick(e) {
        e.preventDefault();
      }
    });
  };

  // SELECT
  dc.addType('select', {
    isComponent: function isComponent(el) {
      if (el.tagName === 'SELECT') {
        return {
          type: 'select'
        };
      }
    },
    extend: 'default',
    model: {
      defaults: _objectSpread(_objectSpread({}, inputModel.prototype.defaults), {}, {
        'custom-name': config.labels.select,
        tagName: 'select',
        traits: [traits.name, {
          label: config.labels.trait_options,
          type: 'select-options'
        }, traits.required]
      })
    },
    view: preventDefaultClick()
  });
  var traitManager = editor.TraitManager;
  traitManager.addType('select-options', {
    events: {
      'keyup': 'onChange'
    },
    onValueChange: function onValueChange() {
      var optionsStr = this.model.get('value').trim();
      var options = optionsStr.split('\n');
      var optComps = [];
      for (var i = 0; i < options.length; i++) {
        var optionStr = options[i];
        var option = optionStr.split(config.optionsStringSeparator);
        var opt = {
          tagName: 'option',
          attributes: {}
        };
        if (option[1]) {
          opt.content = option[1];
          opt.attributes.value = option[0];
        } else {
          opt.content = option[0];
          opt.attributes.value = option[0];
        }
        optComps.push(opt);
      }
      var comps = this.target.get('components');
      comps.reset(optComps);
      this.target.view.render();
    },
    getInputEl: function getInputEl() {
      if (!this.$input) {
        var target = this.target;
        var optionsStr = '';
        var options = target.get('components');
        for (var i = 0; i < options.length; i++) {
          var option = options.models[i];
          var optAttr = option.get('attributes');
          var optValue = optAttr.value || '';
          optionsStr += "".concat(optValue).concat(config.optionsStringSeparator).concat(option.get('content'), "\n");
        }
        this.$input = document.createElement('textarea');
        this.$input.value = optionsStr;
      }
      return this.$input;
    }
  });
});

/***/ }),

/***/ "./src/components/Text.js":
/*!********************************!*\
  !*** ./src/components/Text.js ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TextBlock: () => (/* binding */ TextBlock),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var raw_loader_icons_font_solid_svg__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! raw-loader!../icons/font-solid.svg */ "../../node_modules/raw-loader/dist/cjs.js!./src/icons/font-solid.svg");

var TextBlock = function TextBlock(bm, label) {
  bm.add('text', {
    label: "\n            ".concat(raw_loader_icons_font_solid_svg__WEBPACK_IMPORTED_MODULE_0__["default"], "\n            <div>").concat(label, "</div>\n        "),
    category: 'Typography',
    content: {
      type: 'text',
      content: 'Insert your text here'
    }
  });
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (function (domc) {
  var defaultType = domc.getType('default');
  var defaultModel = defaultType.model;
  var textType = domc.getType('text');
  var textView = textType.view;
  domc.addType('text', {
    /*isComponent(el) {
      if(el && el.dataset && el.dataset.bsText) {
        return {type: 'text'};
      }
    }*/
    extend: 'default',
    model: {
      defaults: Object.assign({}, defaultModel.prototype.defaults, {
        'custom-name': 'Text',
        tagName: 'div',
        droppable: true,
        editable: true
      })
    },
    extendView: 'text'
  });
});

/***/ }),

/***/ "./src/components/Textarea.js":
/*!************************************!*\
  !*** ./src/components/Textarea.js ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TextareaBlock: () => (/* binding */ TextareaBlock),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var raw_loader_icons_textarea_svg__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! raw-loader!../icons/textarea.svg */ "../../node_modules/raw-loader/dist/cjs.js!./src/icons/textarea.svg");
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }

var TextareaBlock = function TextareaBlock(bm, label) {
  bm.add('textarea', {
    label: "\n      ".concat(raw_loader_icons_textarea_svg__WEBPACK_IMPORTED_MODULE_0__["default"], "\n      <div>").concat(label, "</div>"),
    category: 'Forms',
    content: '<textarea name="textarea1" class="form-control"></textarea>'
  });
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (function (dc, traits) {
  var config = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  var defaultType = dc.getType('default');
  var defaultView = defaultType.view;
  var inputType = dc.getType('input');
  var inputModel = inputType.model;

  // TEXTAREA
  dc.addType('textarea', {
    isComponent: function isComponent(el) {
      if (el.tagName === 'TEXTAREA') {
        return {
          type: 'textarea'
        };
      }
    },
    extend: 'input',
    model: {
      defaults: _objectSpread(_objectSpread({}, inputModel.prototype.defaults), {}, {
        'custom-name': config.labels.textarea,
        tagName: 'textarea',
        traits: [traits.name, traits.placeholder, traits.required]
      })
    },
    extendView: 'default'
  });
});

/***/ }),

/***/ "./src/components/tabs/Tab.js":
/*!************************************!*\
  !*** ./src/components/tabs/Tab.js ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./constants */ "./src/components/tabs/constants.js");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils */ "./src/utils.js");
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }


/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (function (dc) {
  var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var defaultType = dc.getType('default');
  var defaultModel = defaultType.model;
  var defaultView = defaultType.view;
  var tabName = _constants__WEBPACK_IMPORTED_MODULE_0__["default"].tabName,
    navigationSelector = _constants__WEBPACK_IMPORTED_MODULE_0__["default"].navigationSelector;
  var classId = config.classTab;
  var type = tabName;
  dc.addType(type, {
    isComponent: function isComponent(el) {
      if ((0,_utils__WEBPACK_IMPORTED_MODULE_1__.elHasClass)(el, classId)) return {
        type: type
      };
    },
    extend: 'default',
    model: {
      defaults: _objectSpread(_objectSpread({}, defaultModel.prototype.defaults), {}, {
        name: 'Tab',
        tagName: 'li',
        copyable: true,
        draggable: navigationSelector
      }),
      init: function init() {
        this.get('classes').pluck('name').indexOf(classId) < 0 && this.addClass(classId);
      }
    },
    extendView: 'default',
    view: {
      init: function init() {
        var comps = this.model.components();
        // Add a basic template if it's not yet initialized
        if (!comps.length) {
          comps.add("\n              <a class=\"nav-link active\" id=\"tab-1\" data-toggle=\"tab\" href=\"#tab-pane-1\" role=\"tab\" aria-controls=\"tab\" aria-selected=\"true\">Tab</a>\n          ");
        }
      }
    }
  });
});

/***/ }),

/***/ "./src/components/tabs/TabPane.js":
/*!****************************************!*\
  !*** ./src/components/tabs/TabPane.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./constants */ "./src/components/tabs/constants.js");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils */ "./src/utils.js");
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }


/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (function (dc) {
  var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var defaultType = dc.getType('default');
  var defaultModel = defaultType.model;
  var defaultView = defaultType.view;
  var tabPaneName = _constants__WEBPACK_IMPORTED_MODULE_0__["default"].tabPaneName,
    tabPanesSelector = _constants__WEBPACK_IMPORTED_MODULE_0__["default"].tabPanesSelector;
  var classId = config.classTabPane;
  var type = tabPaneName;
  dc.addType(type, {
    isComponent: function isComponent(el) {
      if ((0,_utils__WEBPACK_IMPORTED_MODULE_1__.elHasClass)(el, classId)) return {
        type: type
      };
    },
    extend: 'default',
    model: {
      defaults: _objectSpread(_objectSpread({}, defaultModel.prototype.defaults), {}, {
        name: 'Tab Pane',
        copyable: true,
        draggable: tabPanesSelector,
        traits: ['id', {
          type: 'class_select',
          options: [{
            value: 'fade',
            name: 'Fade'
          }, {
            value: '',
            name: 'None'
          }],
          label: 'Animation'
        }, {
          type: 'class_select',
          options: [{
            value: '',
            name: 'Inactive'
          }, {
            value: 'active',
            name: 'Active'
          }],
          label: 'Is Active'
        }]
      }),
      init: function init() {
        this.get('classes').pluck('name').indexOf(classId) < 0 && this.addClass(classId);
      }
    },
    extendView: 'default'
  });
});

/***/ }),

/***/ "./src/components/tabs/TabsNavigation.js":
/*!***********************************************!*\
  !*** ./src/components/tabs/TabsNavigation.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TabsBlock: () => (/* binding */ TabsBlock),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./constants */ "./src/components/tabs/constants.js");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils */ "./src/utils.js");
/* harmony import */ var raw_loader_icons_ellipsis_h_solid_svg__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! raw-loader!../../icons/ellipsis-h-solid.svg */ "../../node_modules/raw-loader/dist/cjs.js!./src/icons/ellipsis-h-solid.svg");
/* harmony import */ var raw_loader_icons_circle_solid_svg__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! raw-loader!../../icons/circle-solid.svg */ "../../node_modules/raw-loader/dist/cjs.js!./src/icons/circle-solid.svg");
/* harmony import */ var raw_loader_icons_window_maximize_solid_svg__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! raw-loader!../../icons/window-maximize-solid.svg */ "../../node_modules/raw-loader/dist/cjs.js!./src/icons/window-maximize-solid.svg");
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }





var TabsBlock = function TabsBlock(bm, c) {
  bm.add('tabs', {
    label: "\n            ".concat(raw_loader_icons_ellipsis_h_solid_svg__WEBPACK_IMPORTED_MODULE_2__["default"], "\n            <div>").concat(c.labels.tabs, "</div>\n        "),
    category: 'Components',
    content: "\n            <ul class=\"nav nav-tabs\" role=\"tablist\">\n              <li class=\"nav-item\">\n                <a class=\"nav-link active\" id=\"home-tab\" data-toggle=\"tab\" href=\"#home\" role=\"tab\" aria-controls=\"home\" aria-selected=\"true\">Tab 1</a>\n              </li>\n              <li class=\"nav-item\">\n                <a class=\"nav-link\" id=\"profile-tab\" data-toggle=\"tab\" href=\"#profile\" role=\"tab\" aria-controls=\"profile\" aria-selected=\"false\">Tab 2</a>\n              </li>\n              <li class=\"nav-item\">\n                <a class=\"nav-link\" id=\"contact-tab\" data-toggle=\"tab\" href=\"#contact\" role=\"tab\" aria-controls=\"contact\" aria-selected=\"false\">Tab 3</a>\n              </li>\n            </ul>\n            <div class=\"tab-content\">\n              <div class=\"tab-pane fade show active\" id=\"home\" role=\"tabpanel\" aria-labelledby=\"home-tab\"></div>\n              <div class=\"tab-pane fade\" id=\"profile\" role=\"tabpanel\" aria-labelledby=\"profile-tab\"></div>\n              <div class=\"tab-pane fade\" id=\"contact\" role=\"tabpanel\" aria-labelledby=\"contact-tab\"></div>\n            </div>\n        "
  });
  bm.add('tabs-tab', {
    label: "\n            ".concat(raw_loader_icons_circle_solid_svg__WEBPACK_IMPORTED_MODULE_3__["default"], "\n            <div>").concat(c.labels.tab, "</div>\n        "),
    category: 'Components',
    content: {
      type: 'tabs-tab'
    }
  });
  bm.add('tabs-tab-pane', {
    label: "\n            ".concat(raw_loader_icons_window_maximize_solid_svg__WEBPACK_IMPORTED_MODULE_4__["default"], "\n            <div>").concat(c.labels.tabPane, "</div>\n        "),
    category: 'Components',
    content: {
      type: 'tabs-tab-pane'
    }
  });
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (function (dc) {
  var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var defaultType = dc.getType('default');
  var defaultModel = defaultType.model;
  var defaultView = defaultType.view;
  var navigationName = _constants__WEBPACK_IMPORTED_MODULE_0__["default"].navigationName,
    tabSelector = _constants__WEBPACK_IMPORTED_MODULE_0__["default"].tabSelector;
  var classId = config.classNavigation;
  var type = navigationName;
  dc.addType(type, {
    isComponent: function isComponent(el) {
      if ((0,_utils__WEBPACK_IMPORTED_MODULE_1__.elHasClass)(el, classId)) return {
        type: type
      };
    },
    extend: 'default',
    model: {
      defaults: _objectSpread(_objectSpread({}, defaultModel.prototype.defaults), {}, {
        name: 'Tabs Navigation',
        copyable: 0,
        draggable: true,
        droppable: tabSelector,
        traits: [{
          type: 'class_select',
          options: [{
            value: 'nav-tabs',
            name: 'Tabs'
          }, {
            value: 'nav-pills',
            name: 'Pills'
          }],
          label: 'Type'
        }, {
          type: 'class_select',
          options: [{
            value: '',
            name: 'Left'
          }, {
            value: 'nav-fill',
            name: 'Fill'
          }, {
            value: 'nav-justified',
            name: 'Justify'
          }],
          label: 'Layout'
        }]
      }),
      init: function init() {
        this.get('classes').pluck('name').indexOf(classId) < 0 && this.addClass(classId);
      }
    },
    extendView: 'default',
    view: {
      init: function init() {
        var props = ['type', 'layout'];
        var reactTo = props.map(function (prop) {
          return "change:".concat(prop);
        }).join(' ');
        this.listenTo(this.model, reactTo, this.render);
        var comps = this.model.components();

        // Add a basic template if it's not yet initialized
        if (!comps.length) {
          comps.add("\n                        <ul class=\"nav nav-tabs\" role=\"tablist\">\n                          <li class=\"nav-item\">\n                            <a class=\"nav-link active\" id=\"home-tab\" data-toggle=\"tab\" href=\"#home\" role=\"tab\" aria-controls=\"home\" aria-selected=\"true\">Tab 1</a>\n                          </li>\n                          <li class=\"nav-item\">\n                            <a class=\"nav-link\" id=\"profile-tab\" data-toggle=\"tab\" href=\"#profile\" role=\"tab\" aria-controls=\"profile\" aria-selected=\"false\">Tab 2</a>\n                          </li>\n                          <li class=\"nav-item\">\n                            <a class=\"nav-link\" id=\"contact-tab\" data-toggle=\"tab\" href=\"#contact\" role=\"tab\" aria-controls=\"contact\" aria-selected=\"false\">Tab 3</a>\n                          </li>\n                        </ul>\n                    ");
        }
      }
    }
  });
});

/***/ }),

/***/ "./src/components/tabs/TabsPanes.js":
/*!******************************************!*\
  !*** ./src/components/tabs/TabsPanes.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./constants */ "./src/components/tabs/constants.js");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils */ "./src/utils.js");
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }


/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (function (dc) {
  var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var defaultType = dc.getType('default');
  var defaultModel = defaultType.model;
  var defaultView = defaultType.view;
  var tabPanesName = _constants__WEBPACK_IMPORTED_MODULE_0__["default"].tabPanesName,
    tabPaneSelector = _constants__WEBPACK_IMPORTED_MODULE_0__["default"].tabPaneSelector;
  var classId = config.classTabPanes;
  var type = tabPanesName;
  dc.addType(type, {
    isComponent: function isComponent(el) {
      if ((0,_utils__WEBPACK_IMPORTED_MODULE_1__.elHasClass)(el, classId)) return {
        type: type
      };
    },
    extend: 'default',
    model: {
      defaults: _objectSpread(_objectSpread({}, defaultModel.prototype.defaults), {}, {
        name: 'Tabs Panes',
        copyable: 0,
        draggable: true,
        droppable: tabPaneSelector
      }),
      init: function init() {
        this.get('classes').pluck('name').indexOf(classId) < 0 && this.addClass(classId);
      }
    },
    extendView: 'default',
    view: {
      init: function init() {
        var comps = this.model.components();

        // Add a basic template if it's not yet initialized
        if (!comps.length) {
          comps.add("\n                        <div class=\"tab-content\" id=\"myTabContent\">\n                          <div class=\"tab-pane fade show active\" id=\"home\" role=\"tabpanel\" aria-labelledby=\"home-tab\">Tab pane 1</div>\n                          <div class=\"tab-pane fade\" id=\"profile\" role=\"tabpanel\" aria-labelledby=\"profile-tab\">Tab pane 2</div>\n                          <div class=\"tab-pane fade\" id=\"contact\" role=\"tabpanel\" aria-labelledby=\"contact-tab\">Tab pane 3</div>\n                        </div>\n                    ");
        }
      }
    }
  });
});

/***/ }),

/***/ "./src/components/tabs/constants.js":
/*!******************************************!*\
  !*** ./src/components/tabs/constants.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
var prefix = 'tabs-';
var containerName = "".concat(prefix, "container");
var navigationName = "".concat(prefix, "navigation");
var tabPanesName = "".concat(prefix, "panes");
var tabName = "".concat(prefix, "tab");
var tabPaneName = "".concat(prefix, "tab-pane");
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
  navigationName: navigationName,
  tabPanesName: tabPanesName,
  tabName: tabName,
  tabPaneName: tabPaneName,
  // Selectors
  navigationSelector: "[data-gjs-type=\"".concat(navigationName, "\"]"),
  tabPanesSelector: "[data-gjs-type=\"".concat(tabPanesName, "\"]"),
  tabSelector: "[data-gjs-type=\"".concat(tabName, "\"]"),
  tabPaneSelector: "[data-gjs-type=\"".concat(tabPaneName, "\"]"),
  // IDs
  containerId: "data-".concat(containerName),
  navigationId: "data-".concat(navigationName),
  tabPanesId: "data-".concat(tabPanesName),
  tabId: "data-".concat(tabName),
  tabPaneId: "data-".concat(tabPaneName)
});

/***/ }),

/***/ "./src/components/video/Embed.js":
/*!***************************************!*\
  !*** ./src/components/video/Embed.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (function (domComponent) {
  var src_default = 'https://download.blender.org/peach/bigbuckbunny_movies/BigBuckBunny_320x180.mp4';
  var defaultType = domComponent.getType('default');
  var model = defaultType.model;
  var view = defaultType.view;
  var type = 'bs-video';
  domComponent.addType(type, {
    isComponent: function isComponent(el) {
      if (el && el.className === 'embed-responsive') {
        return {
          type: type
        };
      }
    },
    extend: 'default',
    model: {
      defaults: Object.assign({}, model.prototype.defaults, {
        'custom-name': 'Embed',
        tagName: 'div',
        resizable: false,
        droppable: false,
        classes: ['embed-responsive', 'embed-responsive-16by9'],
        traits: [{
          type: 'class_select',
          options: [{
            value: 'embed-responsive-21by9',
            name: '21:9'
          }, {
            value: 'embed-responsive-16by9',
            name: '16:9'
          }, {
            value: 'embed-responsive-4by3',
            name: '4:3'
          }, {
            value: 'embed-responsive-1by1',
            name: '1:1'
          }],
          label: 'Aspect Ratio'
        }].concat(model.prototype.defaults.traits)
      })
    },
    extendView: 'default',
    view: {
      init: function init() {
        var props = ['Aspect Ratio'];
        var reactTo = props.map(function (prop) {
          return "change:".concat(prop);
        }).join(' ');
        this.listenTo(this.model, reactTo, this.render);
        var comps = this.model.components();
        // Add a basic template if it's not yet initialized
        if (!comps.length) {
          comps.add("<iframe class=\"embed-responsive-item\" src=\"".concat(src_default, "\"></iframe>"));
        }
      }
    }
  });
});

/***/ }),

/***/ "./src/components/video/Video.js":
/*!***************************************!*\
  !*** ./src/components/video/Video.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   VideoBlock: () => (/* binding */ VideoBlock),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var raw_loader_icons_youtube_brands_svg__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! raw-loader!../../icons/youtube-brands.svg */ "../../node_modules/raw-loader/dist/cjs.js!./src/icons/youtube-brands.svg");

var VideoBlock = function VideoBlock(bm, label) {
  bm.add('bs-video', {
    label: "\n            ".concat(raw_loader_icons_youtube_brands_svg__WEBPACK_IMPORTED_MODULE_0__["default"], "\n            <div>").concat(label, "</div>\n        "),
    category: 'Media',
    content: {
      type: 'bs-video'
    }
  });
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (function (domComponent) {
  var videoType = domComponent.getType('video');
  var model = videoType.model;
  var view = videoType.view;
  var type = 'bs-embed-responsive';
  domComponent.addType(type, {
    isComponent: function isComponent(el) {
      if (el && el.className === 'embed-responsive-item') {
        var result = {
          provider: 'so',
          type: type
        };
        var isYtProv = /youtube\.com\/embed/.test(el.src);
        var isYtncProv = /youtube-nocookie\.com\/embed/.test(el.src);
        var isViProv = /player\.vimeo\.com\/video/.test(el.src);
        var isExtProv = isYtProv || isYtncProv || isViProv;
        if (el.tagName == 'VIDEO' || el.tagName == 'IFRAME' && isExtProv) {
          if (el.src) result.src = el.src;
          if (isExtProv) {
            if (isYtProv) result.provider = 'yt';else if (isYtncProv) result.provider = 'ytnc';else if (isViProv) result.provider = 'vi';
          }
        }
        return result;
      }
    },
    extend: 'video',
    model: {
      defaults: Object.assign({}, model.prototype.defaults, {
        'custom-name': 'Video',
        resizable: false,
        droppable: false,
        draggable: false,
        copyable: false,
        provider: 'so',
        classes: ['embed-responsive-item']
      })
    },
    extendView: 'video'
  });
});

/***/ }),

/***/ "./src/devices.js":
/*!************************!*\
  !*** ./src/devices.js ***!
  \************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (function (editor) {
  var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var c = config;
  var deviceManager = editor.DeviceManager;
  if (c.gridDevices) {
    deviceManager.add('Extra Small', '575px');
    deviceManager.add('Small', '767px');
    deviceManager.add('Medium', '991px');
    deviceManager.add('Large', '1199px');
    deviceManager.add('Extra Large');
    if (c.gridDevicesPanel) {
      var panels = editor.Panels;
      var commands = editor.Commands;
      var panelDevices = panels.addPanel({
        id: 'devices-buttons'
      });
      var deviceBtns = panelDevices.get('buttons');
      deviceBtns.add([{
        id: 'deviceXl',
        command: 'set-device-xl',
        className: 'fa fa-desktop',
        text: 'XL',
        attributes: {
          'title': 'Extra Large'
        },
        active: 1
      }, {
        id: 'deviceLg',
        command: 'set-device-lg',
        className: 'fa fa-desktop',
        attributes: {
          'title': 'Large'
        }
      }, {
        id: 'deviceMd',
        command: 'set-device-md',
        className: 'fa fa-tablet',
        attributes: {
          'title': 'Medium'
        }
      }, {
        id: 'deviceSm',
        command: 'set-device-sm',
        className: 'fa fa-mobile',
        attributes: {
          'title': 'Small'
        }
      }, {
        id: 'deviceXs',
        command: 'set-device-xs',
        className: 'fa fa-mobile',
        attributes: {
          'title': 'Extra Small'
        }
      }]);
      commands.add('set-device-xs', {
        run: function run(editor) {
          editor.setDevice('Extra Small');
        }
      });
      commands.add('set-device-sm', {
        run: function run(editor) {
          editor.setDevice('Small');
        }
      });
      commands.add('set-device-md', {
        run: function run(editor) {
          editor.setDevice('Medium');
        }
      });
      commands.add('set-device-lg', {
        run: function run(editor) {
          editor.setDevice('Large');
        }
      });
      commands.add('set-device-xl', {
        run: function run(editor) {
          editor.setDevice('Extra Large');
        }
      });
    }
  }
});

/***/ }),

/***/ "./src/traits.js":
/*!***********************!*\
  !*** ./src/traits.js ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (function (editor) {
  var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var tm = editor.TraitManager;

  // Select trait that maps a class list to the select options.
  // The default select option is set if the input has a class, and class list is modified when select value changes.
  tm.addType('class_select', {
    events: {
      'change': 'onChange' // trigger parent onChange method on input change
    },
    createInput: function createInput(_ref) {
      var trait = _ref.trait;
      var md = this.model;
      var opts = md.get('options') || [];
      var input = document.createElement('select');
      var target_view_el = this.target.view.el;
      var _loop = function _loop() {
        var option = document.createElement('option');
        var value = opts[i].value;
        if (value === '') {
          value = 'GJS_NO_CLASS';
        } // 'GJS_NO_CLASS' represents no class--empty string does not trigger value change
        option.text = opts[i].name;
        option.value = value;

        // Convert the Token List to an Array
        var css = Array.from(target_view_el.classList);
        var value_a = value.split(' ');
        var intersection = css.filter(function (x) {
          return value_a.includes(x);
        });
        if (intersection.length === value_a.length) {
          option.setAttribute('selected', 'selected');
        }
        input.append(option);
      };
      for (var i = 0; i < opts.length; i++) {
        _loop();
      }
      return input;
    },
    onUpdate: function onUpdate(_ref2) {
      var elInput = _ref2.elInput,
        component = _ref2.component;
      var classes = component.getClasses();
      var opts = this.model.get('options') || [];
      for (var i = 0; i < opts.length; i++) {
        var value = opts[i].value;
        if (value && classes.includes(value)) {
          elInput.value = value;
          return;
        }
      }
      elInput.value = "GJS_NO_CLASS";
    },
    onEvent: function onEvent(_ref3) {
      var elInput = _ref3.elInput,
        component = _ref3.component,
        event = _ref3.event;
      var classes = this.model.get('options').map(function (opt) {
        return opt.value;
      });
      for (var i = 0; i < classes.length; i++) {
        if (classes[i].length > 0) {
          var classes_i_a = classes[i].split(' ');
          for (var j = 0; j < classes_i_a.length; j++) {
            if (classes_i_a[j].length > 0) {
              component.removeClass(classes_i_a[j]);
            }
          }
        }
      }
      var value = this.model.get('value');

      // This piece of code removes the empty attribute name from attributes list
      var elAttributes = component.attributes.attributes;
      delete elAttributes[""];
      if (value.length > 0 && value !== 'GJS_NO_CLASS') {
        var value_a = value.split(' ');
        for (var _i = 0; _i < value_a.length; _i++) {
          component.addClass(value_a[_i]);
        }
      }
      component.em.trigger('component:toggled');
    }
  });
  var textTrait = tm.getType('text');
  tm.addType('content', {
    events: {
      'keyup': 'onChange'
    },
    onValueChange: function onValueChange() {
      var md = this.model;
      var target = md.target;
      target.set('content', md.get('value'));
    },
    getInputEl: function getInputEl() {
      if (!this.inputEl) {
        this.inputEl = textTrait.prototype.getInputEl.bind(this)();
        this.inputEl.value = this.target.get('content');
      }
      return this.inputEl;
    }
  });
  tm.addType('content', {
    events: {
      'keyup': 'onChange'
    },
    onValueChange: function onValueChange() {
      var md = this.model;
      var target = md.target;
      target.set('content', md.get('value'));
    },
    getInputEl: function getInputEl() {
      if (!this.inputEl) {
        this.inputEl = textTrait.prototype.getInputEl.bind(this)();
        this.inputEl.value = this.target.get('content');
      }
      return this.inputEl;
    }
  });
});

/***/ }),

/***/ "./src/utils.js":
/*!**********************!*\
  !*** ./src/utils.js ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   capitalize: () => (/* binding */ capitalize),
/* harmony export */   elHasClass: () => (/* binding */ elHasClass)
/* harmony export */ });
var elHasClass = function elHasClass(el, toFind) {
  var cls = el.className;
  cls = cls && cls.toString();
  if (cls && cls.split(' ').indexOf(toFind) >= 0) return 1;
};
var capitalize = function capitalize(phrase) {
  return phrase.toLowerCase().split(' ').map(function (word) {
    return word.charAt(0).toUpperCase() + word.slice(1);
  }).join(' ');
};


/***/ }),

/***/ "../../node_modules/raw-loader/dist/cjs.js!./src/icons/button.svg":
/*!************************************************************************!*\
  !*** ../../node_modules/raw-loader/dist/cjs.js!./src/icons/button.svg ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<svg class=\"gjs-block-svg\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">\r\n    <path class=\"gjs-block-svg-path\" d=\"M22,9 C22,8.4 21.5,8 20.75,8 L3.25,8 C2.5,8 2,8.4 2,9 L2,15 C2,15.6 2.5,16 3.25,16 L20.75,16 C21.5,16 22,15.6 22,15 L22,9 Z M21,15 L3,15 L3,9 L21,9 L21,15 Z\" fill-rule=\"nonzero\"></path>\r\n    <rect class=\"gjs-block-svg-path\" x=\"4\" y=\"11.5\" width=\"16\" height=\"1\"></rect>\r\n</svg>\r\n");

/***/ }),

/***/ "../../node_modules/raw-loader/dist/cjs.js!./src/icons/caret-square-down-regular.svg":
/*!*******************************************************************************************!*\
  !*** ../../node_modules/raw-loader/dist/cjs.js!./src/icons/caret-square-down-regular.svg ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<svg aria-hidden=\"true\" width=\"24\" height=\"50\" focusable=\"false\" data-prefix=\"far\" data-icon=\"caret-square-down\" class=\"svg-inline--fa fa-caret-square-down fa-w-14\" role=\"img\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 448 512\"><path fill=\"currentColor\" d=\"M125.1 208h197.8c10.7 0 16.1 13 8.5 20.5l-98.9 98.3c-4.7 4.7-12.2 4.7-16.9 0l-98.9-98.3c-7.7-7.5-2.3-20.5 8.4-20.5zM448 80v352c0 26.5-21.5 48-48 48H48c-26.5 0-48-21.5-48-48V80c0-26.5 21.5-48 48-48h352c26.5 0 48 21.5 48 48zm-48 346V86c0-3.3-2.7-6-6-6H54c-3.3 0-6 2.7-6 6v340c0 3.3 2.7 6 6 6h340c3.3 0 6-2.7 6-6z\"></path></svg>\r\n");

/***/ }),

/***/ "../../node_modules/raw-loader/dist/cjs.js!./src/icons/certificate-solid.svg":
/*!***********************************************************************************!*\
  !*** ../../node_modules/raw-loader/dist/cjs.js!./src/icons/certificate-solid.svg ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<svg aria-hidden=\"true\" width=\"24\" height=\"50\" focusable=\"false\" data-prefix=\"fas\" data-icon=\"certificate\" class=\"svg-inline--fa fa-certificate fa-w-16\" role=\"img\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\"><path fill=\"currentColor\" d=\"M458.622 255.92l45.985-45.005c13.708-12.977 7.316-36.039-10.664-40.339l-62.65-15.99 17.661-62.015c4.991-17.838-11.829-34.663-29.661-29.671l-61.994 17.667-15.984-62.671C337.085.197 313.765-6.276 300.99 7.228L256 53.57 211.011 7.229c-12.63-13.351-36.047-7.234-40.325 10.668l-15.984 62.671-61.995-17.667C74.87 57.907 58.056 74.738 63.046 92.572l17.661 62.015-62.65 15.99C.069 174.878-6.31 197.944 7.392 210.915l45.985 45.005-45.985 45.004c-13.708 12.977-7.316 36.039 10.664 40.339l62.65 15.99-17.661 62.015c-4.991 17.838 11.829 34.663 29.661 29.671l61.994-17.667 15.984 62.671c4.439 18.575 27.696 24.018 40.325 10.668L256 458.61l44.989 46.001c12.5 13.488 35.987 7.486 40.325-10.668l15.984-62.671 61.994 17.667c17.836 4.994 34.651-11.837 29.661-29.671l-17.661-62.015 62.65-15.99c17.987-4.302 24.366-27.367 10.664-40.339l-45.984-45.004z\"></path></svg>\r\n");

/***/ }),

/***/ "../../node_modules/raw-loader/dist/cjs.js!./src/icons/check-square-solid.svg":
/*!************************************************************************************!*\
  !*** ../../node_modules/raw-loader/dist/cjs.js!./src/icons/check-square-solid.svg ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<svg aria-hidden=\"true\" width=\"24\" height=\"50\" focusable=\"false\" data-prefix=\"fas\" data-icon=\"check-square\" class=\"svg-inline--fa fa-check-square fa-w-14\" role=\"img\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 448 512\"><path fill=\"currentColor\" d=\"M400 480H48c-26.51 0-48-21.49-48-48V80c0-26.51 21.49-48 48-48h352c26.51 0 48 21.49 48 48v352c0 26.51-21.49 48-48 48zm-204.686-98.059l184-184c6.248-6.248 6.248-16.379 0-22.627l-22.627-22.627c-6.248-6.248-16.379-6.249-22.628 0L184 302.745l-70.059-70.059c-6.248-6.248-16.379-6.248-22.628 0l-22.627 22.627c-6.248 6.248-6.248 16.379 0 22.627l104 104c6.249 6.25 16.379 6.25 22.628.001z\"></path></svg>\r\n");

/***/ }),

/***/ "../../node_modules/raw-loader/dist/cjs.js!./src/icons/circle-solid.svg":
/*!******************************************************************************!*\
  !*** ../../node_modules/raw-loader/dist/cjs.js!./src/icons/circle-solid.svg ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<svg aria-hidden=\"true\" width=\"24\" height=\"50\" focusable=\"false\" data-prefix=\"fas\" data-icon=\"circle\" class=\"svg-inline--fa fa-circle fa-w-16\" role=\"img\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\"><path fill=\"currentColor\" d=\"M256 8C119 8 8 119 8 256s111 248 248 248 248-111 248-248S393 8 256 8z\"></path></svg>\r\n");

/***/ }),

/***/ "../../node_modules/raw-loader/dist/cjs.js!./src/icons/columns-solid.svg":
/*!*******************************************************************************!*\
  !*** ../../node_modules/raw-loader/dist/cjs.js!./src/icons/columns-solid.svg ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<svg aria-hidden=\"true\" width=\"24\" height=\"50\" focusable=\"false\" data-prefix=\"fas\" data-icon=\"columns\" class=\"svg-inline--fa fa-columns fa-w-16\" role=\"img\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\"><path fill=\"currentColor\" d=\"M464 32H48C21.49 32 0 53.49 0 80v352c0 26.51 21.49 48 48 48h416c26.51 0 48-21.49 48-48V80c0-26.51-21.49-48-48-48zM224 416H64V160h160v256zm224 0H288V160h160v256z\"></path></svg>\r\n");

/***/ }),

/***/ "../../node_modules/raw-loader/dist/cjs.js!./src/icons/compress-solid.svg":
/*!********************************************************************************!*\
  !*** ../../node_modules/raw-loader/dist/cjs.js!./src/icons/compress-solid.svg ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<svg aria-hidden=\"true\" width=\"24\" height=\"50\" focusable=\"false\" data-prefix=\"fas\" data-icon=\"compress\" class=\"svg-inline--fa fa-compress fa-w-14\" role=\"img\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 448 512\"><path fill=\"currentColor\" d=\"M436 192H312c-13.3 0-24-10.7-24-24V44c0-6.6 5.4-12 12-12h40c6.6 0 12 5.4 12 12v84h84c6.6 0 12 5.4 12 12v40c0 6.6-5.4 12-12 12zm-276-24V44c0-6.6-5.4-12-12-12h-40c-6.6 0-12 5.4-12 12v84H12c-6.6 0-12 5.4-12 12v40c0 6.6 5.4 12 12 12h124c13.3 0 24-10.7 24-24zm0 300V344c0-13.3-10.7-24-24-24H12c-6.6 0-12 5.4-12 12v40c0 6.6 5.4 12 12 12h84v84c0 6.6 5.4 12 12 12h40c6.6 0 12-5.4 12-12zm192 0v-84h84c6.6 0 12-5.4 12-12v-40c0-6.6-5.4-12-12-12H312c-13.3 0-24 10.7-24 24v124c0 6.6 5.4 12 12 12h40c6.6 0 12-5.4 12-12z\"></path></svg>\r\n");

/***/ }),

/***/ "../../node_modules/raw-loader/dist/cjs.js!./src/icons/credit-card-solid.svg":
/*!***********************************************************************************!*\
  !*** ../../node_modules/raw-loader/dist/cjs.js!./src/icons/credit-card-solid.svg ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<svg aria-hidden=\"true\" width=\"24\" height=\"50\" focusable=\"false\" data-prefix=\"fas\" data-icon=\"credit-card\" class=\"svg-inline--fa fa-credit-card fa-w-18\" role=\"img\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 576 512\"><path fill=\"currentColor\" d=\"M0 432c0 26.5 21.5 48 48 48h480c26.5 0 48-21.5 48-48V256H0v176zm192-68c0-6.6 5.4-12 12-12h136c6.6 0 12 5.4 12 12v40c0 6.6-5.4 12-12 12H204c-6.6 0-12-5.4-12-12v-40zm-128 0c0-6.6 5.4-12 12-12h72c6.6 0 12 5.4 12 12v40c0 6.6-5.4 12-12 12H76c-6.6 0-12-5.4-12-12v-40zM576 80v48H0V80c0-26.5 21.5-48 48-48h480c26.5 0 48 21.5 48 48z\"></path></svg>\r\n");

/***/ }),

/***/ "../../node_modules/raw-loader/dist/cjs.js!./src/icons/dot-circle-regular.svg":
/*!************************************************************************************!*\
  !*** ../../node_modules/raw-loader/dist/cjs.js!./src/icons/dot-circle-regular.svg ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<svg aria-hidden=\"true\" width=\"24\" height=\"50\" focusable=\"false\" data-prefix=\"far\" data-icon=\"dot-circle\" class=\"svg-inline--fa fa-dot-circle fa-w-16\" role=\"img\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\"><path fill=\"currentColor\" d=\"M256 56c110.532 0 200 89.451 200 200 0 110.532-89.451 200-200 200-110.532 0-200-89.451-200-200 0-110.532 89.451-200 200-200m0-48C119.033 8 8 119.033 8 256s111.033 248 248 248 248-111.033 248-248S392.967 8 256 8zm0 168c-44.183 0-80 35.817-80 80s35.817 80 80 80 80-35.817 80-80-35.817-80-80-80z\"></path></svg>\r\n");

/***/ }),

/***/ "../../node_modules/raw-loader/dist/cjs.js!./src/icons/ellipsis-h-solid.svg":
/*!**********************************************************************************!*\
  !*** ../../node_modules/raw-loader/dist/cjs.js!./src/icons/ellipsis-h-solid.svg ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<svg aria-hidden=\"true\" width=\"24\" height=\"50\" focusable=\"false\" data-prefix=\"fas\" data-icon=\"ellipsis-h\" class=\"svg-inline--fa fa-ellipsis-h fa-w-16\" role=\"img\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\"><path fill=\"currentColor\" d=\"M328 256c0 39.8-32.2 72-72 72s-72-32.2-72-72 32.2-72 72-72 72 32.2 72 72zm104-72c-39.8 0-72 32.2-72 72s32.2 72 72 72 72-32.2 72-72-32.2-72-72-72zm-352 0c-39.8 0-72 32.2-72 72s32.2 72 72 72 72-32.2 72-72-32.2-72-72-72z\"></path></svg>\r\n");

/***/ }),

/***/ "../../node_modules/raw-loader/dist/cjs.js!./src/icons/equals-solid.svg":
/*!******************************************************************************!*\
  !*** ../../node_modules/raw-loader/dist/cjs.js!./src/icons/equals-solid.svg ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<svg aria-hidden=\"true\" width=\"24\" height=\"50\" focusable=\"false\" data-prefix=\"fas\" data-icon=\"equals\" class=\"svg-inline--fa fa-equals fa-w-14\" role=\"img\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 448 512\"><path fill=\"currentColor\" d=\"M416 304H32c-17.67 0-32 14.33-32 32v32c0 17.67 14.33 32 32 32h384c17.67 0 32-14.33 32-32v-32c0-17.67-14.33-32-32-32zm0-192H32c-17.67 0-32 14.33-32 32v32c0 17.67 14.33 32 32 32h384c17.67 0 32-14.33 32-32v-32c0-17.67-14.33-32-32-32z\"></path></svg>\r\n");

/***/ }),

/***/ "../../node_modules/raw-loader/dist/cjs.js!./src/icons/exclamation-triangle-solid.svg":
/*!********************************************************************************************!*\
  !*** ../../node_modules/raw-loader/dist/cjs.js!./src/icons/exclamation-triangle-solid.svg ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<svg aria-hidden=\"true\" width=\"24\" height=\"50\" focusable=\"false\" data-prefix=\"fas\" data-icon=\"exclamation-triangle\" class=\"svg-inline--fa fa-exclamation-triangle fa-w-18\" role=\"img\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 576 512\"><path fill=\"currentColor\" d=\"M569.517 440.013C587.975 472.007 564.806 512 527.94 512H48.054c-36.937 0-59.999-40.055-41.577-71.987L246.423 23.985c18.467-32.009 64.72-31.951 83.154 0l239.94 416.028zM288 354c-25.405 0-46 20.595-46 46s20.595 46 46 46 46-20.595 46-46-20.595-46-46-46zm-43.673-165.346l7.418 136c.347 6.364 5.609 11.346 11.982 11.346h48.546c6.373 0 11.635-4.982 11.982-11.346l7.418-136c.375-6.874-5.098-12.654-11.982-12.654h-63.383c-6.884 0-12.356 5.78-11.981 12.654z\"></path></svg>\r\n");

/***/ }),

/***/ "../../node_modules/raw-loader/dist/cjs.js!./src/icons/file-input.svg":
/*!****************************************************************************!*\
  !*** ../../node_modules/raw-loader/dist/cjs.js!./src/icons/file-input.svg ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<svg class=\"gjs-block-svg\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">\r\n    <path class=\"gjs-block-svg-path\" d=\"M22,9 C22,8.4 21.5,8 20.75,8 L3.25,8 C2.5,8 2,8.4 2,9 L2,15 C2,15.6 2.5,16 3.25,16 L20.75,16 C21.5,16 22,15.6 22,15 L22,9 Z M21,15 L3,15 L3,9 L21,9 L21,15 Z\"></path>\r\n    <polygon class=\"gjs-block-svg-path\" points=\"4 10 5 10 5 14 4 14\"></polygon>\r\n</svg>\r\n");

/***/ }),

/***/ "../../node_modules/raw-loader/dist/cjs.js!./src/icons/font-solid.svg":
/*!****************************************************************************!*\
  !*** ../../node_modules/raw-loader/dist/cjs.js!./src/icons/font-solid.svg ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<svg aria-hidden=\"true\" width=\"24\" height=\"50\" focusable=\"false\" data-prefix=\"fas\" data-icon=\"font\" class=\"svg-inline--fa fa-font fa-w-14\" role=\"img\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 448 512\"><path fill=\"currentColor\" d=\"M432 416h-23.41L277.88 53.69A32 32 0 0 0 247.58 32h-47.16a32 32 0 0 0-30.3 21.69L39.41 416H16a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h128a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16h-19.58l23.3-64h152.56l23.3 64H304a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h128a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16zM176.85 272L224 142.51 271.15 272z\"></path></svg>\r\n");

/***/ }),

/***/ "../../node_modules/raw-loader/dist/cjs.js!./src/icons/form-group.svg":
/*!****************************************************************************!*\
  !*** ../../node_modules/raw-loader/dist/cjs.js!./src/icons/form-group.svg ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<svg class=\"gjs-block-svg\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">\r\n    <path class=\"gjs-block-svg-path\" d=\"M22,9 C22,8.4 21.5,8 20.75,8 L3.25,8 C2.5,8 2,8.4 2,9 L2,15 C2,15.6 2.5,16 3.25,16 L20.75,16 C21.5,16 22,15.6 22,15 L22,9 Z M21,15 L3,15 L3,9 L21,9 L21,15 Z\"></path>\r\n    <polygon class=\"gjs-block-svg-path\" points=\"4 10 5 10 5 14 4 14\"></polygon>\r\n</svg>\r\n");

/***/ }),

/***/ "../../node_modules/raw-loader/dist/cjs.js!./src/icons/form.svg":
/*!**********************************************************************!*\
  !*** ../../node_modules/raw-loader/dist/cjs.js!./src/icons/form.svg ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<svg class=\"gjs-block-svg\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">\r\n    <path class=\"gjs-block-svg-path\" d=\"M22,5.5 C22,5.2 21.5,5 20.75,5 L3.25,5 C2.5,5 2,5.2 2,5.5 L2,8.5 C2,8.8 2.5,9 3.25,9 L20.75,9 C21.5,9 22,8.8 22,8.5 L22,5.5 Z M21,8 L3,8 L3,6 L21,6 L21,8 Z\" fill-rule=\"nonzero\"></path>\r\n    <path class=\"gjs-block-svg-path\" d=\"M22,10.5 C22,10.2 21.5,10 20.75,10 L3.25,10 C2.5,10 2,10.2 2,10.5 L2,13.5 C2,13.8 2.5,14 3.25,14 L20.75,14 C21.5,14 22,13.8 22,13.5 L22,10.5 Z M21,13 L3,13 L3,11 L21,11 L21,13 Z\" fill-rule=\"nonzero\"></path>\r\n    <rect class=\"gjs-block-svg-path\" x=\"2\" y=\"15\" width=\"10\" height=\"3\" rx=\"0.5\"></rect>\r\n</svg>\r\n");

/***/ }),

/***/ "../../node_modules/raw-loader/dist/cjs.js!./src/icons/heading-solid.svg":
/*!*******************************************************************************!*\
  !*** ../../node_modules/raw-loader/dist/cjs.js!./src/icons/heading-solid.svg ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<svg aria-hidden=\"true\" width=\"24\" height=\"50\" focusable=\"false\" data-prefix=\"fas\" data-icon=\"heading\" class=\"svg-inline--fa fa-heading fa-w-16\" role=\"img\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\"><path fill=\"currentColor\" d=\"M448 96v320h32a16 16 0 0 1 16 16v32a16 16 0 0 1-16 16H320a16 16 0 0 1-16-16v-32a16 16 0 0 1 16-16h32V288H160v128h32a16 16 0 0 1 16 16v32a16 16 0 0 1-16 16H32a16 16 0 0 1-16-16v-32a16 16 0 0 1 16-16h32V96H32a16 16 0 0 1-16-16V48a16 16 0 0 1 16-16h160a16 16 0 0 1 16 16v32a16 16 0 0 1-16 16h-32v128h192V96h-32a16 16 0 0 1-16-16V48a16 16 0 0 1 16-16h160a16 16 0 0 1 16 16v32a16 16 0 0 1-16 16z\"></path></svg>\r\n");

/***/ }),

/***/ "../../node_modules/raw-loader/dist/cjs.js!./src/icons/image-solid.svg":
/*!*****************************************************************************!*\
  !*** ../../node_modules/raw-loader/dist/cjs.js!./src/icons/image-solid.svg ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<svg aria-hidden=\"true\" width=\"24\" height=\"50\" focusable=\"false\" data-prefix=\"fas\" data-icon=\"image\" class=\"svg-inline--fa fa-image fa-w-16\" role=\"img\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\"><path fill=\"currentColor\" d=\"M464 448H48c-26.51 0-48-21.49-48-48V112c0-26.51 21.49-48 48-48h416c26.51 0 48 21.49 48 48v288c0 26.51-21.49 48-48 48zM112 120c-30.928 0-56 25.072-56 56s25.072 56 56 56 56-25.072 56-56-25.072-56-56-56zM64 384h384V272l-87.515-87.515c-4.686-4.686-12.284-4.686-16.971 0L208 320l-55.515-55.515c-4.686-4.686-12.284-4.686-16.971 0L64 336v48z\"></path></svg>\r\n");

/***/ }),

/***/ "../../node_modules/raw-loader/dist/cjs.js!./src/icons/input-group.svg":
/*!*****************************************************************************!*\
  !*** ../../node_modules/raw-loader/dist/cjs.js!./src/icons/input-group.svg ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<svg class=\"gjs-block-svg\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">\r\n    <path class=\"gjs-block-svg-path\" d=\"M22,9 C22,8.4 21.5,8 20.75,8 L3.25,8 C2.5,8 2,8.4 2,9 L2,15 C2,15.6 2.5,16 3.25,16 L20.75,16 C21.5,16 22,15.6 22,15 L22,9 Z M21,15 L3,15 L3,9 L21,9 L21,15 Z\"></path>\r\n    <polygon class=\"gjs-block-svg-path\" points=\"4 10 5 10 5 14 4 14\"></polygon>\r\n</svg>\r\n");

/***/ }),

/***/ "../../node_modules/raw-loader/dist/cjs.js!./src/icons/input.svg":
/*!***********************************************************************!*\
  !*** ../../node_modules/raw-loader/dist/cjs.js!./src/icons/input.svg ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<svg class=\"gjs-block-svg\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">\r\n    <path class=\"gjs-block-svg-path\" d=\"M22,9 C22,8.4 21.5,8 20.75,8 L3.25,8 C2.5,8 2,8.4 2,9 L2,15 C2,15.6 2.5,16 3.25,16 L20.75,16 C21.5,16 22,15.6 22,15 L22,9 Z M21,15 L3,15 L3,9 L21,9 L21,15 Z\"></path>\r\n    <polygon class=\"gjs-block-svg-path\" points=\"4 10 5 10 5 14 4 14\"></polygon>\r\n</svg>\r\n");

/***/ }),

/***/ "../../node_modules/raw-loader/dist/cjs.js!./src/icons/label.svg":
/*!***********************************************************************!*\
  !*** ../../node_modules/raw-loader/dist/cjs.js!./src/icons/label.svg ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<svg class=\"gjs-block-svg\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">\r\n    <path class=\"gjs-block-svg-path\" d=\"M22,11.875 C22,11.35 21.5,11 20.75,11 L3.25,11 C2.5,11 2,11.35 2,11.875 L2,17.125 C2,17.65 2.5,18 3.25,18 L20.75,18 C21.5,18 22,17.65 22,17.125 L22,11.875 Z M21,17 L3,17 L3,12 L21,12 L21,17 Z\" fill-rule=\"nonzero\"></path>\r\n    <rect class=\"gjs-block-svg-path\" x=\"2\" y=\"5\" width=\"14\" height=\"5\" rx=\"0.5\"></rect>\r\n    <polygon class=\"gjs-block-svg-path\" fill-rule=\"nonzero\" points=\"4 13 5 13 5 16 4 16\"></polygon>\r\n</svg>\r\n");

/***/ }),

/***/ "../../node_modules/raw-loader/dist/cjs.js!./src/icons/link-solid.svg":
/*!****************************************************************************!*\
  !*** ../../node_modules/raw-loader/dist/cjs.js!./src/icons/link-solid.svg ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<svg aria-hidden=\"true\" width=\"24\" height=\"50\" focusable=\"false\" data-prefix=\"fas\" data-icon=\"link\" class=\"svg-inline--fa fa-link fa-w-16\" role=\"img\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\"><path fill=\"currentColor\" d=\"M326.612 185.391c59.747 59.809 58.927 155.698.36 214.59-.11.12-.24.25-.36.37l-67.2 67.2c-59.27 59.27-155.699 59.262-214.96 0-59.27-59.26-59.27-155.7 0-214.96l37.106-37.106c9.84-9.84 26.786-3.3 27.294 10.606.648 17.722 3.826 35.527 9.69 52.721 1.986 5.822.567 12.262-3.783 16.612l-13.087 13.087c-28.026 28.026-28.905 73.66-1.155 101.96 28.024 28.579 74.086 28.749 102.325.51l67.2-67.19c28.191-28.191 28.073-73.757 0-101.83-3.701-3.694-7.429-6.564-10.341-8.569a16.037 16.037 0 0 1-6.947-12.606c-.396-10.567 3.348-21.456 11.698-29.806l21.054-21.055c5.521-5.521 14.182-6.199 20.584-1.731a152.482 152.482 0 0 1 20.522 17.197zM467.547 44.449c-59.261-59.262-155.69-59.27-214.96 0l-67.2 67.2c-.12.12-.25.25-.36.37-58.566 58.892-59.387 154.781.36 214.59a152.454 152.454 0 0 0 20.521 17.196c6.402 4.468 15.064 3.789 20.584-1.731l21.054-21.055c8.35-8.35 12.094-19.239 11.698-29.806a16.037 16.037 0 0 0-6.947-12.606c-2.912-2.005-6.64-4.875-10.341-8.569-28.073-28.073-28.191-73.639 0-101.83l67.2-67.19c28.239-28.239 74.3-28.069 102.325.51 27.75 28.3 26.872 73.934-1.155 101.96l-13.087 13.087c-4.35 4.35-5.769 10.79-3.783 16.612 5.864 17.194 9.042 34.999 9.69 52.721.509 13.906 17.454 20.446 27.294 10.606l37.106-37.106c59.271-59.259 59.271-155.699.001-214.959z\"></path></svg>\r\n");

/***/ }),

/***/ "../../node_modules/raw-loader/dist/cjs.js!./src/icons/paragraph-solid.svg":
/*!*********************************************************************************!*\
  !*** ../../node_modules/raw-loader/dist/cjs.js!./src/icons/paragraph-solid.svg ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<svg aria-hidden=\"true\" width=\"24\" height=\"50\" focusable=\"false\" data-prefix=\"fas\" data-icon=\"paragraph\" class=\"svg-inline--fa fa-paragraph fa-w-14\" role=\"img\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 448 512\"><path fill=\"currentColor\" d=\"M448 48v32a16 16 0 0 1-16 16h-48v368a16 16 0 0 1-16 16h-32a16 16 0 0 1-16-16V96h-32v368a16 16 0 0 1-16 16h-32a16 16 0 0 1-16-16V352h-32a160 160 0 0 1 0-320h240a16 16 0 0 1 16 16z\"></path></svg>\r\n");

/***/ }),

/***/ "../../node_modules/raw-loader/dist/cjs.js!./src/icons/select-input.svg":
/*!******************************************************************************!*\
  !*** ../../node_modules/raw-loader/dist/cjs.js!./src/icons/select-input.svg ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<svg class=\"gjs-block-svg\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">\r\n    <path class=\"gjs-block-svg-path\" d=\"M22,9 C22,8.4 21.5,8 20.75,8 L3.25,8 C2.5,8 2,8.4 2,9 L2,15 C2,15.6 2.5,16 3.25,16 L20.75,16 C21.5,16 22,15.6 22,15 L22,9 Z M21,15 L3,15 L3,9 L21,9 L21,15 Z\" fill-rule=\"nonzero\"></path>\r\n    <polygon class=\"gjs-block-svg-path\" transform=\"translate(18.500000, 12.000000) scale(1, -1) translate(-18.500000, -12.000000) \" points=\"18.5 11 20 13 17 13\"></polygon>\r\n    <rect class=\"gjs-block-svg-path\" x=\"4\" y=\"11.5\" width=\"11\" height=\"1\"></rect>\r\n</svg>\r\n");

/***/ }),

/***/ "../../node_modules/raw-loader/dist/cjs.js!./src/icons/textarea.svg":
/*!**************************************************************************!*\
  !*** ../../node_modules/raw-loader/dist/cjs.js!./src/icons/textarea.svg ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<svg class=\"gjs-block-svg\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">\r\n    <path class=\"gjs-block-svg-path\" d=\"M22,7.5 C22,6.6 21.5,6 20.75,6 L3.25,6 C2.5,6 2,6.6 2,7.5 L2,16.5 C2,17.4 2.5,18 3.25,18 L20.75,18 C21.5,18 22,17.4 22,16.5 L22,7.5 Z M21,17 L3,17 L3,7 L21,7 L21,17 Z\"></path>\r\n    <polygon class=\"gjs-block-svg-path\" points=\"4 8 5 8 5 12 4 12\"></polygon>\r\n    <polygon class=\"gjs-block-svg-path\" points=\"19 7 20 7 20 17 19 17\"></polygon>\r\n    <polygon class=\"gjs-block-svg-path\" points=\"20 8 21 8 21 9 20 9\"></polygon>\r\n    <polygon class=\"gjs-block-svg-path\" points=\"20 15 21 15 21 16 20 16\"></polygon>\r\n</svg>\r\n");

/***/ }),

/***/ "../../node_modules/raw-loader/dist/cjs.js!./src/icons/window-maximize-solid.svg":
/*!***************************************************************************************!*\
  !*** ../../node_modules/raw-loader/dist/cjs.js!./src/icons/window-maximize-solid.svg ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<svg aria-hidden=\"true\" width=\"24\" height=\"50\" focusable=\"false\" data-prefix=\"fas\" data-icon=\"window-maximize\" class=\"svg-inline--fa fa-window-maximize fa-w-16\" role=\"img\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\"><path fill=\"currentColor\" d=\"M464 32H48C21.5 32 0 53.5 0 80v352c0 26.5 21.5 48 48 48h416c26.5 0 48-21.5 48-48V80c0-26.5-21.5-48-48-48zm-16 160H64v-84c0-6.6 5.4-12 12-12h360c6.6 0 12 5.4 12 12v84z\"></path></svg>\r\n");

/***/ }),

/***/ "../../node_modules/raw-loader/dist/cjs.js!./src/icons/youtube-brands.svg":
/*!********************************************************************************!*\
  !*** ../../node_modules/raw-loader/dist/cjs.js!./src/icons/youtube-brands.svg ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<svg aria-hidden=\"true\" width=\"24\" height=\"50\" focusable=\"false\" data-prefix=\"fab\" data-icon=\"youtube\" class=\"svg-inline--fa fa-youtube fa-w-18\" role=\"img\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 576 512\"><path fill=\"currentColor\" d=\"M549.655 124.083c-6.281-23.65-24.787-42.276-48.284-48.597C458.781 64 288 64 288 64S117.22 64 74.629 75.486c-23.497 6.322-42.003 24.947-48.284 48.597-11.412 42.867-11.412 132.305-11.412 132.305s0 89.438 11.412 132.305c6.281 23.65 24.787 41.5 48.284 47.821C117.22 448 288 448 288 448s170.78 0 213.371-11.486c23.497-6.321 42.003-24.171 48.284-47.821 11.412-42.867 11.412-132.305 11.412-132.305s0-89.438-11.412-132.305zm-317.51 213.508V175.185l142.739 81.205-142.739 81.201z\"></path></svg>\r\n");

/***/ }),

/***/ "grapesjs":
/*!***************************!*\
  !*** external "grapesjs" ***!
  \***************************/
/***/ ((module) => {

module.exports = grapesjs;

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be isolated against other modules in the chunk.
(() => {
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var grapesjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! grapesjs */ "grapesjs");
/* harmony import */ var grapesjs__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(grapesjs__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _commands__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./commands */ "./src/commands.js");
/* harmony import */ var _traits__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./traits */ "./src/traits.js");
/* harmony import */ var _components__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./components */ "./src/components.js");
/* harmony import */ var _devices__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./devices */ "./src/devices.js");
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }





var loadCss = function loadCss(editor) {
  editor.Config.canvasCss += "\n    /* Layout */\n\n    .gjs-dashed .container, .gjs-dashed .container-fluid,\n    .gjs-dashed .row,\n    .gjs-dashed .col, .gjs-dashed [class^=\"col-\"] {\n      min-height: 1.5rem !important;\n    }\n    .gjs-dashed .w-100 {\n      min-height: .25rem !important;\n      background-color: rgba(0,0,0,0.1);\n    }\n    .gjs-dashed img {\n      min-width: 25px;\n      min-height: 25px;\n      background-color: rgba(0,0,0,0.5);\n    }\n\n    /* Components */\n\n    .gjs-dashed .btn-group,\n    .gjs-dashed .btn-toolbar {\n      padding-right: 1.5rem !important;\n      min-height: 1.5rem !important;\n    }\n    .gjs-dashed .card,\n    .gjs-dashed .card-group, .gjs-dashed .card-deck, .gjs-dashed .card-columns {\n      min-height: 1.5rem !important;\n    }\n    .gjs-dashed .collapse {\n      display: block !important;\n      min-height: 1.5rem !important;\n    }\n    .gjs-dashed .dropdown {\n      display: block !important;\n      min-height: 1.5rem !important;\n    }\n    .gjs-dashed .dropdown-menu {\n      min-height: 1.5rem !important;\n      display: block !important;\n    }\n  ";
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (grapesjs__WEBPACK_IMPORTED_MODULE_0___default().plugins.add('grapesjs-blocks-bootstrap5', function (editor) {
  var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  window.editor = editor;
  var opts_blocks = opts.blocks || {};
  var opts_labels = opts.labels || {};
  var opts_categories = opts.blockCategories || {};
  delete opts['blocks'];
  delete opts['labels'];
  delete opts['blockCategories'];
  var default_blocks = {
    "default": true,
    text: true,
    link: true,
    image: true,
    // LAYOUT
    container: true,
    row: true,
    column: true,
    column_break: true,
    media_object: true,
    // COMPONENTS
    alert: true,
    tabs: true,
    badge: true,
    button: true,
    button_group: true,
    button_toolbar: true,
    card: true,
    card_container: true,
    collapse: true,
    dropdown: true,
    video: true,
    // TYPOGRAPHY
    header: true,
    paragraph: true,
    // BASIC
    list: true,
    // FORMS
    form: true,
    input: true,
    form_group_input: true,
    input_group: true,
    textarea: true,
    select: true,
    label: true,
    checkbox: true,
    radio: true,
    jsfInputText: true
  };
  var default_labels = {
    // LAYOUT
    container: 'Container',
    row: 'Row',
    column: 'Column',
    column_break: 'Column Break',
    media_object: 'Media Object',
    // COMPONENTS
    alert: 'Alert',
    tabs: 'Tabs',
    tab: 'Tab',
    tabPane: 'Tab Pane',
    badge: 'Badge',
    button: 'Button',
    button_group: 'Button Group',
    button_toolbar: 'Button Toolbar',
    card: 'Card',
    card_container: 'Card Container',
    collapse: 'Collapse',
    dropdown: 'Dropdown',
    dropdown_menu: 'Dropdown Menu',
    dropdown_item: 'Dropdown Item',
    // MEDIA
    image: 'Image',
    video: 'Video',
    // TYPOGRAPHY
    text: 'Text',
    // BASIC
    header: 'Header',
    paragraph: 'Paragraph',
    link: 'Link',
    list: 'Simple List',
    // FORMS
    form: 'Form',
    input: 'Input',
    file_input: 'File',
    form_group_input: 'Form Group',
    input_group: 'Input group',
    textarea: 'Textarea',
    select: 'Select',
    select_option: '- Select option -',
    option: 'Option',
    label: 'Label',
    checkbox: 'Checkbox',
    radio: 'Radio',
    trait_method: 'Method',
    trait_enctype: 'Encoding Type',
    trait_multiple: 'Multiple',
    trait_action: 'Action',
    trait_state: 'State',
    trait_id: 'ID',
    trait_for: 'For',
    trait_name: 'Name',
    trait_placeholder: 'Placeholder',
    trait_value: 'Value',
    trait_required: 'Required',
    trait_type: 'Type',
    trait_options: 'Options',
    trait_checked: 'Checked',
    type_text: 'Text',
    type_email: 'Email',
    type_password: 'Password',
    type_number: 'Number',
    type_date: 'Date',
    type_hidden: 'Hidden',
    type_submit: 'Submit',
    type_reset: 'Reset',
    type_button: 'Button',
    jsfInputText: 'JSF Input Text'
  };
  var default_categories = {
    'layout': true,
    'media': true,
    'components': true,
    'typography': true,
    'basic': true,
    'forms': true,
    'jsfForms': true
  };
  var options = _objectSpread(_objectSpread({}, {
    blocks: Object.assign(default_blocks, opts_blocks),
    labels: Object.assign(default_labels, opts_labels),
    blockCategories: Object.assign(default_categories, opts_categories),
    optionsStringSeparator: '::',
    gridDevices: true,
    gridDevicesPanel: false,
    classNavigation: 'nav',
    classTabPanes: 'tab-content',
    classTabPane: 'tab-pane',
    classTab: 'nav-item'
  }), opts);
  console.log("******** options are");
  console.log(options);

  // Add components
  (0,_commands__WEBPACK_IMPORTED_MODULE_1__["default"])(editor, options);
  (0,_traits__WEBPACK_IMPORTED_MODULE_2__["default"])(editor, options);
  (0,_components__WEBPACK_IMPORTED_MODULE_3__["default"])(editor, options);
  (0,_devices__WEBPACK_IMPORTED_MODULE_4__["default"])(editor, options);
  loadCss(editor, options);
}));
})();

/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,