/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/bootstrap-btn-sizes.js":
/*!************************************!*\
  !*** ./src/bootstrap-btn-sizes.js ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
  'lg': 'Large',
  'sm': 'Small'
});

/***/ }),

/***/ "./src/bootstrap-contexts.js":
/*!***********************************!*\
  !*** ./src/bootstrap-contexts.js ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (['primary', 'secondary', 'success', 'info', 'warning', 'danger', 'light', 'dark']);

/***/ }),

/***/ "./src/commands.js":
/*!*************************!*\
  !*** ./src/commands.js ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (function (editor) {
  var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var commands = editor.Commands;
});

/***/ }),

/***/ "./src/components.js":
/*!***************************!*\
  !*** ./src/components.js ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _components_Collapse__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./components/Collapse */ "./src/components/Collapse.js");
/* harmony import */ var _components_Dropdown__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./components/Dropdown */ "./src/components/Dropdown.js");
/* harmony import */ var _components_tabs_TabsNavigation__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./components/tabs/TabsNavigation */ "./src/components/tabs/TabsNavigation.js");
/* harmony import */ var _components_tabs_TabsPanes__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./components/tabs/TabsPanes */ "./src/components/tabs/TabsPanes.js");
/* harmony import */ var _components_tabs_Tab__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./components/tabs/Tab */ "./src/components/tabs/Tab.js");
/* harmony import */ var _components_tabs_TabPane__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./components/tabs/TabPane */ "./src/components/tabs/TabPane.js");
/* harmony import */ var _components_Form__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./components/Form */ "./src/components/Form.js");
/* harmony import */ var _components_Input__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./components/Input */ "./src/components/Input.js");
/* harmony import */ var _components_InputGroup__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./components/InputGroup */ "./src/components/InputGroup.js");
/* harmony import */ var _components_Textarea__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./components/Textarea */ "./src/components/Textarea.js");
/* harmony import */ var _components_Select__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./components/Select */ "./src/components/Select.js");
/* harmony import */ var _components_Checkbox__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./components/Checkbox */ "./src/components/Checkbox.js");
/* harmony import */ var _components_Radio__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./components/Radio */ "./src/components/Radio.js");
/* harmony import */ var _components_Button__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./components/Button */ "./src/components/Button.js");
/* harmony import */ var _components_ButtonGroup__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./components/ButtonGroup */ "./src/components/ButtonGroup.js");
/* harmony import */ var _components_ButtonToolbar__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./components/ButtonToolbar */ "./src/components/ButtonToolbar.js");
/* harmony import */ var _components_Label__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./components/Label */ "./src/components/Label.js");
/* harmony import */ var _components_Link__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./components/Link */ "./src/components/Link.js");
/* harmony import */ var _components_FileInput__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./components/FileInput */ "./src/components/FileInput.js");
/* harmony import */ var _components_Image__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./components/Image */ "./src/components/Image.js");
/* harmony import */ var _components_video_Video__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./components/video/Video */ "./src/components/video/Video.js");
/* harmony import */ var _components_video_Embed__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./components/video/Embed */ "./src/components/video/Embed.js");
/* harmony import */ var _components_Paragraph__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./components/Paragraph */ "./src/components/Paragraph.js");
/* harmony import */ var _components_Header__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./components/Header */ "./src/components/Header.js");
/* harmony import */ var _components_Card__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ./components/Card */ "./src/components/Card.js");
/* harmony import */ var _components_Badge__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ./components/Badge */ "./src/components/Badge.js");
/* harmony import */ var _components_Alert__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ./components/Alert */ "./src/components/Alert.js");
/* harmony import */ var _components_MediaObject__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ./components/MediaObject */ "./src/components/MediaObject.js");
/* harmony import */ var _components_ColumnBreak__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ./components/ColumnBreak */ "./src/components/ColumnBreak.js");
/* harmony import */ var _components_Column__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! ./components/Column */ "./src/components/Column.js");
/* harmony import */ var _components_Row__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! ./components/Row */ "./src/components/Row.js");
/* harmony import */ var _components_Container__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! ./components/Container */ "./src/components/Container.js");
/* harmony import */ var _components_Text__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! ./components/Text */ "./src/components/Text.js");
/* harmony import */ var _components_Default__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(/*! ./components/Default */ "./src/components/Default.js");
/* harmony import */ var _components_JsfInput__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(/*! ./components/JsfInput */ "./src/components/JsfInput.js");



































/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (function (editor) {
  var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var c = config;
  var domc = editor.DomComponents;
  var blocks = c.blocks;
  var bm = editor.BlockManager;
  var cats = c.blockCategories;
  var traits = {
    id: {
      name: 'id',
      label: c.labels.trait_id
    },
    "for": {
      name: 'for',
      label: c.labels.trait_for
    },
    name: {
      name: 'name',
      label: c.labels.trait_name
    },
    placeholder: {
      name: 'placeholder',
      label: c.labels.trait_placeholder
    },
    value: {
      name: 'value',
      label: c.labels.trait_value
    },
    required: {
      type: 'checkbox',
      name: 'required',
      label: c.labels.trait_required
    },
    checked: {
      label: c.labels.trait_checked,
      type: 'checkbox',
      name: 'checked',
      changeProp: 1
    }
  };
  if (cats.media) {
    if (blocks.image) {
      (0,_components_Image__WEBPACK_IMPORTED_MODULE_19__.ImageBlock)(bm, c.labels.image);
      (0,_components_Image__WEBPACK_IMPORTED_MODULE_19__["default"])(domc);
    }
    if (blocks.video) {
      (0,_components_video_Embed__WEBPACK_IMPORTED_MODULE_21__["default"])(domc);
      (0,_components_video_Video__WEBPACK_IMPORTED_MODULE_20__.VideoBlock)(bm, c.labels.video);
      (0,_components_video_Video__WEBPACK_IMPORTED_MODULE_20__["default"])(domc);
    }
  }

  // Rebuild the default component and add utility settings to it (border, bg, color, etc)
  if (cats.basic) {
    if (blocks["default"]) {
      (0,_components_Default__WEBPACK_IMPORTED_MODULE_33__["default"])(domc);
    }

    // Rebuild the text component and add display utility setting
    if (blocks.text) {
      (0,_components_Text__WEBPACK_IMPORTED_MODULE_32__.TextBlock)(bm, c.labels.text);
      (0,_components_Text__WEBPACK_IMPORTED_MODULE_32__["default"])(domc);
    }

    // Rebuild the link component with settings for collapse-control
    if (blocks.link) {
      (0,_components_Link__WEBPACK_IMPORTED_MODULE_17__.LinkBlock)(bm, c.labels.link);
      (0,_components_Link__WEBPACK_IMPORTED_MODULE_17__["default"])(editor);
    }

    // Basic
    /*if (blocks.list) {
      ListBlock(bm, c.labels.list)
      List(domc);
    }*/

    /*if (blocks.description_list) {
    }*/
  }

  // LAYOUT
  if (cats.layout) {
    if (blocks.container) {
      (0,_components_Container__WEBPACK_IMPORTED_MODULE_31__.ContainerBlock)(bm, c.labels.container);
      (0,_components_Container__WEBPACK_IMPORTED_MODULE_31__["default"])(domc);
    }
    if (blocks.row) {
      (0,_components_Row__WEBPACK_IMPORTED_MODULE_30__.RowBlock)(bm, c.labels.row);
      (0,_components_Row__WEBPACK_IMPORTED_MODULE_30__["default"])(domc);
    }
    if (blocks.column) {
      (0,_components_Column__WEBPACK_IMPORTED_MODULE_29__.ColumnBlock)(bm, c.labels.column);
      (0,_components_Column__WEBPACK_IMPORTED_MODULE_29__["default"])(domc, editor);
      (0,_components_ColumnBreak__WEBPACK_IMPORTED_MODULE_28__.ColumnBreakBlock)(bm, c.labels.column_break);
      (0,_components_ColumnBreak__WEBPACK_IMPORTED_MODULE_28__["default"])(domc);
    }
    // Media object
    if (blocks.media_object) {
      (0,_components_MediaObject__WEBPACK_IMPORTED_MODULE_27__.MediaObjectBlock)(bm, c.labels.media_object);
      (0,_components_MediaObject__WEBPACK_IMPORTED_MODULE_27__["default"])(domc);
    }
  }

  // Bootstrap COMPONENTS
  if (cats.components) {
    // Alert
    if (blocks.alert) {
      (0,_components_Alert__WEBPACK_IMPORTED_MODULE_26__.AlertBlock)(bm, c.labels.alert);
      (0,_components_Alert__WEBPACK_IMPORTED_MODULE_26__["default"])(domc);
    }
    if (blocks.tabs) {
      (0,_components_tabs_TabsNavigation__WEBPACK_IMPORTED_MODULE_2__.TabsBlock)(bm, c);
      (0,_components_tabs_TabsNavigation__WEBPACK_IMPORTED_MODULE_2__["default"])(domc, config);
      (0,_components_tabs_Tab__WEBPACK_IMPORTED_MODULE_4__["default"])(domc, config);
      (0,_components_tabs_TabsPanes__WEBPACK_IMPORTED_MODULE_3__["default"])(domc, config);
      (0,_components_tabs_TabPane__WEBPACK_IMPORTED_MODULE_5__["default"])(domc, config);
    }

    // Badge
    if (blocks.badge) {
      (0,_components_Badge__WEBPACK_IMPORTED_MODULE_25__.BadgeBlock)(bm, c.labels.badge);
      (0,_components_Badge__WEBPACK_IMPORTED_MODULE_25__["default"])(domc);
    }

    // Card
    if (blocks.card) {
      (0,_components_Card__WEBPACK_IMPORTED_MODULE_24__.CardBlock)(bm, c);
      (0,_components_Card__WEBPACK_IMPORTED_MODULE_24__["default"])(domc, editor);
    }

    // Collapse
    if (blocks.collapse) {
      (0,_components_Collapse__WEBPACK_IMPORTED_MODULE_0__.CollapseBlock)(bm, c.labels.collapse);
      (0,_components_Collapse__WEBPACK_IMPORTED_MODULE_0__["default"])(editor);
    }

    // Dropdown
    if (blocks.dropdown) {
      (0,_components_Dropdown__WEBPACK_IMPORTED_MODULE_1__.DropDownBlock)(bm, c.labels.dropdown);
      (0,_components_Dropdown__WEBPACK_IMPORTED_MODULE_1__["default"])(editor);
    }
  }

  // TYPOGRAPHY
  if (cats.typography) {
    if (blocks.header) {
      (0,_components_Header__WEBPACK_IMPORTED_MODULE_23__.HeaderBlock)(bm, c.labels.header);
      (0,_components_Header__WEBPACK_IMPORTED_MODULE_23__["default"])(domc);
    }
    if (blocks.paragraph) {
      (0,_components_Paragraph__WEBPACK_IMPORTED_MODULE_22__.ParagraphBlock)(bm, c.labels.paragraph);
      (0,_components_Paragraph__WEBPACK_IMPORTED_MODULE_22__["default"])(domc);
    }
  }
  if (cats.forms) {
    if (blocks.form) {
      (0,_components_Form__WEBPACK_IMPORTED_MODULE_6__.FormBlock)(bm, c.labels.form);
      (0,_components_Form__WEBPACK_IMPORTED_MODULE_6__["default"])(domc, traits, config);
    }
    if (blocks.input) {
      (0,_components_Input__WEBPACK_IMPORTED_MODULE_7__.InputBlock)(bm, c.labels.input);
      (0,_components_Input__WEBPACK_IMPORTED_MODULE_7__["default"])(domc, traits, config);
      (0,_components_FileInput__WEBPACK_IMPORTED_MODULE_18__.FileInputBlock)(bm, c.labels.file_input);
      (0,_components_FileInput__WEBPACK_IMPORTED_MODULE_18__["default"])(domc, traits, config);
    }
    if (blocks.form_group_input) {
      (0,_components_InputGroup__WEBPACK_IMPORTED_MODULE_8__.InputGroupBlock)(bm, c.labels.form_group_input);
      (0,_components_InputGroup__WEBPACK_IMPORTED_MODULE_8__["default"])(domc, traits, config);
    }
    if (blocks.textarea) {
      (0,_components_Textarea__WEBPACK_IMPORTED_MODULE_9__.TextareaBlock)(bm, c.labels.textarea);
      (0,_components_Textarea__WEBPACK_IMPORTED_MODULE_9__["default"])(domc, traits, config);
    }
    if (blocks.select) {
      (0,_components_Select__WEBPACK_IMPORTED_MODULE_10__.SelectBlock)(bm, c.labels.select);
      (0,_components_Select__WEBPACK_IMPORTED_MODULE_10__["default"])(editor, domc, traits, config);
    }
    if (blocks.checkbox) {
      (0,_components_Checkbox__WEBPACK_IMPORTED_MODULE_11__.CheckboxBlock)(bm, c.labels.checkbox);
      (0,_components_Checkbox__WEBPACK_IMPORTED_MODULE_11__["default"])(domc, traits, config);
    }
    if (blocks.radio) {
      (0,_components_Radio__WEBPACK_IMPORTED_MODULE_12__.RadioBlock)(bm, c.labels.radio);
      (0,_components_Radio__WEBPACK_IMPORTED_MODULE_12__["default"])(domc, traits, config);
    }
    if (blocks.label) {
      (0,_components_Label__WEBPACK_IMPORTED_MODULE_16__.LabelBlock)(bm, c.labels.label);
      (0,_components_Label__WEBPACK_IMPORTED_MODULE_16__["default"])(domc, traits, config);
    }
    if (blocks.button) {
      (0,_components_Button__WEBPACK_IMPORTED_MODULE_13__.ButtonBlock)(bm, c.labels.button);
      (0,_components_Button__WEBPACK_IMPORTED_MODULE_13__["default"])(domc);
    }
    if (blocks.button_group) {
      (0,_components_ButtonGroup__WEBPACK_IMPORTED_MODULE_14__.ButtonGroupBlock)(bm, c.labels.button_group);
      (0,_components_ButtonGroup__WEBPACK_IMPORTED_MODULE_14__["default"])(domc);
    }
    if (blocks.button_toolbar) {
      (0,_components_ButtonToolbar__WEBPACK_IMPORTED_MODULE_15__.ButtonToolbarBlock)(bm, c.labels.button_toolbar, c);
      (0,_components_ButtonToolbar__WEBPACK_IMPORTED_MODULE_15__["default"])(domc);
    }
  }
  if (cats.jsfForms) {
    if (blocks.jsfInputText) {
      (0,_components_JsfInput__WEBPACK_IMPORTED_MODULE_34__["default"])(domc, traits, config);
      (0,_components_JsfInput__WEBPACK_IMPORTED_MODULE_34__.JsfInputBlock)(bm, c.labels.jsfInputText);
    }
  }
});

/***/ }),

/***/ "./src/components/Alert.js":
/*!*********************************!*\
  !*** ./src/components/Alert.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   AlertBlock: () => (/* binding */ AlertBlock),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _bootstrap_contexts__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../bootstrap-contexts */ "./src/bootstrap-contexts.js");
/* harmony import */ var raw_loader_icons_exclamation_triangle_solid_svg__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! raw-loader!../icons/exclamation-triangle-solid.svg */ "../../node_modules/raw-loader/dist/cjs.js!./src/icons/exclamation-triangle-solid.svg");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils */ "./src/utils.js");
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }



var AlertBlock = function AlertBlock(bm, label) {
  bm.add('alert', {
    label: "\n            ".concat(raw_loader_icons_exclamation_triangle_solid_svg__WEBPACK_IMPORTED_MODULE_1__["default"], "\n            <div>").concat(label, "</div>\n        "),
    category: 'Components',
    content: {
      type: 'alert',
      content: 'This is an alert—check it out!'
    }
  });
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (function (domc) {
  var textType = domc.getType('text');
  var textModel = textType.model;
  var textView = textType.view;
  domc.addType('alert', {
    isComponent: function isComponent(el) {
      if (el && el.classList && el.classList.contains('alert')) {
        return {
          type: 'alert'
        };
      }
    },
    extend: 'text',
    model: {
      defaults: Object.assign({}, textModel.prototype.defaults, {
        'custom-name': 'Alert',
        tagName: 'div',
        classes: ['alert'],
        traits: [{
          type: 'class_select',
          options: [{
            value: '',
            name: 'None'
          }].concat(_toConsumableArray(_bootstrap_contexts__WEBPACK_IMPORTED_MODULE_0__["default"].map(function (v) {
            return {
              value: 'alert-' + v,
              name: (0,_utils__WEBPACK_IMPORTED_MODULE_2__.capitalize)(v)
            };
          }))),
          label: 'Context'
        }].concat(textModel.prototype.defaults.traits)
      })
    },
    extendView: 'text'
  });
});

/***/ }),

/***/ "./src/components/Badge.js":
/*!*********************************!*\
  !*** ./src/components/Badge.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   BadgeBlock: () => (/* binding */ BadgeBlock),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _bootstrap_contexts__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../bootstrap-contexts */ "./src/bootstrap-contexts.js");
/* harmony import */ var raw_loader_icons_certificate_solid_svg__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! raw-loader!../icons/certificate-solid.svg */ "../../node_modules/raw-loader/dist/cjs.js!./src/icons/certificate-solid.svg");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils */ "./src/utils.js");
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }



var BadgeBlock = function BadgeBlock(bm, label) {
  bm.add('badge', {
    label: "\n            ".concat(raw_loader_icons_certificate_solid_svg__WEBPACK_IMPORTED_MODULE_1__["default"], "\n            <div>").concat(label, "</div>\n        "),
    category: 'Components',
    content: {
      type: 'badge',
      content: 'New!'
    }
  });
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (function (domc) {
  var textType = domc.getType('text');
  var textModel = textType.model;
  var textView = textType.view;
  domc.addType('badge', {
    isComponent: function isComponent(el) {
      if (el && el.classList && el.classList.contains('badge')) {
        return {
          type: 'badge'
        };
      }
    },
    extend: 'text',
    model: {
      defaults: Object.assign({}, textModel.prototype.defaults, {
        'custom-name': 'Badge',
        tagName: 'span',
        classes: ['badge'],
        traits: [{
          type: 'class_select',
          options: [{
            value: '',
            name: 'None'
          }].concat(_toConsumableArray(_bootstrap_contexts__WEBPACK_IMPORTED_MODULE_0__["default"].map(function (v) {
            return {
              value: 'badge-' + v,
              name: (0,_utils__WEBPACK_IMPORTED_MODULE_2__.capitalize)(v)
            };
          }))),
          label: 'Context'
        }, {
          type: 'class_select',
          options: [{
            value: '',
            name: 'Default'
          }, {
            value: 'badge-pill',
            name: 'Pill'
          }],
          label: 'Shape'
        }].concat(textModel.prototype.defaults.traits)
      })
    },
    extendView: 'text'
  });
});

/***/ }),

/***/ "./src/components/Button.js":
/*!**********************************!*\
  !*** ./src/components/Button.js ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ButtonBlock: () => (/* binding */ ButtonBlock),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _bootstrap_contexts__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../bootstrap-contexts */ "./src/bootstrap-contexts.js");
/* harmony import */ var _bootstrap_btn_sizes__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../bootstrap-btn-sizes */ "./src/bootstrap-btn-sizes.js");
/* harmony import */ var raw_loader_icons_button_svg__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! raw-loader!../icons/button.svg */ "../../node_modules/raw-loader/dist/cjs.js!./src/icons/button.svg");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils */ "./src/utils.js");
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }




var ButtonBlock = function ButtonBlock(bm, label) {
  bm.add('button', {
    label: "".concat(raw_loader_icons_button_svg__WEBPACK_IMPORTED_MODULE_2__["default"], "<div>").concat(label, "</div>"),
    category: 'Forms',
    content: '<button class="btn btn-primary">Send</button>'
  });
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (function (dc) {
  var defaultType = dc.getType('default');
  var defaultModel = defaultType.model;
  var defaultView = defaultType.view;
  dc.addType('button', {
    isComponent: function isComponent(el) {
      if (el && el.classList && el.classList.contains('btn')) {
        return {
          type: 'button'
        };
      }
    },
    extend: 'default',
    model: {
      defaults: _objectSpread(_objectSpread({}, defaultModel.prototype.defaults), {}, {
        'custom-name': 'Button',
        droppable: false,
        attributes: {
          role: 'button'
        },
        classes: ['btn'],
        traits: [{
          type: 'content',
          label: 'Text'
        }, {
          label: 'Type',
          type: 'select',
          name: 'type',
          options: [{
            value: 'submit',
            name: 'Submit'
          }, {
            value: 'reset',
            name: 'Reset'
          }, {
            value: 'button',
            name: 'Button'
          }]
        }, {
          type: 'class_select',
          options: [{
            value: '',
            name: 'None'
          }].concat(_toConsumableArray(_bootstrap_contexts__WEBPACK_IMPORTED_MODULE_0__["default"].map(function (v) {
            return {
              value: "btn-".concat(v),
              name: (0,_utils__WEBPACK_IMPORTED_MODULE_3__.capitalize)(v)
            };
          })), _toConsumableArray(_bootstrap_contexts__WEBPACK_IMPORTED_MODULE_0__["default"].map(function (v) {
            return {
              value: "btn-outline-".concat(v),
              name: (0,_utils__WEBPACK_IMPORTED_MODULE_3__.capitalize)(v) + ' (Outline)'
            };
          }))),
          label: 'Context'
        }, {
          type: 'class_select',
          options: [{
            value: '',
            name: 'Default'
          }].concat(_toConsumableArray(Object.keys(_bootstrap_btn_sizes__WEBPACK_IMPORTED_MODULE_1__["default"]).map(function (k) {
            return {
              value: "btn-".concat(k),
              name: _bootstrap_btn_sizes__WEBPACK_IMPORTED_MODULE_1__["default"][k]
            };
          }))),
          label: 'Size'
        }, {
          type: 'class_select',
          options: [{
            value: '',
            name: 'Inline'
          }, {
            value: 'btn-block',
            name: 'Block'
          }],
          label: 'Width'
        }].concat(defaultModel.prototype.defaults.traits)
      }),
      afterChange: function afterChange(e) {
        if (this.attributes.type === 'button') {
          if (this.attributes.classes.filter(function (klass) {
            return klass.id === 'btn';
          }).length === 0) {
            this.changeType('link');
          }
        }
      }
    },
    extendView: 'default',
    view: {
      events: {
        'click': 'handleClick'
      },
      init: function init() {
        this.listenTo(this.model, 'change:content', this.updateContent);
      },
      updateContent: function updateContent() {
        this.el.innerHTML = this.model.get('content');
      },
      handleClick: function handleClick(e) {
        e.preventDefault();
      }
    }
  });
});

/***/ }),

/***/ "./src/components/ButtonGroup.js":
/*!***************************************!*\
  !*** ./src/components/ButtonGroup.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ButtonGroupBlock: () => (/* binding */ ButtonGroupBlock),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _bootstrap_btn_sizes__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../bootstrap-btn-sizes */ "./src/bootstrap-btn-sizes.js");
/* harmony import */ var raw_loader_icons_button_svg__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! raw-loader!../icons/button.svg */ "../../node_modules/raw-loader/dist/cjs.js!./src/icons/button.svg");
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }


var ButtonGroupBlock = function ButtonGroupBlock(bm, label) {
  bm.add('button_group', {
    label: "\n            ".concat(raw_loader_icons_button_svg__WEBPACK_IMPORTED_MODULE_1__["default"], "\n            <div>").concat(label, "</div>\n        "),
    category: 'Forms',
    content: {
      type: 'button_group'
    }
  });
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (function (dc) {
  var defaultType = dc.getType('default');
  var defaultModel = defaultType.model;
  var defaultView = defaultType.view;
  dc.addType('button_group', {
    isComponent: function isComponent(el) {
      if (el && el.classList && el.classList.contains('btn-group')) {
        return {
          type: 'button_group'
        };
      }
    },
    extend: 'default',
    model: {
      defaults: Object.assign({}, defaultModel.prototype.defaults, {
        'custom-name': 'Button Group',
        tagName: 'div',
        classes: ['btn-group'],
        droppable: '.btn',
        attributes: {
          role: 'group'
        },
        traits: [{
          type: 'class_select',
          options: [{
            value: '',
            name: 'Default'
          }].concat(_toConsumableArray(Object.keys(_bootstrap_btn_sizes__WEBPACK_IMPORTED_MODULE_0__["default"]).map(function (k) {
            return {
              value: 'btn-group-' + k,
              name: _bootstrap_btn_sizes__WEBPACK_IMPORTED_MODULE_0__["default"][k]
            };
          }))),
          label: 'Size'
        }, {
          type: 'class_select',
          options: [{
            value: '',
            name: 'Horizontal'
          }, {
            value: 'btn-group-vertical',
            name: 'Vertical'
          }],
          label: 'Size'
        }, {
          type: 'Text',
          label: 'ARIA Label',
          name: 'aria-label',
          placeholder: 'A group of buttons'
        }].concat(defaultModel.prototype.defaults.traits)
      })
    },
    extendView: 'default'
  });
});

/***/ }),

/***/ "./src/components/ButtonToolbar.js":
/*!*****************************************!*\
  !*** ./src/components/ButtonToolbar.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ButtonToolbarBlock: () => (/* binding */ ButtonToolbarBlock),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var raw_loader_icons_button_svg__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! raw-loader!../icons/button.svg */ "../../node_modules/raw-loader/dist/cjs.js!./src/icons/button.svg");

var ButtonToolbarBlock = function ButtonToolbarBlock(bm, label) {
  bm.add('button_toolbar', {
    label: "\n            ".concat(raw_loader_icons_button_svg__WEBPACK_IMPORTED_MODULE_0__["default"], "\n            <div>").concat(label, "</div>\n        "),
    category: 'Forms',
    content: {
      type: 'button_toolbar'
    }
  });
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (function (dc) {
  var defaultType = dc.getType('default');
  var defaultModel = defaultType.model;
  var defaultView = defaultType.view;
  dc.addType('button_toolbar', {
    isComponent: function isComponent(el) {
      if (el && el.classList && el.classList.contains('btn-toolbar')) {
        return {
          type: 'button_toolbar'
        };
      }
    },
    extend: 'default',
    model: {
      defaults: Object.assign({}, defaultModel.prototype.defaults, {
        'custom-name': 'Button Toolbar',
        tagName: 'div',
        classes: ['btn-toolbar'],
        droppable: '.btn-group',
        attributes: {
          role: 'toolbar'
        },
        traits: [{
          type: 'Text',
          label: 'ARIA Label',
          name: 'aria-label',
          placeholder: 'A toolbar of button groups'
        }].concat(defaultModel.prototype.defaults.traits)
      })
    },
    extendView: 'default'
  });
});

/***/ }),

/***/ "./src/components/Card.js":
/*!********************************!*\
  !*** ./src/components/Card.js ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   CardBlock: () => (/* binding */ CardBlock),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var raw_loader_icons_credit_card_solid_svg__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! raw-loader!../icons/credit-card-solid.svg */ "../../node_modules/raw-loader/dist/cjs.js!./src/icons/credit-card-solid.svg");

var CardBlock = function CardBlock(bm, c) {
  bm.add('card', {
    label: "\n            ".concat(raw_loader_icons_credit_card_solid_svg__WEBPACK_IMPORTED_MODULE_0__["default"], "\n            <div>").concat(c.labels.card, "</div>\n        "),
    category: 'Components',
    content: {
      type: 'card'
    }
  });
  bm.add('card_container', {
    label: "\n            ".concat(raw_loader_icons_credit_card_solid_svg__WEBPACK_IMPORTED_MODULE_0__["default"], "\n            <div>").concat(c.labels.card_container, "</div>\n        "),
    category: 'Components',
    content: {
      type: 'card_container'
    }
  });
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (function (domc, editor) {
  var comps = editor.DomComponents;
  var defaultType = comps.getType('default');
  var defaultModel = defaultType.model;
  var defaultView = defaultType.view;
  var imageType = domc.getType('image');
  var imageModel = imageType.model;
  var imageView = imageType.view;
  domc.addType('card', {
    isComponent: function isComponent(el) {
      if (el && el.classList && el.classList.contains('card')) {
        return {
          type: 'card'
        };
      }
    },
    extend: 'default',
    model: {
      defaults: Object.assign({}, defaultModel.prototype.defaults, {
        'custom-name': 'Card',
        classes: ['card'],
        traits: [{
          type: 'checkbox',
          label: 'Image Top',
          name: 'card-img-top',
          changeProp: 1
        }, {
          type: 'checkbox',
          label: 'Header',
          name: 'card-header',
          changeProp: 1
        }, {
          type: 'checkbox',
          label: 'Image',
          name: 'card-img',
          changeProp: 1
        }, {
          type: 'checkbox',
          label: 'Image Overlay',
          name: 'card-img-overlay',
          changeProp: 1
        }, {
          type: 'checkbox',
          label: 'Body',
          name: 'card-body',
          changeProp: 1
        }, {
          type: 'checkbox',
          label: 'Footer',
          name: 'card-footer',
          changeProp: 1
        }, {
          type: 'checkbox',
          label: 'Image Bottom',
          name: 'card-img-bottom',
          changeProp: 1
        }].concat(defaultModel.prototype.defaults.traits)
      }),
      init2: function init2() {
        this.listenTo(this, 'change:card-img-top', this.cardImageTop);
        this.listenTo(this, 'change:card-header', this.cardHeader);
        this.listenTo(this, 'change:card-img', this.cardImage);
        this.listenTo(this, 'change:card-img-overlay', this.cardImageOverlay);
        this.listenTo(this, 'change:card-body', this.cardBody);
        this.listenTo(this, 'change:card-footer', this.cardFooter);
        this.listenTo(this, 'change:card-img-bottom', this.cardImageBottom);
        this.components().comparator = 'card-order';
        this.set('card-img-top', true);
        this.set('card-body', true);
      },
      cardImageTop: function cardImageTop() {
        this.createCardComponent('card-img-top');
      },
      cardHeader: function cardHeader() {
        this.createCardComponent('card-header');
      },
      cardImage: function cardImage() {
        this.createCardComponent('card-img');
      },
      cardImageOverlay: function cardImageOverlay() {
        this.createCardComponent('card-img-overlay');
      },
      cardBody: function cardBody() {
        this.createCardComponent('card-body');
      },
      cardFooter: function cardFooter() {
        this.createCardComponent('card-footer');
      },
      cardImageBottom: function cardImageBottom() {
        this.createCardComponent('card-img-bottom');
      },
      createCardComponent: function createCardComponent(prop) {
        var state = this.get(prop);
        var type = prop.replace(/-/g, '_').replace(/img/g, 'image');
        var children = this.components();
        var existing = children.filter(function (comp) {
          return comp.attributes.type === type;
        })[0]; // should only be one of each.

        if (state && !existing) {
          var comp = children.add({
            type: type
          });
          var comp_children = comp.components();
          if (prop === 'card-header') {
            comp_children.add({
              type: 'header',
              tagName: 'h4',
              style: {
                'margin-bottom': '0px'
              },
              content: 'Card Header'
            });
          }
          if (prop === 'card-img-overlay') {
            comp_children.add({
              type: 'header',
              tagName: 'h4',
              classes: ['card-title'],
              content: 'Card title'
            });
            comp_children.add({
              type: 'text',
              tagName: 'p',
              classes: ['card-text'],
              content: "Some quick example text to build on the card title and make up the bulk of the card's content."
            });
          }
          if (prop === 'card-body') {
            comp_children.add({
              type: 'header',
              tagName: 'h4',
              classes: ['card-title'],
              content: 'Card title'
            });
            comp_children.add({
              type: 'header',
              tagName: 'h6',
              classes: ['card-subtitle', 'text-muted', 'mb-2'],
              content: 'Card subtitle'
            });
            comp_children.add({
              type: 'text',
              tagName: 'p',
              classes: ['card-text'],
              content: "Some quick example text to build on the card title and make up the bulk of the card's content."
            });
            comp_children.add({
              type: 'link',
              classes: ['card-link'],
              href: '#',
              content: 'Card link'
            });
            comp_children.add({
              type: 'link',
              classes: ['card-link'],
              href: '#',
              content: 'Another link'
            });
          }
          this.order();
        } else if (!state) {
          existing.destroy();
        }
      },
      order: function order() {}
    },
    extendView: 'default'
  });
  domc.addType('card_image_top', {
    isComponent: function isComponent(el) {
      if (el && el.classList && el.classList.contains('card-img-top')) {
        return {
          type: 'card_image_top'
        };
      }
    },
    extend: 'image',
    model: {
      defaults: Object.assign({}, imageModel.prototype.defaults, {
        'custom-name': 'Card Image Top',
        classes: ['card-img-top'],
        'card-order': 1
      })
    },
    extendView: 'image'
  });
  domc.addType('card_header', {
    isComponent: function isComponent(el) {
      if (el && el.classList && el.classList.contains('card-header')) {
        return {
          type: 'card_header'
        };
      }
    },
    extend: 'default',
    model: {
      defaults: Object.assign({}, defaultModel.prototype.defaults, {
        'custom-name': 'Card Header',
        classes: ['card-header'],
        'card-order': 2
      })
    },
    extendView: 'default'
  });
  domc.addType('card_image', {
    isComponent: function isComponent(el) {
      if (el && el.classList && el.classList.contains('card-img')) {
        return {
          type: 'card_image'
        };
      }
    },
    extend: 'image',
    model: {
      defaults: Object.assign({}, imageModel.prototype.defaults, {
        'custom-name': 'Card Image',
        classes: ['card-img'],
        'card-order': 3
      })
    },
    extendView: 'image'
  });
  domc.addType('card_image_overlay', {
    isComponent: function isComponent(el) {
      if (el && el.classList && el.classList.contains('card-img-overlay')) {
        return {
          type: 'card_image_overlay'
        };
      }
    },
    extend: 'default',
    model: {
      defaults: Object.assign({}, defaultModel.prototype.defaults, {
        'custom-name': 'Card Image Overlay',
        classes: ['card-img-overlay'],
        'card-order': 4
      })
    },
    extendView: 'default'
  });
  domc.addType('card_body', {
    isComponent: function isComponent(el) {
      if (el && el.classList && el.classList.contains('card-body')) {
        return {
          type: 'card_body'
        };
      }
    },
    extend: 'default',
    model: {
      defaults: Object.assign({}, defaultModel.prototype.defaults, {
        'custom-name': 'Card Body',
        classes: ['card-body'],
        'card-order': 5
      })
    },
    extendView: 'default'
  });
  domc.addType('card_footer', {
    isComponent: function isComponent(el) {
      if (el && el.classList && el.classList.contains('card-footer')) {
        return {
          type: 'card_footer'
        };
      }
    },
    extend: 'default',
    model: {
      defaults: Object.assign({}, defaultModel.prototype.defaults, {
        'custom-name': 'Card Footer',
        classes: ['card-footer'],
        'card-order': 6
      })
    },
    extendView: 'default'
  });
  domc.addType('card_image_bottom', {
    isComponent: function isComponent(el) {
      if (el && el.classList && el.classList.contains('card-img-bottom')) {
        return {
          type: 'card_image_bottom'
        };
      }
    },
    extend: 'image',
    model: {
      defaults: Object.assign({}, imageModel.prototype.defaults, {
        'custom-name': 'Card Image Bottom',
        classes: ['card-img-bottom'],
        'card-order': 7
      })
    },
    extendView: 'image'
  });
  domc.addType('card_container', {
    isComponent: function isComponent(el) {
      var css = Array.from(el.classList || []);
      var includes = ['card-group', 'card-deck', 'card-columns'];
      var intersection = css.filter(function (x) {
        return includes.includes(x);
      });
      if (el && el.classList && intersection.length) {
        return {
          type: 'card_container'
        };
      }
    },
    extend: 'default',
    model: {
      defaults: Object.assign({}, defaultModel.prototype.defaults, {
        'custom-name': 'Card Container',
        classes: ['card-group'],
        droppable: '.card',
        traits: [{
          type: 'class_select',
          options: [{
            value: 'card-group',
            name: 'Group'
          }, {
            value: 'card-deck',
            name: 'Deck'
          }, {
            value: 'card-columns',
            name: 'Columns'
          }],
          label: 'Layout'
        }].concat(defaultModel.prototype.defaults.traits)
      })
    },
    extendView: 'default'
  });
});

/***/ }),

/***/ "./src/components/Checkbox.js":
/*!************************************!*\
  !*** ./src/components/Checkbox.js ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   CheckboxBlock: () => (/* binding */ CheckboxBlock),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var raw_loader_icons_check_square_solid_svg__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! raw-loader!../icons/check-square-solid.svg */ "../../node_modules/raw-loader/dist/cjs.js!./src/icons/check-square-solid.svg");
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }

var CheckboxBlock = function CheckboxBlock(bm, label) {
  bm.add('checkbox', {
    label: "\n            ".concat(raw_loader_icons_check_square_solid_svg__WEBPACK_IMPORTED_MODULE_0__["default"], "\n            <div>").concat(label, "</div>\n        "),
    category: 'Forms',
    content: "\n        <div class=\"form-check\">\n          <input class=\"form-check-input\" type=\"checkbox\" value=\"\" id=\"defaultCheck1\">\n          <label class=\"form-check-label\" for=\"defaultCheck1\">\n            Default checkbox\n          </label>\n        </div>\n      "
  });
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (function (dc, traits) {
  var config = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  var defaultType = dc.getType('default');
  var defaultModel = defaultType.model;
  var defaultView = defaultType.view;
  var inputType = dc.getType('input');
  var inputModel = inputType.model;
  dc.addType('checkbox', {
    isComponent: function isComponent(el) {
      if (el.tagName === 'INPUT' && el.type === 'checkbox') {
        return {
          type: 'checkbox'
        };
      }
    },
    extend: 'default',
    model: {
      defaults: _objectSpread(_objectSpread({}, inputModel.prototype.defaults), {}, {
        'custom-name': config.labels.checkbox,
        copyable: false,
        droppable: false,
        attributes: {
          type: 'checkbox'
        },
        traits: [traits.id, traits.name, traits.value, traits.required, traits.checked]
      }),
      init: function init() {
        this.listenTo(this, 'change:checked', this.handleChecked);
      },
      handleChecked: function handleChecked() {
        var checked = this.get('checked');
        var attrs = this.get('attributes');
        var view = this.view;
        if (checked) {
          attrs.checked = true;
        } else {
          delete attrs.checked;
        }
        if (view) {
          view.el.checked = checked;
        }
        this.set('attributes', _objectSpread({}, attrs));
      }
    },
    extendView: 'default',
    view: {
      events: {
        'click': 'handleClick'
      },
      handleClick: function handleClick(e) {
        e.preventDefault();
      }
    }
  });
});

/***/ }),

/***/ "./src/components/Collapse.js":
/*!************************************!*\
  !*** ./src/components/Collapse.js ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   CollapseBlock: () => (/* binding */ CollapseBlock),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var raw_loader_icons_compress_solid_svg__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! raw-loader!../icons/compress-solid.svg */ "../../node_modules/raw-loader/dist/cjs.js!./src/icons/compress-solid.svg");

var CollapseBlock = function CollapseBlock(bm, label) {
  bm.add('collapse', {
    label: "\n            ".concat(raw_loader_icons_compress_solid_svg__WEBPACK_IMPORTED_MODULE_0__["default"], "\n            <div>").concat(label, "</div>\n        "),
    category: 'Components',
    content: {
      type: 'collapse'
    }
  });
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (function (editor) {
  var comps = editor.DomComponents;
  var defaultType = comps.getType('default');
  var defaultModel = defaultType.model;
  var defaultView = defaultType.view;
  comps.addType('collapse', {
    isComponent: function isComponent(el) {
      if (el && el.classList && el.classList.contains('dropdown')) {
        return {
          type: 'dropdown'
        };
      }
    },
    extend: 'default',
    model: {
      defaults: Object.assign({}, defaultModel.prototype.defaults, {
        'custom-name': 'Dropdown',
        classes: ['collapse'],
        droppable: true,
        traits: [{
          type: 'class_select',
          options: [{
            value: '',
            name: 'Closed'
          }, {
            value: 'show',
            name: 'Open'
          }],
          label: 'Initial state'
        }].concat(defaultModel.prototype.defaults.traits)
      })
      /*init2() {
        window.asdf = this;
        const toggle = {
          type: 'button',
          content: 'Click to toggle',
          classes: ['btn', 'dropdown-toggle']
        }
        const toggle_comp = this.append(toggle)[0];
        const menu = {
          type: 'dropdown_menu'
        }
        const menu_comp = this.append(menu)[0];
        this.setupToggle(null, null, {force: true});
        const comps = this.components();
        comps.bind('add', this.setupToggle.bind(this));
        comps.bind('change', this.setupToggle.bind(this));
        comps.bind('remove', this.setupToggle.bind(this));
        const classes = this.get('classes');
        classes.bind('add', this.setupToggle.bind(this));
        classes.bind('change', this.setupToggle.bind(this));
        classes.bind('remove', this.setupToggle.bind(this));
      },
      setupToggle(a, b, options = {}) {
        const toggle = this.components().filter(c => c.getAttributes().class.split(' ').includes('dropdown-toggle'))[0];
        // raise error if toggle not found
        const menu = this.components().filter(c => c.getAttributes().class.split(' ').includes('dropdown-menu'))[0];
        // raise error if menu not found
          if(options.force !== true && options.ignore === true) {
          return;
        }
          if(toggle && menu) {
            function hasEvent(comp) {
            let eca = comp._events['change:attributes'];
            if(!eca) return false;
            return eca.filter(e => e.callback.name == 'setupToggle').length != 0;
          }
            // setup event listeners if they aren't set
          if(!hasEvent(toggle)) {
            this.listenTo(toggle, 'change:attributes', this.setupToggle);
          }
          if(!hasEvent(menu)) {
            this.listenTo(menu, 'change:attributes', this.setupToggle);
          }
            // setup toggle
          var toggle_attrs = toggle.getAttributes();
          toggle_attrs['role'] = 'button'; // if A
          var menu_attrs = menu.getAttributes();
          if(!toggle_attrs.hasOwnProperty('data-toggle')) {
            toggle_attrs['data-toggle'] = 'dropdown';
          }
          if(!toggle_attrs.hasOwnProperty('aria-haspopup')) {
            toggle_attrs['aria-haspopup'] = true;
          }
          const dropdown_classes = this.getAttributes().class.split(' ');
          toggle_attrs['aria-expanded'] = dropdown_classes.includes('show');
          toggle.set('attributes', toggle_attrs, {ignore: true});
          // setup menu
          // toggle needs ID for aria-labelled on the menu, could alert here
          if(toggle_attrs.hasOwnProperty('id')) {
            menu_attrs['aria-labelledby'] = toggle_attrs.id;
          } else {
            delete menu_attrs['aria-labelledby'];
          }
          menu.set('attributes', menu_attrs, {ignore: true});
        }
      }*/
    },
    extendView: 'default',
    view: {
      /*init() {
        this.model.setupToggle
      }*/
    }
  });
});

/***/ }),

/***/ "./src/components/Column.js":
/*!**********************************!*\
  !*** ./src/components/Column.js ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ColumnBlock: () => (/* binding */ ColumnBlock),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var raw_loader_icons_columns_solid_svg__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! raw-loader!../icons/columns-solid.svg */ "../../node_modules/raw-loader/dist/cjs.js!./src/icons/columns-solid.svg");
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }

var ColumnBlock = function ColumnBlock(bm, label) {
  bm.add('column').set({
    label: "\n            ".concat(raw_loader_icons_columns_solid_svg__WEBPACK_IMPORTED_MODULE_0__["default"], "\n            <div>").concat(label, "</div>\n        "),
    category: 'Layout',
    content: {
      type: 'column',
      classes: ['col']
    }
  });
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (function (domc, editor) {
  var defaultType = domc.getType('default');
  var defaultModel = defaultType.model;
  var defaultView = defaultType.view;
  var spans = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];
  domc.addType('column', {
    isComponent: function isComponent(el) {
      var match = false;
      if (el && el.classList) {
        el.classList.forEach(function (klass) {
          if (klass == "col" || klass.match(/^col-/)) {
            match = true;
          }
        });
      }
      if (match) return {
        type: 'column'
      };
    },
    extend: 'default',
    model: {
      defaults: Object.assign({}, defaultModel.prototype.defaults, {
        'custom-name': 'Column',
        draggable: '.row',
        droppable: true,
        resizable: {
          updateTarget: function updateTarget(el, rect, opt) {
            var selected = editor.getSelected();
            if (!selected) {
              return;
            }

            //compute the current screen size (bootstrap semantic)
            var docWidth = el.getRootNode().body.offsetWidth;
            var currentSize = "";
            if (docWidth >= 1200) {
              currentSize = "xl";
            } else if (docWidth >= 992) {
              currentSize = "lg";
            } else if (docWidth >= 768) {
              currentSize = "md";
            } else if (docWidth >= 576) {
              currentSize = "sm";
            }

            //compute the threshold when add on remove 1 col span to the element
            var row = el.parentElement;
            var oneColWidth = row.offsetWidth / 12;
            //the threshold is half one column width
            var threshold = oneColWidth * 0.5;

            //check if we are growing or shrinking the column
            var grow = rect.w > el.offsetWidth + threshold;
            var shrink = rect.w < el.offsetWidth - threshold;
            if (grow || shrink) {
              var testRegexp = new RegExp("^col-" + currentSize + "-\\d{1,2}$");
              if (!currentSize) {
                testRegexp = new RegExp("^col-\\d{1,2}$");
              }
              var found = false;
              var sizesSpans = {};
              var oldSpan = 0;
              var oldClass = null;
              var _iterator = _createForOfIteratorHelper(el.classList),
                _step;
              try {
                for (_iterator.s(); !(_step = _iterator.n()).done;) {
                  var cl = _step.value;
                  if (cl.indexOf("col-") === 0) {
                    var _cl$split = cl.split("-"),
                      _cl$split2 = _slicedToArray(_cl$split, 3),
                      c = _cl$split2[0],
                      size = _cl$split2[1],
                      span = _cl$split2[2];
                    if (!span) {
                      span = size;
                      size = "";
                    }
                    sizesSpans[size] = span;
                    if (size === currentSize) {
                      //found the col-XX-99 class
                      oldClass = cl;
                      oldSpan = span;
                      found = true;
                    }
                  }
                }
              } catch (err) {
                _iterator.e(err);
              } finally {
                _iterator.f();
              }
              if (!found) {
                var sizeOrder = ["", "xs", "sm", "md", "lg", "xl"];
                for (var _i = 0, _sizeOrder = sizeOrder; _i < _sizeOrder.length; _i++) {
                  var s = _sizeOrder[_i];
                  if (sizesSpans[s]) {
                    oldSpan = sizesSpans[s];
                    found = true;
                  }
                  if (s === currentSize) {
                    break;
                  }
                }
              }
              var newSpan = Number(oldSpan);
              if (grow) {
                newSpan++;
              } else {
                newSpan--;
              }
              if (newSpan > 12) {
                newSpan = 12;
              }
              if (newSpan < 1) {
                newSpan = 1;
              }
              var newClass = "col-" + currentSize + "-" + newSpan;
              if (!currentSize) {
                newClass = "col-" + newSpan;
              }
              //update the class
              selected.addClass(newClass);
              if (oldClass && oldClass !== newClass) {
                selected.removeClass(oldClass);
              }
              //notify the corresponding trait to update its value accordingly
              selected.getTrait((currentSize || "xs") + "_width").view.postUpdate();
            }
          },
          tl: 0,
          tc: 0,
          tr: 0,
          cl: 0,
          cr: 1,
          bl: 0,
          bc: 0,
          br: 0
        },
        traits: [{
          id: "xs_width",
          type: 'class_select',
          options: [{
            value: 'col',
            name: 'Equal'
          }, {
            value: 'col-auto',
            name: 'Variable'
          }].concat(_toConsumableArray(spans.map(function (i) {
            return {
              value: 'col-' + i,
              name: i + '/12'
            };
          }))),
          label: 'XS Width'
        }, {
          id: "sm_width",
          type: 'class_select',
          options: [{
            value: '',
            name: 'None'
          }, {
            value: 'col-sm',
            name: 'Equal'
          }, {
            value: 'col-sm-auto',
            name: 'Variable'
          }].concat(_toConsumableArray(spans.map(function (i) {
            return {
              value: 'col-sm-' + i,
              name: i + '/12'
            };
          }))),
          label: 'SM Width'
        }, {
          id: "md_width",
          type: 'class_select',
          options: [{
            value: '',
            name: 'None'
          }, {
            value: 'col-md',
            name: 'Equal'
          }, {
            value: 'col-md-auto',
            name: 'Variable'
          }].concat(_toConsumableArray(spans.map(function (i) {
            return {
              value: 'col-md-' + i,
              name: i + '/12'
            };
          }))),
          label: 'MD Width'
        }, {
          id: "lg_width",
          type: 'class_select',
          options: [{
            value: '',
            name: 'None'
          }, {
            value: 'col-lg',
            name: 'Equal'
          }, {
            value: 'col-lg-auto',
            name: 'Variable'
          }].concat(_toConsumableArray(spans.map(function (i) {
            return {
              value: 'col-lg-' + i,
              name: i + '/12'
            };
          }))),
          label: 'LG Width'
        }, {
          id: "xl_width",
          type: 'class_select',
          options: [{
            value: '',
            name: 'None'
          }, {
            value: 'col-xl',
            name: 'Equal'
          }, {
            value: 'col-xl-auto',
            name: 'Variable'
          }].concat(_toConsumableArray(spans.map(function (i) {
            return {
              value: 'col-xl-' + i,
              name: i + '/12'
            };
          }))),
          label: 'XL Width'
        }, {
          type: 'class_select',
          options: [{
            value: '',
            name: 'None'
          }].concat(_toConsumableArray(spans.map(function (i) {
            return {
              value: 'offset-' + i,
              name: i + '/12'
            };
          }))),
          label: 'XS Offset'
        }, {
          type: 'class_select',
          options: [{
            value: '',
            name: 'None'
          }].concat(_toConsumableArray(spans.map(function (i) {
            return {
              value: 'offset-sm-' + i,
              name: i + '/12'
            };
          }))),
          label: 'SM Offset'
        }, {
          type: 'class_select',
          options: [{
            value: '',
            name: 'None'
          }].concat(_toConsumableArray(spans.map(function (i) {
            return {
              value: 'offset-md-' + i,
              name: i + '/12'
            };
          }))),
          label: 'MD Offset'
        }, {
          type: 'class_select',
          options: [{
            value: '',
            name: 'None'
          }].concat(_toConsumableArray(spans.map(function (i) {
            return {
              value: 'offset-lg-' + i,
              name: i + '/12'
            };
          }))),
          label: 'LG Offset'
        }, {
          type: 'class_select',
          options: [{
            value: '',
            name: 'None'
          }].concat(_toConsumableArray(spans.map(function (i) {
            return {
              value: 'offset-xl-' + i,
              name: i + '/12'
            };
          }))),
          label: 'XL Offset'
        }].concat(defaultModel.prototype.defaults.traits)
      })
    },
    extendView: 'default'
  });
});

/***/ }),

/***/ "./src/components/ColumnBreak.js":
/*!***************************************!*\
  !*** ./src/components/ColumnBreak.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ColumnBreakBlock: () => (/* binding */ ColumnBreakBlock),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var raw_loader_icons_equals_solid_svg__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! raw-loader!../icons/equals-solid.svg */ "../../node_modules/raw-loader/dist/cjs.js!./src/icons/equals-solid.svg");

var ColumnBreakBlock = function ColumnBreakBlock(bm, label) {
  bm.add('column_break').set({
    label: "\n            ".concat(raw_loader_icons_equals_solid_svg__WEBPACK_IMPORTED_MODULE_0__["default"], "\n            <div>").concat(label, "</div>\n        "),
    category: 'Layout',
    content: {
      type: 'column_break'
    }
  });
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (function (domc) {
  var defaultType = domc.getType('default');
  var defaultModel = defaultType.model;
  var defaultView = defaultType.view;
  domc.addType('column_break', {
    isComponent: function isComponent(el) {
      if (el && el.classList && el.classList.contains('w-100')) {
        // also check if parent is `.row`
        return {
          type: 'column_break'
        };
      }
    },
    extend: 'default',
    model: {
      defaults: Object.assign({}, defaultModel.prototype.defaults, {
        'custom-name': 'Column Break',
        tagName: 'div',
        classes: ['w-100']
      })
    },
    extendView: 'default'
  });
});

/***/ }),

/***/ "./src/components/Container.js":
/*!*************************************!*\
  !*** ./src/components/Container.js ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ContainerBlock: () => (/* binding */ ContainerBlock),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var raw_loader_icons_window_maximize_solid_svg__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! raw-loader!../icons/window-maximize-solid.svg */ "../../node_modules/raw-loader/dist/cjs.js!./src/icons/window-maximize-solid.svg");

var ContainerBlock = function ContainerBlock(bm, label) {
  bm.add('container').set({
    label: "\n            ".concat(raw_loader_icons_window_maximize_solid_svg__WEBPACK_IMPORTED_MODULE_0__["default"], "\n            <div>").concat(label, "</div>\n        "),
    category: 'Layout',
    content: {
      type: 'container',
      classes: ['container']
    }
  });
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (function (domc) {
  var defaultType = domc.getType('default');
  var defaultModel = defaultType.model;
  var defaultView = defaultType.view;
  domc.addType('container', {
    isComponent: function isComponent(el) {
      if (el && el.classList && (el.classList.contains('container') || el.classList.contains('container-fluid'))) {
        return {
          type: 'container'
        };
      }
    },
    extend: 'default',
    model: {
      defaults: Object.assign({}, defaultModel.prototype.defaults, {
        'custom-name': 'Container',
        tagName: 'div',
        droppable: true,
        traits: [{
          type: 'class_select',
          options: [{
            value: 'container',
            name: 'Fixed'
          }, {
            value: 'container-fluid',
            name: 'Fluid'
          }],
          label: 'Width'
        }].concat(defaultModel.prototype.defaults.traits)
      })
    },
    extendView: 'default'
  });
});

/***/ }),

/***/ "./src/components/Default.js":
/*!***********************************!*\
  !*** ./src/components/Default.js ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _bootstrap_contexts__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../bootstrap-contexts */ "./src/bootstrap-contexts.js");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils */ "./src/utils.js");
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }


/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (function (domc) {
  var contexts_w_white = _bootstrap_contexts__WEBPACK_IMPORTED_MODULE_0__["default"].concat(['white']);
  var defaultType = domc.getType('default');
  var defaultModel = defaultType.model;
  var defaultView = defaultType.view;
  domc.addType('default', {
    extend: 'default',
    model: {
      defaults: Object.assign({}, defaultModel.prototype.defaults, {
        tagName: 'div',
        traits: [{
          type: 'class_select',
          options: [{
            value: '',
            name: 'Default'
          }].concat(_toConsumableArray(contexts_w_white.map(function (v) {
            return {
              value: 'text-' + v,
              name: (0,_utils__WEBPACK_IMPORTED_MODULE_1__.capitalize)(v)
            };
          }))),
          label: 'Text color'
        }, {
          type: 'class_select',
          options: [{
            value: '',
            name: 'Default'
          }].concat(_toConsumableArray(contexts_w_white.map(function (v) {
            return {
              value: 'bg-' + v,
              name: (0,_utils__WEBPACK_IMPORTED_MODULE_1__.capitalize)(v)
            };
          }))),
          label: 'Background color'
        }, {
          type: 'class_select',
          options: [{
            value: '',
            name: 'Default'
          }, {
            value: 'border',
            name: 'Full'
          }, {
            value: 'border-top-0',
            name: 'No top'
          }, {
            value: 'border-right-0',
            name: 'No right'
          }, {
            value: 'border-bottom-0',
            name: 'No bottom'
          }, {
            value: 'border-left-0',
            name: 'No left'
          }, {
            value: 'border-0',
            name: 'None'
          }],
          label: 'Border width'
        }, {
          type: 'class_select',
          options: [{
            value: '',
            name: 'Default'
          }].concat(_toConsumableArray(contexts_w_white.map(function (v) {
            return {
              value: 'border border-' + v,
              name: (0,_utils__WEBPACK_IMPORTED_MODULE_1__.capitalize)(v)
            };
          }))),
          label: 'Border color'
        }, {
          type: 'class_select',
          options: [{
            value: '',
            name: 'Default'
          }, {
            value: 'rounded',
            name: 'Rounded'
          }, {
            value: 'rounded-top',
            name: 'Rounded top'
          }, {
            value: 'rounded-right',
            name: 'Rounded right'
          }, {
            value: 'rounded-bottom',
            name: 'Rounded bottom'
          }, {
            value: 'rounded-left',
            name: 'Rounded left'
          }, {
            value: 'rounded-circle',
            name: 'Circle'
          }, {
            value: 'rounded-0',
            name: 'Square'
          }],
          label: 'Border radius'
        }, {
          type: 'text',
          label: 'ID',
          name: 'id',
          placeholder: 'my_element'
        }, {
          type: 'text',
          label: 'Title',
          name: 'title',
          placeholder: 'My Element'
        }] //.concat(defaultModel.prototype.defaults.traits)
      }),
      init: function init() {
        var classes = this.get('classes');
        classes.bind('add', this.classesChanged.bind(this));
        classes.bind('change', this.classesChanged.bind(this));
        classes.bind('remove', this.classesChanged.bind(this));
        this.init2();
      },
      /* BS comps use init2, not init */init2: function init2() {},
      /* method where we can check if we should changeType */classesChanged: function classesChanged() {},
      /* replace the comp with a copy of a different type */changeType: function changeType(new_type) {
        var coll = this.collection;
        var at = coll.indexOf(this);
        var button_opts = {
          type: new_type,
          style: this.getStyle(),
          attributes: this.getAttributes(),
          content: this.view.el.innerHTML
        };
        coll.remove(this);
        coll.add(button_opts, {
          at: at
        });
        this.destroy();
      }
    },
    extendView: 'default'
  });
});

/***/ }),

/***/ "./src/components/Dropdown.js":
/*!************************************!*\
  !*** ./src/components/Dropdown.js ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DropDownBlock: () => (/* binding */ DropDownBlock),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var raw_loader_icons_caret_square_down_regular_svg__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! raw-loader!../icons/caret-square-down-regular.svg */ "../../node_modules/raw-loader/dist/cjs.js!./src/icons/caret-square-down-regular.svg");
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
/*
known issues:
- BS dropdown JS isn't attached if you remove the existing toggle and add a new one
*/


var DropDownBlock = function DropDownBlock(bm, label) {
  bm.add('dropdown', {
    label: "\n            ".concat(raw_loader_icons_caret_square_down_regular_svg__WEBPACK_IMPORTED_MODULE_0__["default"], "\n            <div>").concat(label, "</div>\n        "),
    category: 'Components',
    content: {
      type: 'dropdown'
    }
  });
  /*bm.add('dropdown_menu', {
    label: c.labels.dropdown_menu,
    category: 'Components',
    attributes: {class:'fa fa-caret-down'},
    content: {
      type: 'dropdown_menu'
    }
  });
  bm.add('dropdown_item', {
    label: c.labels.dropdown_item,
    category: 'Components',
    attributes: {class:'fa fa-link'},
    content: {
      type: 'dropdown_item'
    }
  });*/
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (function (editor) {
  var comps = editor.DomComponents;
  var defaultType = comps.getType('default');
  var defaultModel = defaultType.model;
  var defaultView = defaultType.view;
  function hasEvent(comp) {
    var eca = comp._events['change:attributes'];
    if (!eca) return false;
    return eca.filter(function (e) {
      return e.callback.name === 'setupToggle';
    }).length !== 0;
  }
  comps.addType('dropdown', {
    isComponent: function isComponent(el) {
      if (el && el.classList && el.classList.contains('dropdown')) {
        return {
          type: 'dropdown'
        };
      }
    },
    extend: 'default',
    model: {
      defaults: _objectSpread(_objectSpread({}, defaultModel.prototype.defaults), {}, {
        'custom-name': 'Dropdown',
        classes: ['dropdown'],
        droppable: 'a, button, .dropdown-menu',
        traits: [{
          type: 'select',
          label: 'Initial state',
          name: 'initial_state',
          options: [{
            value: '',
            name: 'Closed'
          }, {
            value: 'show',
            name: 'Open'
          }]
        }].concat(defaultModel.prototype.defaults.traits)
      }),
      init2: function init2() {
        var toggle = {
          type: 'button',
          content: 'Click to toggle',
          classes: ['btn', 'dropdown-toggle']
        };
        var toggle_comp = this.append(toggle)[0];
        var menu = {
          type: 'dropdown_menu'
        };
        var menu_comp = this.append(menu)[0];
        this.setupToggle(null, null, {
          force: true
        });
        var comps = this.components();
        comps.bind('add', this.setupToggle.bind(this));
        comps.bind('remove', this.setupToggle.bind(this));
        var classes = this.get('classes');
        classes.bind('add', this.setupToggle.bind(this));
        classes.bind('change', this.setupToggle.bind(this));
        classes.bind('remove', this.setupToggle.bind(this));
      },
      setupToggle: function setupToggle(a, b) {
        var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
        var toggle = this.components().filter(function (c) {
          return c.getAttributes()["class"].split(' ').includes('dropdown-toggle');
        })[0];
        var menu = this.components().filter(function (c) {
          return c.getAttributes()["class"].split(' ').includes('dropdown-menu');
        })[0];
        if (options.force !== true && options.ignore === true) {
          return;
        }
        if (toggle && menu) {
          // setup event listeners if they aren't set
          if (!hasEvent(toggle)) {
            this.listenTo(toggle, 'change:attributes', this.setupToggle);
          }
          if (!hasEvent(menu)) {
            this.listenTo(menu, 'change:attributes', this.setupToggle);
          }

          // setup toggle
          var toggle_attrs = toggle.getAttributes();
          toggle_attrs['role'] = 'button';
          var menu_attrs = menu.getAttributes();
          if (!toggle_attrs.hasOwnProperty('data-toggle')) {
            toggle_attrs['data-toggle'] = 'dropdown';
          }
          if (!toggle_attrs.hasOwnProperty('aria-haspopup')) {
            toggle_attrs['aria-haspopup'] = true;
          }
          toggle.set('attributes', toggle_attrs, {
            ignore: true
          });

          // setup menu
          // toggle needs ID for aria-labelled on the menu, could alert here
          if (toggle_attrs.hasOwnProperty('id')) {
            menu_attrs['aria-labelledby'] = toggle_attrs.id;
          } else {
            delete menu_attrs['aria-labelledby'];
          }
          menu.set('attributes', menu_attrs, {
            ignore: true
          });
        }
      },
      updated: function updated(property, value) {
        if (value.hasOwnProperty('initial_state')) {
          var menu = this.components().filter(function (c) {
            return c.getAttributes()["class"].split(' ').includes('dropdown-menu');
          })[0];
          var attrs = menu.getAttributes();
          var classes = attrs["class"].split(' ');
          if (classes.includes('show')) {
            // Close the menu
            attrs['aria-expanded'] = false;
            menu.removeClass('show');
          } else {
            // Open the menu
            attrs['aria-expanded'] = true;
            menu.addClass('show');
          }
        }
      }
    },
    extendView: 'default'
  });

  // need aria-labelledby to equal dropdown-toggle id
  // need to insert dropdown-item class on links when added
  comps.addType('dropdown_menu', {
    isComponent: function isComponent(el) {
      if (el && el.classList && el.classList.contains('dropdown-menu')) {
        return {
          type: 'dropdown_menu'
        };
      }
    },
    extend: 'default',
    model: {
      defaults: Object.assign({}, defaultModel.prototype.defaults, {
        'custom-name': 'Dropdown Menu',
        classes: ['dropdown-menu'],
        draggable: '.dropdown',
        droppable: true
      }),
      init2: function init2() {
        var header = {
          type: 'header',
          tagName: 'h6',
          classes: ['dropdown-header'],
          content: 'Dropdown header'
        };
        var link = {
          type: 'link',
          classes: ['dropdown-item'],
          content: 'Dropdown item'
        };
        var divider = {
          type: 'default',
          classes: ['dropdown-divider']
        };
        this.append(header);
        this.append(link);
        this.append(divider);
        this.append(link);
      }
    },
    view: defaultView
  });
});

/***/ }),

/***/ "./src/components/FileInput.js":
/*!*************************************!*\
  !*** ./src/components/FileInput.js ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   FileInputBlock: () => (/* binding */ FileInputBlock),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils */ "./src/utils.js");
/* harmony import */ var raw_loader_icons_file_input_svg__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! raw-loader!../icons/file-input.svg */ "../../node_modules/raw-loader/dist/cjs.js!./src/icons/file-input.svg");
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }


var FileInputBlock = function FileInputBlock(bm, label) {
  bm.add('file-input', {
    label: "\n            ".concat(raw_loader_icons_file_input_svg__WEBPACK_IMPORTED_MODULE_1__["default"], "\n            <div>").concat(label, "</div>\n        "),
    category: 'Forms',
    content: "<input type=\"file\" name=\"file\" class=\"form-control-file\" id=\"exampleFormControlFile1\">"
  });
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (function (dc, traits) {
  var config = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  var defaultType = dc.getType('default');
  var defaultModel = defaultType.model;
  var defaultView = defaultType.view;
  var type = 'file-input';
  dc.addType(type, {
    isComponent: function isComponent(el) {
      if (el.tagName === 'INPUT' && (0,_utils__WEBPACK_IMPORTED_MODULE_0__.elHasClass)(el, 'form-control-file')) {
        return {
          type: type
        };
      }
    },
    extend: 'default',
    model: {
      defaults: _objectSpread(_objectSpread({}, defaultModel.prototype.defaults), {}, {
        'custom-name': config.labels.input,
        tagName: 'input',
        draggable: 'form .form-group',
        droppable: false,
        traits: [traits.name, traits.required, {
          type: 'checkbox',
          label: config.labels.trait_multiple,
          name: 'multiple'
        }]
      })
    },
    extendView: 'default'
  });
});

/***/ }),

/***/ "./src/components/Form.js":
/*!********************************!*\
  !*** ./src/components/Form.js ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   FormBlock: () => (/* binding */ FormBlock),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var raw_loader_icons_form_svg__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! raw-loader!../icons/form.svg */ "../../node_modules/raw-loader/dist/cjs.js!./src/icons/form.svg");

var FormBlock = function FormBlock(bm, label) {
  bm.add('form', {
    label: "\n      ".concat(raw_loader_icons_form_svg__WEBPACK_IMPORTED_MODULE_0__["default"], "\n      <div>").concat(label, "</div>"),
    category: 'Forms',
    content: {
      type: 'form'
    }
    //     `
    //     <form>
    //       <div class="form-group">
    //         <label>Name</label>
    //         <input name="name" placeholder="Type here your name" class="form-control"/>
    //       </div>
    //       <div class="form-group">
    //         <label>Email</label>
    //         <input name="email" type="email" placeholder="Type here your email" class="form-control"/>
    //       </div>
    //       <div class="form-check">
    //         <input name="sex" type="checkbox" class="form-check-input" value="M">
    //         <label class="form-check-label">M</label>
    //       </div>
    //       <div class="form-check">
    //         <input name="sex" type="checkbox" class="form-check-input" value="F">
    //         <label class="form-check-label">F</label>
    //       </div>
    //       <div class="form-group">
    //         <label>Message</label>
    //         <textarea name="message" class="form-control"></textarea>
    //       </div>
    //       <div class="form-group">
    //         <button type="submit" class="btn btn-primary">Send</button>
    //       </div>
    //     </form>
    //   `,
  });
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (function (dc, traits) {
  var config = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  var defaultType = dc.getType('default');
  var defaultModel = defaultType.model;
  var defaultView = defaultType.view;
  var actionTrait;

  // If the formPredefinedActions is set in the config you can add a dropdown menu to the actions trait
  if (config.formPredefinedActions && config.formPredefinedActions.length) {
    actionTrait = {
      type: 'select',
      label: config.labels.trait_action,
      name: 'action',
      options: []
    };
    config.formPredefinedActions.forEach(function (action) {
      actionTrait.options.push({
        value: action.value,
        name: action.name
      });
    });
  } else {
    actionTrait = {
      label: config.labels.trait_action,
      name: 'action'
    };
  }
  dc.addType('form', {
    isComponent: function isComponent(el) {
      if (el.tagName === 'FORM') {
        return {
          type: 'form'
        };
      }
    },
    extend: 'default',
    model: {
      defaults: {
        tagName: 'form',
        droppable: ':not(form)',
        draggable: ':not(form)',
        traits: [{
          type: 'select',
          label: config.labels.trait_enctype,
          name: 'enctype',
          options: [{
            value: 'application/x-www-form-urlencoded',
            name: 'application/x-www-form-urlencoded (default)'
          }, {
            value: 'multipart/form-data',
            name: 'multipart/form-data'
          }, {
            value: 'text/plain',
            name: 'text/plain'
          }]
        }, {
          type: 'select',
          label: config.labels.trait_method,
          name: 'method',
          options: [{
            value: 'post',
            name: 'POST'
          }, {
            value: 'get',
            name: 'GET'
          }]
        }, actionTrait]
      },
      init: function init() {
        this.listenTo(this, 'change:formState', this.updateFormState);
      },
      updateFormState: function updateFormState() {
        var state = this.get('formState');
        switch (state) {
          case 'success':
            this.showState('success');
            break;
          case 'error':
            this.showState('error');
            break;
          default:
            this.showState('normal');
        }
      },
      showState: function showState(state) {
        var st = state || 'normal';
        var failVis, successVis;
        if (st === 'success') {
          failVis = 'none';
          successVis = 'block';
        } else if (st === 'error') {
          failVis = 'block';
          successVis = 'none';
        } else {
          failVis = 'none';
          successVis = 'none';
        }
        var successModel = this.getStateModel('success');
        var failModel = this.getStateModel('error');
        var successStyle = successModel.getStyle();
        var failStyle = failModel.getStyle();
        successStyle.display = successVis;
        failStyle.display = failVis;
        successModel.setStyle(successStyle);
        failModel.setStyle(failStyle);
      },
      getStateModel: function getStateModel(state) {
        var st = state || 'success';
        var stateName = 'form-state-' + st;
        var stateModel;
        var comps = this.get('components');
        for (var i = 0; i < comps.length; i++) {
          var model = comps.models[i];
          if (model.get('form-state-type') === st) {
            stateModel = model;
            break;
          }
        }
        if (!stateModel) {
          var contentStr = formMsgSuccess;
          if (st === 'error') {
            contentStr = formMsgError;
          }
          stateModel = comps.add({
            'form-state-type': st,
            type: 'text',
            removable: false,
            copyable: false,
            draggable: false,
            attributes: {
              'data-form-state': st
            },
            content: contentStr
          });
        }
        return stateModel;
      }
    },
    extendView: 'default',
    view: {
      events: {
        submit: function submit(e) {
          e.preventDefault();
        }
      }
    }
  });
});

/***/ }),

/***/ "./src/components/Header.js":
/*!**********************************!*\
  !*** ./src/components/Header.js ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   HeaderBlock: () => (/* binding */ HeaderBlock),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var raw_loader_icons_heading_solid_svg__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! raw-loader!../icons/heading-solid.svg */ "../../node_modules/raw-loader/dist/cjs.js!./src/icons/heading-solid.svg");

var HeaderBlock = function HeaderBlock(bm, label) {
  bm.add('header', {
    label: "\n            ".concat(raw_loader_icons_heading_solid_svg__WEBPACK_IMPORTED_MODULE_0__["default"], "\n            <div>").concat(label, "</div>\n        "),
    category: 'Typography',
    content: {
      type: 'header',
      content: 'Bootstrap heading'
    }
  });
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (function (domc) {
  var textType = domc.getType('text');
  var textModel = textType.model;
  var textView = textType.view;
  domc.addType('header', {
    isComponent: function isComponent(el) {
      if (el && ['H1', 'H2', 'H3', 'H4', 'H5', 'H6'].includes(el.tagName)) {
        return {
          type: 'header'
        };
      }
    },
    extend: 'text',
    model: {
      defaults: Object.assign({}, textModel.prototype.defaults, {
        'custom-name': 'Header',
        tagName: 'h1',
        traits: [{
          type: 'select',
          options: [{
            value: 'h1',
            name: 'One (largest)'
          }, {
            value: 'h2',
            name: 'Two'
          }, {
            value: 'h3',
            name: 'Three'
          }, {
            value: 'h4',
            name: 'Four'
          }, {
            value: 'h5',
            name: 'Five'
          }, {
            value: 'h6',
            name: 'Six (smallest)'
          }],
          label: 'Size',
          name: 'tagName',
          changeProp: 1
        }, {
          type: 'class_select',
          options: [{
            value: '',
            name: 'None'
          }, {
            value: 'display-1',
            name: 'One (largest)'
          }, {
            value: 'display-2',
            name: 'Two '
          }, {
            value: 'display-3',
            name: 'Three '
          }, {
            value: 'display-4',
            name: 'Four (smallest)'
          }],
          label: 'Display Heading'
        }].concat(textModel.prototype.defaults.traits)
      })
    },
    extendView: 'text'
  });
});

/***/ }),

/***/ "./src/components/Image.js":
/*!*********************************!*\
  !*** ./src/components/Image.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ImageBlock: () => (/* binding */ ImageBlock),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var raw_loader_icons_image_solid_svg__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! raw-loader!../icons/image-solid.svg */ "../../node_modules/raw-loader/dist/cjs.js!./src/icons/image-solid.svg");

var ImageBlock = function ImageBlock(bm, label) {
  bm.add('bs-image', {
    label: "\n            ".concat(raw_loader_icons_image_solid_svg__WEBPACK_IMPORTED_MODULE_0__["default"], "\n            <div>").concat(label, "</div>\n        "),
    category: 'Media',
    content: {
      type: 'bs-image'
    }
  });
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (function (domComponent) {
  var img_src_default = 'https://dummyimage.com/800x500/999/222';
  var imageType = domComponent.getType('image');
  var model = imageType.model;
  var view = imageType.view;
  var type = 'bs-image';
  domComponent.addType(type, {
    isComponent: function isComponent(el) {
      if (el && el.tagName === 'IMG') {
        return {
          type: type
        };
      }
    },
    extend: 'image',
    model: {
      defaults: Object.assign({}, model.prototype.defaults, {
        'custom-name': 'Image',
        tagName: 'img',
        resizable: 1,
        attributes: {
          src: img_src_default
        },
        classes: ['img-fluid'],
        traits: [{
          type: 'text',
          label: 'Source (URL)',
          name: 'src'
        }, {
          type: 'text',
          label: 'Alternate text',
          name: 'alt'
        }].concat(model.prototype.defaults.traits)
      })
    },
    extendView: 'image'
  });
});

/***/ }),

/***/ "./src/components/Input.js":
/*!*********************************!*\
  !*** ./src/components/Input.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   InputBlock: () => (/* binding */ InputBlock),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var raw_loader_icons_input_svg__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! raw-loader!../icons/input.svg */ "../../node_modules/raw-loader/dist/cjs.js!./src/icons/input.svg");
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }

var InputBlock = function InputBlock(bm, label) {
  bm.add('input', {
    label: "\n      ".concat(raw_loader_icons_input_svg__WEBPACK_IMPORTED_MODULE_0__["default"], "\n      <div>").concat(label, "</div>"),
    category: 'Forms',
    content: '<input name="input1" class="form-control"/>'
  });
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (function (dc, traits) {
  var config = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  var defaultType = dc.getType('default');
  var defaultModel = defaultType.model;
  var defaultView = defaultType.view;
  dc.addType('input', {
    isComponent: function isComponent(el) {
      if (el.tagName === 'INPUT') {
        return {
          type: 'input'
        };
      }
    },
    extend: 'default',
    model: {
      defaults: _objectSpread(_objectSpread({}, defaultModel.prototype.defaults), {}, {
        'custom-name': config.labels.input,
        tagName: 'input',
        draggable: 'form, form *',
        droppable: false,
        traits: [traits.value, traits.name, traits.placeholder, {
          label: config.labels.trait_type,
          type: 'select',
          name: 'type',
          options: [{
            value: 'text',
            name: config.labels.type_text
          }, {
            value: 'email',
            name: config.labels.type_email
          }, {
            value: 'password',
            name: config.labels.type_password
          }, {
            value: 'number',
            name: config.labels.type_number
          }, {
            value: 'date',
            name: config.labels.type_date
          }, {
            value: 'hidden',
            name: config.labels.type_hidden
          }]
        }, traits.required]
      })
    },
    extendView: 'default'
  });
});

/***/ }),

/***/ "./src/components/InputGroup.js":
/*!**************************************!*\
  !*** ./src/components/InputGroup.js ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   InputGroupBlock: () => (/* binding */ InputGroupBlock),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var raw_loader_icons_form_group_svg__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! raw-loader!../icons/form-group.svg */ "../../node_modules/raw-loader/dist/cjs.js!./src/icons/form-group.svg");
/* harmony import */ var raw_loader_icons_input_group_svg__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! raw-loader!../icons/input-group.svg */ "../../node_modules/raw-loader/dist/cjs.js!./src/icons/input-group.svg");
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }


var InputGroupBlock = function InputGroupBlock(bm, label, c) {
  bm.add('form_group_input', {
    label: "\n      ".concat(raw_loader_icons_form_group_svg__WEBPACK_IMPORTED_MODULE_0__["default"], "\n      <div>").concat(label, "</div>"),
    category: 'Forms',
    content: "\n      <div class=\"form-group\">\n        <label>Name</label>\n        <input name=\"name\" placeholder=\"Type here your name\" class=\"form-control\"/>\n      </div>\n      "
  });
  bm.add('input_group', {
    label: "\n      ".concat(raw_loader_icons_input_group_svg__WEBPACK_IMPORTED_MODULE_1__["default"], "\n      <div>").concat(label, "</div>"),
    category: 'Forms',
    content: "\n      <div class=\"input-group\">\n        <div class=\"input-group-prepend\">\n          <span class=\"input-group-text\">$</span>\n        </div>\n        <input name=\"input1\" type=\"text\" class=\"form-control\" aria-label=\"Amount (to the nearest dollar)\">\n        <div class=\"input-group-append\">\n          <span class=\"input-group-text\">.00</span>\n        </div>\n      </div>\n      "
  });
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (function (dc, traits) {
  var config = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  var defaultType = dc.getType('default');
  var defaultModel = defaultType.model;
  var defaultView = defaultType.view;
  dc.addType('input_group', {
    isComponent: function isComponent(el) {
      if (el && el.classList && el.classList.contains('form_group_input')) {
        return {
          type: 'form_group_input'
        };
      }
    },
    extend: 'default',
    model: {
      defaults: _objectSpread(_objectSpread({}, defaultModel.prototype.defaults), {}, {
        'custom-name': config.labels.input_group,
        tagName: 'div',
        traits: []
      })
    },
    extendView: 'default'
  });
});

/***/ }),

/***/ "./src/components/JsfInput.js":
/*!************************************!*\
  !*** ./src/components/JsfInput.js ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   JsfInputBlock: () => (/* binding */ JsfInputBlock),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var raw_loader_icons_input_svg__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! raw-loader!../icons/input.svg */ "../../node_modules/raw-loader/dist/cjs.js!./src/icons/input.svg");
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }

var JsfInputBlock = function JsfInputBlock(bm, label) {
  bm.add('h:inputText', {
    label: "\n      ".concat(raw_loader_icons_input_svg__WEBPACK_IMPORTED_MODULE_0__["default"], "\n      <div>").concat(label, "</div>"),
    category: 'jsfForms',
    content: '<h:inputText data-gjs-type="jsfInputText" class="form-control"></h:inputText>'
  });
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (function (dc, traits) {
  var config = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  var defaultType = dc.getType('input');
  var defaultModel = defaultType.model;
  dc.addType('jsfInputText', {
    isComponent: function isComponent(el) {
      console.log("### In jsfInputText.IsComponent: el.tagName: ");
      console.log(el);
      if (el.hasOwnProperty('tagName')) console.log('## ' + el.tagName);else console.log("## no tagName");
      console.log("## is h:inputtext: " + (el && el.hasOwnProperty('tagName') && el.tagName === 'H:INPUTTEXT'));
      // console.log(el.classList);

      if (el && el.hasOwnProperty('tagName') && el.tagName === 'H:INPUTTEXT') {
        console.log("### In jsfInputText.IsComponent: result is true ");
        return true; // {type: 'jsfInputText'};
      }
      console.log("### In jsfInputText.IsComponent: result is false ");
    },
    extend: 'input',
    model: {
      defaults: _objectSpread(_objectSpread({}, defaultModel.prototype.defaults), {}, {
        tagName: 'h:inputText',
        'custom-name': config.labels.jsfInputText,
        draggable: 'form, form *',
        droppable: false,
        traits: [traits.value, traits.name, traits.placeholder, traits.required, {
          label: config.labels.trait_value,
          type: 'text',
          name: 'type'
          // options: [
          //     {value: 'text', name: config.labels.type_text},
          //     {value: 'email', name: config.labels.type_email},
          //     {value: 'password', name: config.labels.type_password},
          //     {value: 'number', name: config.labels.type_number},
          //     {value: 'date', name: config.labels.type_date},
          //     {value: 'hidden', name: config.labels.type_hidden},
          // ]
        }]
      })
    },
    extendView: 'input',
    view: {
      tagName: 'input',
      attributes: {
        type: 'text'
      }
    }
  });
});

/***/ }),

/***/ "./src/components/Label.js":
/*!*********************************!*\
  !*** ./src/components/Label.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   LabelBlock: () => (/* binding */ LabelBlock),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var raw_loader_icons_label_svg__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! raw-loader!../icons/label.svg */ "../../node_modules/raw-loader/dist/cjs.js!./src/icons/label.svg");
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }

var LabelBlock = function LabelBlock(bm, label) {
  bm.add('label', {
    label: "\n      ".concat(raw_loader_icons_label_svg__WEBPACK_IMPORTED_MODULE_0__["default"], "\n      <div>").concat(label, "</div>"),
    category: 'Forms',
    content: '<label>Label</label>'
  });
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (function (dc, traits) {
  var config = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  var textType = dc.getType('text');
  var textModel = textType.model;
  var textView = textType.view;
  dc.addType('label', {
    isComponent: function isComponent(el) {
      if (el.tagName == 'LABEL') {
        return {
          type: 'label'
        };
      }
    },
    extend: 'text',
    model: {
      defaults: _objectSpread(_objectSpread({}, textModel.prototype.defaults), {}, {
        'custom-name': config.labels.label,
        tagName: 'label',
        traits: [traits["for"]]
      })
    },
    extendView: 'text'
  });
});

/***/ }),

/***/ "./src/components/Link.js":
/*!********************************!*\
  !*** ./src/components/Link.js ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   LinkBlock: () => (/* binding */ LinkBlock),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var raw_loader_icons_link_solid_svg__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! raw-loader!../icons/link-solid.svg */ "../../node_modules/raw-loader/dist/cjs.js!./src/icons/link-solid.svg");
/*
known issues:
- BS dropdown JS isn't attached if you remove the existing toggle and add a new one
*/


var LinkBlock = function LinkBlock(bm, label) {
  bm.add('link', {
    label: "\n            ".concat(raw_loader_icons_link_solid_svg__WEBPACK_IMPORTED_MODULE_0__["default"], "\n            <div>").concat(label, "</div>\n        "),
    category: 'Basic',
    content: {
      type: 'link',
      content: 'Link text'
    }
  });
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (function (editor) {
  var comps = editor.DomComponents;
  var textType = comps.getType('text');
  var textModel = textType.model;
  var linkType = comps.getType('link');
  var linkView = linkType.view;
  comps.addType('link', {
    isComponent: function isComponent(el) {
      if (el && el.tagName && el.tagName === 'A') {
        return {
          type: 'link'
        };
      }
    },
    extend: 'text',
    model: {
      defaults: Object.assign({}, textModel.prototype.defaults, {
        'custom-name': 'Link',
        tagName: 'a',
        droppable: true,
        editable: true,
        traits: [{
          type: 'text',
          label: 'Href',
          name: 'href',
          placeholder: 'https://www.grapesjs.com'
        }, {
          type: 'select',
          options: [{
            value: '',
            name: 'This window'
          }, {
            value: '_blank',
            name: 'New window'
          }],
          label: 'Target',
          name: 'target'
        }, {
          type: 'select',
          options: [{
            value: '',
            name: 'None'
          }, {
            value: 'button',
            name: 'Self'
          }, {
            value: 'collapse',
            name: 'Collapse'
          }, {
            value: 'dropdown',
            name: 'Dropdown'
          }],
          label: 'Toggles',
          name: 'data-toggle',
          changeProp: 1
        }].concat(textModel.prototype.defaults.traits)
      }),
      init2: function init2() {
        //textModel.prototype.init.call(this);
        this.listenTo(this, 'change:data-toggle', this.setupToggle);
        this.listenTo(this, 'change:attributes', this.setupToggle); // for when href changes
      },
      setupToggle: function setupToggle(a, b) {
        var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
        // TODO this should be in the dropdown comp and not the link comp
        if (options.ignore === true && options.force !== true) {
          return;
        }
        console.log('setup toggle');
        var attrs = this.getAttributes();
        var href = attrs.href;
        // old attributes are not removed from DOM even if deleted...
        delete attrs['data-toggle'];
        delete attrs['aria-expanded'];
        delete attrs['aria-controls'];
        delete attrs['aria-haspopup'];
        if (href && href.length > 0 && href.match(/^#/)) {
          console.log('link has href');
          // find the el where id == link href
          var els = this.em.get('Editor').DomComponents.getWrapper().find(href);
          if (els.length > 0) {
            console.log('referenced el found');
            var el = els[0]; // should only be one el with this ID
            var el_attrs = el.getAttributes();
            //delete el_attrs['aria-labelledby'];
            var el_classes = el_attrs["class"];
            if (el_classes) {
              console.log('el has classes');
              var el_classes_list = el_classes.split(' ');
              var includes = ['collapse', 'dropdown-menu'];
              var intersection = el_classes_list.filter(function (x) {
                return includes.includes(x);
              });
              if (intersection.length) {
                console.log('link data-toggle matches el class');
                switch (intersection[0]) {
                  case 'collapse':
                    attrs['data-toggle'] = 'collapse';
                    break;
                }
                attrs['aria-expanded'] = el_classes_list.includes('show');
                if (intersection[0] === 'collapse') {
                  attrs['aria-controls'] = href.substring(1);
                }
              }
            }
          }
        }
        this.set('attributes', attrs, {
          ignore: true
        });
      },
      classesChanged: function classesChanged(e) {
        console.log('classes changed');
        if (this.attributes.type === 'link') {
          if (this.attributes.classes.filter(function (klass) {
            return klass.id === 'btn';
          }).length > 0) {
            this.changeType('button');
          }
        }
      }
    },
    extendView: 'link'
  });
});

/***/ }),

/***/ "./src/components/MediaObject.js":
/*!***************************************!*\
  !*** ./src/components/MediaObject.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   MediaObjectBlock: () => (/* binding */ MediaObjectBlock),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var raw_loader_icons_columns_solid_svg__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! raw-loader!../icons/columns-solid.svg */ "../../node_modules/raw-loader/dist/cjs.js!./src/icons/columns-solid.svg");

var MediaObjectBlock = function MediaObjectBlock(bm, label) {
  bm.add('media_object').set({
    label: "\n            ".concat(raw_loader_icons_columns_solid_svg__WEBPACK_IMPORTED_MODULE_0__["default"], "\n            <div>").concat(label, "</div>\n        "),
    category: 'Layout',
    content: "<div class=\"media\">\n                 <img class=\"mr-3\" src=\"\">\n                 <div class=\"media-body\">\n                 <h5>Media heading</h5>\n                 <div>Cras sit amet nibh libero, in gravida nulla. Nulla vel metus scelerisque ante sollicitudin. Cras purus odio, vestibulum in vulputate at, tempus viverra turpis. Fusce condimentum nunc ac nisi vulputate fringilla. Donec lacinia congue felis in faucibus.</div>\n                 </div>\n                 </div>"
  });
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (function (domc) {
  var defaultType = domc.getType('default');
  var defaultModel = defaultType.model;
  var defaultView = defaultType.view;
  domc.addType('media_object', {
    isComponent: function isComponent(el) {
      if (el && el.classList && el.classList.contains('media')) {
        return {
          type: 'media'
        };
      }
    },
    extend: 'default',
    model: {
      defaults: Object.assign({}, defaultModel.prototype.defaults, {
        'custom-name': 'Media Object',
        tagName: 'div',
        classes: ['media']
      })
    },
    extendView: 'default'
  });
  domc.addType('media_body', {
    isComponent: function isComponent(el) {
      if (el && el.classList && el.classList.contains('media-body')) {
        return {
          type: 'media_body'
        };
      }
    },
    extend: 'default',
    model: {
      defaults: Object.assign({}, defaultModel.prototype.defaults, {
        'custom-name': 'Media Body',
        tagName: 'div',
        classes: ['media-body']
      })
    },
    extendView: 'default'
  });
});

/***/ }),

/***/ "./src/components/Paragraph.js":
/*!*************************************!*\
  !*** ./src/components/Paragraph.js ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ParagraphBlock: () => (/* binding */ ParagraphBlock),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var raw_loader_icons_paragraph_solid_svg__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! raw-loader!../icons/paragraph-solid.svg */ "../../node_modules/raw-loader/dist/cjs.js!./src/icons/paragraph-solid.svg");

var ParagraphBlock = function ParagraphBlock(bm, label) {
  bm.add('paragraph', {
    label: "\n            ".concat(raw_loader_icons_paragraph_solid_svg__WEBPACK_IMPORTED_MODULE_0__["default"], "\n            <div>").concat(label, "</div>\n        "),
    category: 'Typography',
    content: {
      type: 'paragraph',
      content: 'Vivamus sagittis lacus vel augue laoreet rutrum faucibus dolor auctor. Duis mollis, est non commodo luctus.'
    }
  });
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (function (domc) {
  var textType = domc.getType('text');
  var textModel = textType.model;
  var textView = textType.view;
  domc.addType('paragraph', {
    isComponent: function isComponent(el) {
      if (el && el.tagName && el.tagName === 'P') {
        return {
          type: 'paragraph'
        };
      }
    },
    extend: 'text',
    model: {
      defaults: Object.assign({}, textModel.prototype.defaults, {
        'custom-name': 'Paragraph',
        tagName: 'p',
        traits: [{
          type: 'class_select',
          options: [{
            value: '',
            name: 'No'
          }, {
            value: 'lead',
            name: 'Yes'
          }],
          label: 'Lead?'
        }].concat(textModel.prototype.defaults.traits)
      })
    },
    extendView: 'text'
  });
});

/***/ }),

/***/ "./src/components/Radio.js":
/*!*********************************!*\
  !*** ./src/components/Radio.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   RadioBlock: () => (/* binding */ RadioBlock),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var raw_loader_icons_dot_circle_regular_svg__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! raw-loader!../icons/dot-circle-regular.svg */ "../../node_modules/raw-loader/dist/cjs.js!./src/icons/dot-circle-regular.svg");
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }

var RadioBlock = function RadioBlock(bm, label) {
  bm.add('radio', {
    label: "\n            ".concat(raw_loader_icons_dot_circle_regular_svg__WEBPACK_IMPORTED_MODULE_0__["default"], "\n            <div>").concat(label, "</div>\n        "),
    category: 'Forms',
    content: "\n        <div class=\"form-check\">\n          <input class=\"form-check-input\" type=\"radio\" name=\"exampleRadios\" id=\"exampleRadios1\" value=\"option1\" checked>\n          <label class=\"form-check-label\" for=\"exampleRadios1\">\n            Default radio\n          </label>\n        </div>\n      "
  });
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (function (dc, traits) {
  var config = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  var checkType = dc.getType('checkbox');

  // RADIO
  dc.addType('radio', {
    isComponent: function isComponent(el) {
      if (el.tagName === 'INPUT' && el.type === 'radio') {
        return {
          type: 'radio'
        };
      }
    },
    extend: 'checkbox',
    model: {
      defaults: _objectSpread(_objectSpread({}, checkType.model.prototype.defaults), {}, {
        'custom-name': config.labels.radio,
        attributes: {
          type: 'radio'
        }
      })
    },
    extendView: 'checkbox'
  });
});

/***/ }),

/***/ "./src/components/Row.js":
/*!*******************************!*\
  !*** ./src/components/Row.js ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   RowBlock: () => (/* binding */ RowBlock),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var raw_loader_icons_window_maximize_solid_svg__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! raw-loader!../icons/window-maximize-solid.svg */ "../../node_modules/raw-loader/dist/cjs.js!./src/icons/window-maximize-solid.svg");

var RowBlock = function RowBlock(bm, label) {
  bm.add('row').set({
    label: "\n            ".concat(raw_loader_icons_window_maximize_solid_svg__WEBPACK_IMPORTED_MODULE_0__["default"], "\n            <div>").concat(label, "</div>\n        "),
    category: 'Layout',
    content: {
      type: 'row',
      classes: ['row']
    }
  });
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (function (domc) {
  var defaultType = domc.getType('default');
  var defaultModel = defaultType.model;
  var defaultView = defaultType.view;
  domc.addType('row', {
    isComponent: function isComponent(el) {
      if (el && el.classList && el.classList.contains('row')) {
        return {
          type: 'row'
        };
      }
    },
    extend: 'default',
    model: {
      defaults: Object.assign({}, defaultModel.prototype.defaults, {
        'custom-name': 'Row',
        tagName: 'div',
        draggable: '.container, .container-fluid',
        droppable: true,
        traits: [{
          type: 'class_select',
          options: [{
            value: '',
            name: 'Yes'
          }, {
            value: 'no-gutters',
            name: 'No'
          }],
          label: 'Gutters?'
        }].concat(defaultModel.prototype.defaults.traits)
      })
    },
    extendView: 'default'
  });
});

/***/ }),

/***/ "./src/components/Select.js":
/*!**********************************!*\
  !*** ./src/components/Select.js ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   SelectBlock: () => (/* binding */ SelectBlock),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var raw_loader_icons_select_input_svg__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! raw-loader!../icons/select-input.svg */ "../../node_modules/raw-loader/dist/cjs.js!./src/icons/select-input.svg");
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }

var SelectBlock = function SelectBlock(bm, label) {
  bm.add('select', {
    label: "\n      ".concat(raw_loader_icons_select_input_svg__WEBPACK_IMPORTED_MODULE_0__["default"], "\n      <div>").concat(label, "</div>"),
    category: 'Forms',
    content: "<select class=\"form-control\" name=\"select1\">\n        ".concat(label ? "<option value=\"\">".concat(label, "</option>") : '', "\n        <option value=\"1\">").concat(label, " 1</option>\n        </select>")
  });
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (function (editor, dc, traits) {
  var config = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
  var defaultType = dc.getType('default');
  var defaultModel = defaultType.model;
  var inputType = dc.getType('input');
  var inputModel = inputType.model;
  var preventDefaultClick = function preventDefaultClick() {
    return defaultType.view.extend({
      events: {
        'mousedown': 'handleClick'
      },
      handleClick: function handleClick(e) {
        e.preventDefault();
      }
    });
  };

  // SELECT
  dc.addType('select', {
    isComponent: function isComponent(el) {
      if (el.tagName === 'SELECT') {
        return {
          type: 'select'
        };
      }
    },
    extend: 'default',
    model: {
      defaults: _objectSpread(_objectSpread({}, inputModel.prototype.defaults), {}, {
        'custom-name': config.labels.select,
        tagName: 'select',
        traits: [traits.name, {
          label: config.labels.trait_options,
          type: 'select-options'
        }, traits.required]
      })
    },
    view: preventDefaultClick()
  });
  var traitManager = editor.TraitManager;
  traitManager.addType('select-options', {
    events: {
      'keyup': 'onChange'
    },
    onValueChange: function onValueChange() {
      var optionsStr = this.model.get('value').trim();
      var options = optionsStr.split('\n');
      var optComps = [];
      for (var i = 0; i < options.length; i++) {
        var optionStr = options[i];
        var option = optionStr.split(config.optionsStringSeparator);
        var opt = {
          tagName: 'option',
          attributes: {}
        };
        if (option[1]) {
          opt.content = option[1];
          opt.attributes.value = option[0];
        } else {
          opt.content = option[0];
          opt.attributes.value = option[0];
        }
        optComps.push(opt);
      }
      var comps = this.target.get('components');
      comps.reset(optComps);
      this.target.view.render();
    },
    getInputEl: function getInputEl() {
      if (!this.$input) {
        var target = this.target;
        var optionsStr = '';
        var options = target.get('components');
        for (var i = 0; i < options.length; i++) {
          var option = options.models[i];
          var optAttr = option.get('attributes');
          var optValue = optAttr.value || '';
          optionsStr += "".concat(optValue).concat(config.optionsStringSeparator).concat(option.get('content'), "\n");
        }
        this.$input = document.createElement('textarea');
        this.$input.value = optionsStr;
      }
      return this.$input;
    }
  });
});

/***/ }),

/***/ "./src/components/Text.js":
/*!********************************!*\
  !*** ./src/components/Text.js ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TextBlock: () => (/* binding */ TextBlock),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var raw_loader_icons_font_solid_svg__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! raw-loader!../icons/font-solid.svg */ "../../node_modules/raw-loader/dist/cjs.js!./src/icons/font-solid.svg");

var TextBlock = function TextBlock(bm, label) {
  bm.add('text', {
    label: "\n            ".concat(raw_loader_icons_font_solid_svg__WEBPACK_IMPORTED_MODULE_0__["default"], "\n            <div>").concat(label, "</div>\n        "),
    category: 'Typography',
    content: {
      type: 'text',
      content: 'Insert your text here'
    }
  });
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (function (domc) {
  var defaultType = domc.getType('default');
  var defaultModel = defaultType.model;
  var textType = domc.getType('text');
  var textView = textType.view;
  domc.addType('text', {
    /*isComponent(el) {
      if(el && el.dataset && el.dataset.bsText) {
        return {type: 'text'};
      }
    }*/
    extend: 'default',
    model: {
      defaults: Object.assign({}, defaultModel.prototype.defaults, {
        'custom-name': 'Text',
        tagName: 'div',
        droppable: true,
        editable: true
      })
    },
    extendView: 'text'
  });
});

/***/ }),

/***/ "./src/components/Textarea.js":
/*!************************************!*\
  !*** ./src/components/Textarea.js ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TextareaBlock: () => (/* binding */ TextareaBlock),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var raw_loader_icons_textarea_svg__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! raw-loader!../icons/textarea.svg */ "../../node_modules/raw-loader/dist/cjs.js!./src/icons/textarea.svg");
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }

var TextareaBlock = function TextareaBlock(bm, label) {
  bm.add('textarea', {
    label: "\n      ".concat(raw_loader_icons_textarea_svg__WEBPACK_IMPORTED_MODULE_0__["default"], "\n      <div>").concat(label, "</div>"),
    category: 'Forms',
    content: '<textarea name="textarea1" class="form-control"></textarea>'
  });
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (function (dc, traits) {
  var config = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  var defaultType = dc.getType('default');
  var defaultView = defaultType.view;
  var inputType = dc.getType('input');
  var inputModel = inputType.model;

  // TEXTAREA
  dc.addType('textarea', {
    isComponent: function isComponent(el) {
      if (el.tagName === 'TEXTAREA') {
        return {
          type: 'textarea'
        };
      }
    },
    extend: 'input',
    model: {
      defaults: _objectSpread(_objectSpread({}, inputModel.prototype.defaults), {}, {
        'custom-name': config.labels.textarea,
        tagName: 'textarea',
        traits: [traits.name, traits.placeholder, traits.required]
      })
    },
    extendView: 'default'
  });
});

/***/ }),

/***/ "./src/components/tabs/Tab.js":
/*!************************************!*\
  !*** ./src/components/tabs/Tab.js ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./constants */ "./src/components/tabs/constants.js");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils */ "./src/utils.js");
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }


/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (function (dc) {
  var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var defaultType = dc.getType('default');
  var defaultModel = defaultType.model;
  var defaultView = defaultType.view;
  var tabName = _constants__WEBPACK_IMPORTED_MODULE_0__["default"].tabName,
    navigationSelector = _constants__WEBPACK_IMPORTED_MODULE_0__["default"].navigationSelector;
  var classId = config.classTab;
  var type = tabName;
  dc.addType(type, {
    isComponent: function isComponent(el) {
      if ((0,_utils__WEBPACK_IMPORTED_MODULE_1__.elHasClass)(el, classId)) return {
        type: type
      };
    },
    extend: 'default',
    model: {
      defaults: _objectSpread(_objectSpread({}, defaultModel.prototype.defaults), {}, {
        name: 'Tab',
        tagName: 'li',
        copyable: true,
        draggable: navigationSelector
      }),
      init: function init() {
        this.get('classes').pluck('name').indexOf(classId) < 0 && this.addClass(classId);
      }
    },
    extendView: 'default',
    view: {
      init: function init() {
        var comps = this.model.components();
        // Add a basic template if it's not yet initialized
        if (!comps.length) {
          comps.add("\n              <a class=\"nav-link active\" id=\"tab-1\" data-toggle=\"tab\" href=\"#tab-pane-1\" role=\"tab\" aria-controls=\"tab\" aria-selected=\"true\">Tab</a>\n          ");
        }
      }
    }
  });
});

/***/ }),

/***/ "./src/components/tabs/TabPane.js":
/*!****************************************!*\
  !*** ./src/components/tabs/TabPane.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./constants */ "./src/components/tabs/constants.js");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils */ "./src/utils.js");
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }


/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (function (dc) {
  var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var defaultType = dc.getType('default');
  var defaultModel = defaultType.model;
  var defaultView = defaultType.view;
  var tabPaneName = _constants__WEBPACK_IMPORTED_MODULE_0__["default"].tabPaneName,
    tabPanesSelector = _constants__WEBPACK_IMPORTED_MODULE_0__["default"].tabPanesSelector;
  var classId = config.classTabPane;
  var type = tabPaneName;
  dc.addType(type, {
    isComponent: function isComponent(el) {
      if ((0,_utils__WEBPACK_IMPORTED_MODULE_1__.elHasClass)(el, classId)) return {
        type: type
      };
    },
    extend: 'default',
    model: {
      defaults: _objectSpread(_objectSpread({}, defaultModel.prototype.defaults), {}, {
        name: 'Tab Pane',
        copyable: true,
        draggable: tabPanesSelector,
        traits: ['id', {
          type: 'class_select',
          options: [{
            value: 'fade',
            name: 'Fade'
          }, {
            value: '',
            name: 'None'
          }],
          label: 'Animation'
        }, {
          type: 'class_select',
          options: [{
            value: '',
            name: 'Inactive'
          }, {
            value: 'active',
            name: 'Active'
          }],
          label: 'Is Active'
        }]
      }),
      init: function init() {
        this.get('classes').pluck('name').indexOf(classId) < 0 && this.addClass(classId);
      }
    },
    extendView: 'default'
  });
});

/***/ }),

/***/ "./src/components/tabs/TabsNavigation.js":
/*!***********************************************!*\
  !*** ./src/components/tabs/TabsNavigation.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TabsBlock: () => (/* binding */ TabsBlock),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./constants */ "./src/components/tabs/constants.js");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils */ "./src/utils.js");
/* harmony import */ var raw_loader_icons_ellipsis_h_solid_svg__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! raw-loader!../../icons/ellipsis-h-solid.svg */ "../../node_modules/raw-loader/dist/cjs.js!./src/icons/ellipsis-h-solid.svg");
/* harmony import */ var raw_loader_icons_circle_solid_svg__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! raw-loader!../../icons/circle-solid.svg */ "../../node_modules/raw-loader/dist/cjs.js!./src/icons/circle-solid.svg");
/* harmony import */ var raw_loader_icons_window_maximize_solid_svg__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! raw-loader!../../icons/window-maximize-solid.svg */ "../../node_modules/raw-loader/dist/cjs.js!./src/icons/window-maximize-solid.svg");
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }





var TabsBlock = function TabsBlock(bm, c) {
  bm.add('tabs', {
    label: "\n            ".concat(raw_loader_icons_ellipsis_h_solid_svg__WEBPACK_IMPORTED_MODULE_2__["default"], "\n            <div>").concat(c.labels.tabs, "</div>\n        "),
    category: 'Components',
    content: "\n            <ul class=\"nav nav-tabs\" role=\"tablist\">\n              <li class=\"nav-item\">\n                <a class=\"nav-link active\" id=\"home-tab\" data-toggle=\"tab\" href=\"#home\" role=\"tab\" aria-controls=\"home\" aria-selected=\"true\">Tab 1</a>\n              </li>\n              <li class=\"nav-item\">\n                <a class=\"nav-link\" id=\"profile-tab\" data-toggle=\"tab\" href=\"#profile\" role=\"tab\" aria-controls=\"profile\" aria-selected=\"false\">Tab 2</a>\n              </li>\n              <li class=\"nav-item\">\n                <a class=\"nav-link\" id=\"contact-tab\" data-toggle=\"tab\" href=\"#contact\" role=\"tab\" aria-controls=\"contact\" aria-selected=\"false\">Tab 3</a>\n              </li>\n            </ul>\n            <div class=\"tab-content\">\n              <div class=\"tab-pane fade show active\" id=\"home\" role=\"tabpanel\" aria-labelledby=\"home-tab\"></div>\n              <div class=\"tab-pane fade\" id=\"profile\" role=\"tabpanel\" aria-labelledby=\"profile-tab\"></div>\n              <div class=\"tab-pane fade\" id=\"contact\" role=\"tabpanel\" aria-labelledby=\"contact-tab\"></div>\n            </div>\n        "
  });
  bm.add('tabs-tab', {
    label: "\n            ".concat(raw_loader_icons_circle_solid_svg__WEBPACK_IMPORTED_MODULE_3__["default"], "\n            <div>").concat(c.labels.tab, "</div>\n        "),
    category: 'Components',
    content: {
      type: 'tabs-tab'
    }
  });
  bm.add('tabs-tab-pane', {
    label: "\n            ".concat(raw_loader_icons_window_maximize_solid_svg__WEBPACK_IMPORTED_MODULE_4__["default"], "\n            <div>").concat(c.labels.tabPane, "</div>\n        "),
    category: 'Components',
    content: {
      type: 'tabs-tab-pane'
    }
  });
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (function (dc) {
  var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var defaultType = dc.getType('default');
  var defaultModel = defaultType.model;
  var defaultView = defaultType.view;
  var navigationName = _constants__WEBPACK_IMPORTED_MODULE_0__["default"].navigationName,
    tabSelector = _constants__WEBPACK_IMPORTED_MODULE_0__["default"].tabSelector;
  var classId = config.classNavigation;
  var type = navigationName;
  dc.addType(type, {
    isComponent: function isComponent(el) {
      if ((0,_utils__WEBPACK_IMPORTED_MODULE_1__.elHasClass)(el, classId)) return {
        type: type
      };
    },
    extend: 'default',
    model: {
      defaults: _objectSpread(_objectSpread({}, defaultModel.prototype.defaults), {}, {
        name: 'Tabs Navigation',
        copyable: 0,
        draggable: true,
        droppable: tabSelector,
        traits: [{
          type: 'class_select',
          options: [{
            value: 'nav-tabs',
            name: 'Tabs'
          }, {
            value: 'nav-pills',
            name: 'Pills'
          }],
          label: 'Type'
        }, {
          type: 'class_select',
          options: [{
            value: '',
            name: 'Left'
          }, {
            value: 'nav-fill',
            name: 'Fill'
          }, {
            value: 'nav-justified',
            name: 'Justify'
          }],
          label: 'Layout'
        }]
      }),
      init: function init() {
        this.get('classes').pluck('name').indexOf(classId) < 0 && this.addClass(classId);
      }
    },
    extendView: 'default',
    view: {
      init: function init() {
        var props = ['type', 'layout'];
        var reactTo = props.map(function (prop) {
          return "change:".concat(prop);
        }).join(' ');
        this.listenTo(this.model, reactTo, this.render);
        var comps = this.model.components();

        // Add a basic template if it's not yet initialized
        if (!comps.length) {
          comps.add("\n                        <ul class=\"nav nav-tabs\" role=\"tablist\">\n                          <li class=\"nav-item\">\n                            <a class=\"nav-link active\" id=\"home-tab\" data-toggle=\"tab\" href=\"#home\" role=\"tab\" aria-controls=\"home\" aria-selected=\"true\">Tab 1</a>\n                          </li>\n                          <li class=\"nav-item\">\n                            <a class=\"nav-link\" id=\"profile-tab\" data-toggle=\"tab\" href=\"#profile\" role=\"tab\" aria-controls=\"profile\" aria-selected=\"false\">Tab 2</a>\n                          </li>\n                          <li class=\"nav-item\">\n                            <a class=\"nav-link\" id=\"contact-tab\" data-toggle=\"tab\" href=\"#contact\" role=\"tab\" aria-controls=\"contact\" aria-selected=\"false\">Tab 3</a>\n                          </li>\n                        </ul>\n                    ");
        }
      }
    }
  });
});

/***/ }),

/***/ "./src/components/tabs/TabsPanes.js":
/*!******************************************!*\
  !*** ./src/components/tabs/TabsPanes.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./constants */ "./src/components/tabs/constants.js");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils */ "./src/utils.js");
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }


/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (function (dc) {
  var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var defaultType = dc.getType('default');
  var defaultModel = defaultType.model;
  var defaultView = defaultType.view;
  var tabPanesName = _constants__WEBPACK_IMPORTED_MODULE_0__["default"].tabPanesName,
    tabPaneSelector = _constants__WEBPACK_IMPORTED_MODULE_0__["default"].tabPaneSelector;
  var classId = config.classTabPanes;
  var type = tabPanesName;
  dc.addType(type, {
    isComponent: function isComponent(el) {
      if ((0,_utils__WEBPACK_IMPORTED_MODULE_1__.elHasClass)(el, classId)) return {
        type: type
      };
    },
    extend: 'default',
    model: {
      defaults: _objectSpread(_objectSpread({}, defaultModel.prototype.defaults), {}, {
        name: 'Tabs Panes',
        copyable: 0,
        draggable: true,
        droppable: tabPaneSelector
      }),
      init: function init() {
        this.get('classes').pluck('name').indexOf(classId) < 0 && this.addClass(classId);
      }
    },
    extendView: 'default',
    view: {
      init: function init() {
        var comps = this.model.components();

        // Add a basic template if it's not yet initialized
        if (!comps.length) {
          comps.add("\n                        <div class=\"tab-content\" id=\"myTabContent\">\n                          <div class=\"tab-pane fade show active\" id=\"home\" role=\"tabpanel\" aria-labelledby=\"home-tab\">Tab pane 1</div>\n                          <div class=\"tab-pane fade\" id=\"profile\" role=\"tabpanel\" aria-labelledby=\"profile-tab\">Tab pane 2</div>\n                          <div class=\"tab-pane fade\" id=\"contact\" role=\"tabpanel\" aria-labelledby=\"contact-tab\">Tab pane 3</div>\n                        </div>\n                    ");
        }
      }
    }
  });
});

/***/ }),

/***/ "./src/components/tabs/constants.js":
/*!******************************************!*\
  !*** ./src/components/tabs/constants.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
var prefix = 'tabs-';
var containerName = "".concat(prefix, "container");
var navigationName = "".concat(prefix, "navigation");
var tabPanesName = "".concat(prefix, "panes");
var tabName = "".concat(prefix, "tab");
var tabPaneName = "".concat(prefix, "tab-pane");
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
  navigationName: navigationName,
  tabPanesName: tabPanesName,
  tabName: tabName,
  tabPaneName: tabPaneName,
  // Selectors
  navigationSelector: "[data-gjs-type=\"".concat(navigationName, "\"]"),
  tabPanesSelector: "[data-gjs-type=\"".concat(tabPanesName, "\"]"),
  tabSelector: "[data-gjs-type=\"".concat(tabName, "\"]"),
  tabPaneSelector: "[data-gjs-type=\"".concat(tabPaneName, "\"]"),
  // IDs
  containerId: "data-".concat(containerName),
  navigationId: "data-".concat(navigationName),
  tabPanesId: "data-".concat(tabPanesName),
  tabId: "data-".concat(tabName),
  tabPaneId: "data-".concat(tabPaneName)
});

/***/ }),

/***/ "./src/components/video/Embed.js":
/*!***************************************!*\
  !*** ./src/components/video/Embed.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (function (domComponent) {
  var src_default = 'https://download.blender.org/peach/bigbuckbunny_movies/BigBuckBunny_320x180.mp4';
  var defaultType = domComponent.getType('default');
  var model = defaultType.model;
  var view = defaultType.view;
  var type = 'bs-video';
  domComponent.addType(type, {
    isComponent: function isComponent(el) {
      if (el && el.className === 'embed-responsive') {
        return {
          type: type
        };
      }
    },
    extend: 'default',
    model: {
      defaults: Object.assign({}, model.prototype.defaults, {
        'custom-name': 'Embed',
        tagName: 'div',
        resizable: false,
        droppable: false,
        classes: ['embed-responsive', 'embed-responsive-16by9'],
        traits: [{
          type: 'class_select',
          options: [{
            value: 'embed-responsive-21by9',
            name: '21:9'
          }, {
            value: 'embed-responsive-16by9',
            name: '16:9'
          }, {
            value: 'embed-responsive-4by3',
            name: '4:3'
          }, {
            value: 'embed-responsive-1by1',
            name: '1:1'
          }],
          label: 'Aspect Ratio'
        }].concat(model.prototype.defaults.traits)
      })
    },
    extendView: 'default',
    view: {
      init: function init() {
        var props = ['Aspect Ratio'];
        var reactTo = props.map(function (prop) {
          return "change:".concat(prop);
        }).join(' ');
        this.listenTo(this.model, reactTo, this.render);
        var comps = this.model.components();
        // Add a basic template if it's not yet initialized
        if (!comps.length) {
          comps.add("<iframe class=\"embed-responsive-item\" src=\"".concat(src_default, "\"></iframe>"));
        }
      }
    }
  });
});

/***/ }),

/***/ "./src/components/video/Video.js":
/*!***************************************!*\
  !*** ./src/components/video/Video.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   VideoBlock: () => (/* binding */ VideoBlock),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var raw_loader_icons_youtube_brands_svg__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! raw-loader!../../icons/youtube-brands.svg */ "../../node_modules/raw-loader/dist/cjs.js!./src/icons/youtube-brands.svg");

var VideoBlock = function VideoBlock(bm, label) {
  bm.add('bs-video', {
    label: "\n            ".concat(raw_loader_icons_youtube_brands_svg__WEBPACK_IMPORTED_MODULE_0__["default"], "\n            <div>").concat(label, "</div>\n        "),
    category: 'Media',
    content: {
      type: 'bs-video'
    }
  });
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (function (domComponent) {
  var videoType = domComponent.getType('video');
  var model = videoType.model;
  var view = videoType.view;
  var type = 'bs-embed-responsive';
  domComponent.addType(type, {
    isComponent: function isComponent(el) {
      if (el && el.className === 'embed-responsive-item') {
        var result = {
          provider: 'so',
          type: type
        };
        var isYtProv = /youtube\.com\/embed/.test(el.src);
        var isYtncProv = /youtube-nocookie\.com\/embed/.test(el.src);
        var isViProv = /player\.vimeo\.com\/video/.test(el.src);
        var isExtProv = isYtProv || isYtncProv || isViProv;
        if (el.tagName == 'VIDEO' || el.tagName == 'IFRAME' && isExtProv) {
          if (el.src) result.src = el.src;
          if (isExtProv) {
            if (isYtProv) result.provider = 'yt';else if (isYtncProv) result.provider = 'ytnc';else if (isViProv) result.provider = 'vi';
          }
        }
        return result;
      }
    },
    extend: 'video',
    model: {
      defaults: Object.assign({}, model.prototype.defaults, {
        'custom-name': 'Video',
        resizable: false,
        droppable: false,
        draggable: false,
        copyable: false,
        provider: 'so',
        classes: ['embed-responsive-item']
      })
    },
    extendView: 'video'
  });
});

/***/ }),

/***/ "./src/devices.js":
/*!************************!*\
  !*** ./src/devices.js ***!
  \************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (function (editor) {
  var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var c = config;
  var deviceManager = editor.DeviceManager;
  if (c.gridDevices) {
    deviceManager.add('Extra Small', '575px');
    deviceManager.add('Small', '767px');
    deviceManager.add('Medium', '991px');
    deviceManager.add('Large', '1199px');
    deviceManager.add('Extra Large');
    if (c.gridDevicesPanel) {
      var panels = editor.Panels;
      var commands = editor.Commands;
      var panelDevices = panels.addPanel({
        id: 'devices-buttons'
      });
      var deviceBtns = panelDevices.get('buttons');
      deviceBtns.add([{
        id: 'deviceXl',
        command: 'set-device-xl',
        className: 'fa fa-desktop',
        text: 'XL',
        attributes: {
          'title': 'Extra Large'
        },
        active: 1
      }, {
        id: 'deviceLg',
        command: 'set-device-lg',
        className: 'fa fa-desktop',
        attributes: {
          'title': 'Large'
        }
      }, {
        id: 'deviceMd',
        command: 'set-device-md',
        className: 'fa fa-tablet',
        attributes: {
          'title': 'Medium'
        }
      }, {
        id: 'deviceSm',
        command: 'set-device-sm',
        className: 'fa fa-mobile',
        attributes: {
          'title': 'Small'
        }
      }, {
        id: 'deviceXs',
        command: 'set-device-xs',
        className: 'fa fa-mobile',
        attributes: {
          'title': 'Extra Small'
        }
      }]);
      commands.add('set-device-xs', {
        run: function run(editor) {
          editor.setDevice('Extra Small');
        }
      });
      commands.add('set-device-sm', {
        run: function run(editor) {
          editor.setDevice('Small');
        }
      });
      commands.add('set-device-md', {
        run: function run(editor) {
          editor.setDevice('Medium');
        }
      });
      commands.add('set-device-lg', {
        run: function run(editor) {
          editor.setDevice('Large');
        }
      });
      commands.add('set-device-xl', {
        run: function run(editor) {
          editor.setDevice('Extra Large');
        }
      });
    }
  }
});

/***/ }),

/***/ "./src/traits.js":
/*!***********************!*\
  !*** ./src/traits.js ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (function (editor) {
  var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var tm = editor.TraitManager;

  // Select trait that maps a class list to the select options.
  // The default select option is set if the input has a class, and class list is modified when select value changes.
  tm.addType('class_select', {
    events: {
      'change': 'onChange' // trigger parent onChange method on input change
    },
    createInput: function createInput(_ref) {
      var trait = _ref.trait;
      var md = this.model;
      var opts = md.get('options') || [];
      var input = document.createElement('select');
      var target_view_el = this.target.view.el;
      var _loop = function _loop() {
        var option = document.createElement('option');
        var value = opts[i].value;
        if (value === '') {
          value = 'GJS_NO_CLASS';
        } // 'GJS_NO_CLASS' represents no class--empty string does not trigger value change
        option.text = opts[i].name;
        option.value = value;

        // Convert the Token List to an Array
        var css = Array.from(target_view_el.classList);
        var value_a = value.split(' ');
        var intersection = css.filter(function (x) {
          return value_a.includes(x);
        });
        if (intersection.length === value_a.length) {
          option.setAttribute('selected', 'selected');
        }
        input.append(option);
      };
      for (var i = 0; i < opts.length; i++) {
        _loop();
      }
      return input;
    },
    onUpdate: function onUpdate(_ref2) {
      var elInput = _ref2.elInput,
        component = _ref2.component;
      var classes = component.getClasses();
      var opts = this.model.get('options') || [];
      for (var i = 0; i < opts.length; i++) {
        var value = opts[i].value;
        if (value && classes.includes(value)) {
          elInput.value = value;
          return;
        }
      }
      elInput.value = "GJS_NO_CLASS";
    },
    onEvent: function onEvent(_ref3) {
      var elInput = _ref3.elInput,
        component = _ref3.component,
        event = _ref3.event;
      var classes = this.model.get('options').map(function (opt) {
        return opt.value;
      });
      for (var i = 0; i < classes.length; i++) {
        if (classes[i].length > 0) {
          var classes_i_a = classes[i].split(' ');
          for (var j = 0; j < classes_i_a.length; j++) {
            if (classes_i_a[j].length > 0) {
              component.removeClass(classes_i_a[j]);
            }
          }
        }
      }
      var value = this.model.get('value');

      // This piece of code removes the empty attribute name from attributes list
      var elAttributes = component.attributes.attributes;
      delete elAttributes[""];
      if (value.length > 0 && value !== 'GJS_NO_CLASS') {
        var value_a = value.split(' ');
        for (var _i = 0; _i < value_a.length; _i++) {
          component.addClass(value_a[_i]);
        }
      }
      component.em.trigger('component:toggled');
    }
  });
  var textTrait = tm.getType('text');
  tm.addType('content', {
    events: {
      'keyup': 'onChange'
    },
    onValueChange: function onValueChange() {
      var md = this.model;
      var target = md.target;
      target.set('content', md.get('value'));
    },
    getInputEl: function getInputEl() {
      if (!this.inputEl) {
        this.inputEl = textTrait.prototype.getInputEl.bind(this)();
        this.inputEl.value = this.target.get('content');
      }
      return this.inputEl;
    }
  });
  tm.addType('content', {
    events: {
      'keyup': 'onChange'
    },
    onValueChange: function onValueChange() {
      var md = this.model;
      var target = md.target;
      target.set('content', md.get('value'));
    },
    getInputEl: function getInputEl() {
      if (!this.inputEl) {
        this.inputEl = textTrait.prototype.getInputEl.bind(this)();
        this.inputEl.value = this.target.get('content');
      }
      return this.inputEl;
    }
  });
});

/***/ }),

/***/ "./src/utils.js":
/*!**********************!*\
  !*** ./src/utils.js ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   capitalize: () => (/* binding */ capitalize),
/* harmony export */   elHasClass: () => (/* binding */ elHasClass)
/* harmony export */ });
var elHasClass = function elHasClass(el, toFind) {
  var cls = el.className;
  cls = cls && cls.toString();
  if (cls && cls.split(' ').indexOf(toFind) >= 0) return 1;
};
var capitalize = function capitalize(phrase) {
  return phrase.toLowerCase().split(' ').map(function (word) {
    return word.charAt(0).toUpperCase() + word.slice(1);
  }).join(' ');
};


/***/ }),

/***/ "../../node_modules/raw-loader/dist/cjs.js!./src/icons/button.svg":
/*!************************************************************************!*\
  !*** ../../node_modules/raw-loader/dist/cjs.js!./src/icons/button.svg ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<svg class=\"gjs-block-svg\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">\r\n    <path class=\"gjs-block-svg-path\" d=\"M22,9 C22,8.4 21.5,8 20.75,8 L3.25,8 C2.5,8 2,8.4 2,9 L2,15 C2,15.6 2.5,16 3.25,16 L20.75,16 C21.5,16 22,15.6 22,15 L22,9 Z M21,15 L3,15 L3,9 L21,9 L21,15 Z\" fill-rule=\"nonzero\"></path>\r\n    <rect class=\"gjs-block-svg-path\" x=\"4\" y=\"11.5\" width=\"16\" height=\"1\"></rect>\r\n</svg>\r\n");

/***/ }),

/***/ "../../node_modules/raw-loader/dist/cjs.js!./src/icons/caret-square-down-regular.svg":
/*!*******************************************************************************************!*\
  !*** ../../node_modules/raw-loader/dist/cjs.js!./src/icons/caret-square-down-regular.svg ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<svg aria-hidden=\"true\" width=\"24\" height=\"50\" focusable=\"false\" data-prefix=\"far\" data-icon=\"caret-square-down\" class=\"svg-inline--fa fa-caret-square-down fa-w-14\" role=\"img\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 448 512\"><path fill=\"currentColor\" d=\"M125.1 208h197.8c10.7 0 16.1 13 8.5 20.5l-98.9 98.3c-4.7 4.7-12.2 4.7-16.9 0l-98.9-98.3c-7.7-7.5-2.3-20.5 8.4-20.5zM448 80v352c0 26.5-21.5 48-48 48H48c-26.5 0-48-21.5-48-48V80c0-26.5 21.5-48 48-48h352c26.5 0 48 21.5 48 48zm-48 346V86c0-3.3-2.7-6-6-6H54c-3.3 0-6 2.7-6 6v340c0 3.3 2.7 6 6 6h340c3.3 0 6-2.7 6-6z\"></path></svg>\r\n");

/***/ }),

/***/ "../../node_modules/raw-loader/dist/cjs.js!./src/icons/certificate-solid.svg":
/*!***********************************************************************************!*\
  !*** ../../node_modules/raw-loader/dist/cjs.js!./src/icons/certificate-solid.svg ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<svg aria-hidden=\"true\" width=\"24\" height=\"50\" focusable=\"false\" data-prefix=\"fas\" data-icon=\"certificate\" class=\"svg-inline--fa fa-certificate fa-w-16\" role=\"img\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\"><path fill=\"currentColor\" d=\"M458.622 255.92l45.985-45.005c13.708-12.977 7.316-36.039-10.664-40.339l-62.65-15.99 17.661-62.015c4.991-17.838-11.829-34.663-29.661-29.671l-61.994 17.667-15.984-62.671C337.085.197 313.765-6.276 300.99 7.228L256 53.57 211.011 7.229c-12.63-13.351-36.047-7.234-40.325 10.668l-15.984 62.671-61.995-17.667C74.87 57.907 58.056 74.738 63.046 92.572l17.661 62.015-62.65 15.99C.069 174.878-6.31 197.944 7.392 210.915l45.985 45.005-45.985 45.004c-13.708 12.977-7.316 36.039 10.664 40.339l62.65 15.99-17.661 62.015c-4.991 17.838 11.829 34.663 29.661 29.671l61.994-17.667 15.984 62.671c4.439 18.575 27.696 24.018 40.325 10.668L256 458.61l44.989 46.001c12.5 13.488 35.987 7.486 40.325-10.668l15.984-62.671 61.994 17.667c17.836 4.994 34.651-11.837 29.661-29.671l-17.661-62.015 62.65-15.99c17.987-4.302 24.366-27.367 10.664-40.339l-45.984-45.004z\"></path></svg>\r\n");

/***/ }),

/***/ "../../node_modules/raw-loader/dist/cjs.js!./src/icons/check-square-solid.svg":
/*!************************************************************************************!*\
  !*** ../../node_modules/raw-loader/dist/cjs.js!./src/icons/check-square-solid.svg ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<svg aria-hidden=\"true\" width=\"24\" height=\"50\" focusable=\"false\" data-prefix=\"fas\" data-icon=\"check-square\" class=\"svg-inline--fa fa-check-square fa-w-14\" role=\"img\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 448 512\"><path fill=\"currentColor\" d=\"M400 480H48c-26.51 0-48-21.49-48-48V80c0-26.51 21.49-48 48-48h352c26.51 0 48 21.49 48 48v352c0 26.51-21.49 48-48 48zm-204.686-98.059l184-184c6.248-6.248 6.248-16.379 0-22.627l-22.627-22.627c-6.248-6.248-16.379-6.249-22.628 0L184 302.745l-70.059-70.059c-6.248-6.248-16.379-6.248-22.628 0l-22.627 22.627c-6.248 6.248-6.248 16.379 0 22.627l104 104c6.249 6.25 16.379 6.25 22.628.001z\"></path></svg>\r\n");

/***/ }),

/***/ "../../node_modules/raw-loader/dist/cjs.js!./src/icons/circle-solid.svg":
/*!******************************************************************************!*\
  !*** ../../node_modules/raw-loader/dist/cjs.js!./src/icons/circle-solid.svg ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<svg aria-hidden=\"true\" width=\"24\" height=\"50\" focusable=\"false\" data-prefix=\"fas\" data-icon=\"circle\" class=\"svg-inline--fa fa-circle fa-w-16\" role=\"img\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\"><path fill=\"currentColor\" d=\"M256 8C119 8 8 119 8 256s111 248 248 248 248-111 248-248S393 8 256 8z\"></path></svg>\r\n");

/***/ }),

/***/ "../../node_modules/raw-loader/dist/cjs.js!./src/icons/columns-solid.svg":
/*!*******************************************************************************!*\
  !*** ../../node_modules/raw-loader/dist/cjs.js!./src/icons/columns-solid.svg ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<svg aria-hidden=\"true\" width=\"24\" height=\"50\" focusable=\"false\" data-prefix=\"fas\" data-icon=\"columns\" class=\"svg-inline--fa fa-columns fa-w-16\" role=\"img\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\"><path fill=\"currentColor\" d=\"M464 32H48C21.49 32 0 53.49 0 80v352c0 26.51 21.49 48 48 48h416c26.51 0 48-21.49 48-48V80c0-26.51-21.49-48-48-48zM224 416H64V160h160v256zm224 0H288V160h160v256z\"></path></svg>\r\n");

/***/ }),

/***/ "../../node_modules/raw-loader/dist/cjs.js!./src/icons/compress-solid.svg":
/*!********************************************************************************!*\
  !*** ../../node_modules/raw-loader/dist/cjs.js!./src/icons/compress-solid.svg ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<svg aria-hidden=\"true\" width=\"24\" height=\"50\" focusable=\"false\" data-prefix=\"fas\" data-icon=\"compress\" class=\"svg-inline--fa fa-compress fa-w-14\" role=\"img\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 448 512\"><path fill=\"currentColor\" d=\"M436 192H312c-13.3 0-24-10.7-24-24V44c0-6.6 5.4-12 12-12h40c6.6 0 12 5.4 12 12v84h84c6.6 0 12 5.4 12 12v40c0 6.6-5.4 12-12 12zm-276-24V44c0-6.6-5.4-12-12-12h-40c-6.6 0-12 5.4-12 12v84H12c-6.6 0-12 5.4-12 12v40c0 6.6 5.4 12 12 12h124c13.3 0 24-10.7 24-24zm0 300V344c0-13.3-10.7-24-24-24H12c-6.6 0-12 5.4-12 12v40c0 6.6 5.4 12 12 12h84v84c0 6.6 5.4 12 12 12h40c6.6 0 12-5.4 12-12zm192 0v-84h84c6.6 0 12-5.4 12-12v-40c0-6.6-5.4-12-12-12H312c-13.3 0-24 10.7-24 24v124c0 6.6 5.4 12 12 12h40c6.6 0 12-5.4 12-12z\"></path></svg>\r\n");

/***/ }),

/***/ "../../node_modules/raw-loader/dist/cjs.js!./src/icons/credit-card-solid.svg":
/*!***********************************************************************************!*\
  !*** ../../node_modules/raw-loader/dist/cjs.js!./src/icons/credit-card-solid.svg ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<svg aria-hidden=\"true\" width=\"24\" height=\"50\" focusable=\"false\" data-prefix=\"fas\" data-icon=\"credit-card\" class=\"svg-inline--fa fa-credit-card fa-w-18\" role=\"img\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 576 512\"><path fill=\"currentColor\" d=\"M0 432c0 26.5 21.5 48 48 48h480c26.5 0 48-21.5 48-48V256H0v176zm192-68c0-6.6 5.4-12 12-12h136c6.6 0 12 5.4 12 12v40c0 6.6-5.4 12-12 12H204c-6.6 0-12-5.4-12-12v-40zm-128 0c0-6.6 5.4-12 12-12h72c6.6 0 12 5.4 12 12v40c0 6.6-5.4 12-12 12H76c-6.6 0-12-5.4-12-12v-40zM576 80v48H0V80c0-26.5 21.5-48 48-48h480c26.5 0 48 21.5 48 48z\"></path></svg>\r\n");

/***/ }),

/***/ "../../node_modules/raw-loader/dist/cjs.js!./src/icons/dot-circle-regular.svg":
/*!************************************************************************************!*\
  !*** ../../node_modules/raw-loader/dist/cjs.js!./src/icons/dot-circle-regular.svg ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<svg aria-hidden=\"true\" width=\"24\" height=\"50\" focusable=\"false\" data-prefix=\"far\" data-icon=\"dot-circle\" class=\"svg-inline--fa fa-dot-circle fa-w-16\" role=\"img\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\"><path fill=\"currentColor\" d=\"M256 56c110.532 0 200 89.451 200 200 0 110.532-89.451 200-200 200-110.532 0-200-89.451-200-200 0-110.532 89.451-200 200-200m0-48C119.033 8 8 119.033 8 256s111.033 248 248 248 248-111.033 248-248S392.967 8 256 8zm0 168c-44.183 0-80 35.817-80 80s35.817 80 80 80 80-35.817 80-80-35.817-80-80-80z\"></path></svg>\r\n");

/***/ }),

/***/ "../../node_modules/raw-loader/dist/cjs.js!./src/icons/ellipsis-h-solid.svg":
/*!**********************************************************************************!*\
  !*** ../../node_modules/raw-loader/dist/cjs.js!./src/icons/ellipsis-h-solid.svg ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<svg aria-hidden=\"true\" width=\"24\" height=\"50\" focusable=\"false\" data-prefix=\"fas\" data-icon=\"ellipsis-h\" class=\"svg-inline--fa fa-ellipsis-h fa-w-16\" role=\"img\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\"><path fill=\"currentColor\" d=\"M328 256c0 39.8-32.2 72-72 72s-72-32.2-72-72 32.2-72 72-72 72 32.2 72 72zm104-72c-39.8 0-72 32.2-72 72s32.2 72 72 72 72-32.2 72-72-32.2-72-72-72zm-352 0c-39.8 0-72 32.2-72 72s32.2 72 72 72 72-32.2 72-72-32.2-72-72-72z\"></path></svg>\r\n");

/***/ }),

/***/ "../../node_modules/raw-loader/dist/cjs.js!./src/icons/equals-solid.svg":
/*!******************************************************************************!*\
  !*** ../../node_modules/raw-loader/dist/cjs.js!./src/icons/equals-solid.svg ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<svg aria-hidden=\"true\" width=\"24\" height=\"50\" focusable=\"false\" data-prefix=\"fas\" data-icon=\"equals\" class=\"svg-inline--fa fa-equals fa-w-14\" role=\"img\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 448 512\"><path fill=\"currentColor\" d=\"M416 304H32c-17.67 0-32 14.33-32 32v32c0 17.67 14.33 32 32 32h384c17.67 0 32-14.33 32-32v-32c0-17.67-14.33-32-32-32zm0-192H32c-17.67 0-32 14.33-32 32v32c0 17.67 14.33 32 32 32h384c17.67 0 32-14.33 32-32v-32c0-17.67-14.33-32-32-32z\"></path></svg>\r\n");

/***/ }),

/***/ "../../node_modules/raw-loader/dist/cjs.js!./src/icons/exclamation-triangle-solid.svg":
/*!********************************************************************************************!*\
  !*** ../../node_modules/raw-loader/dist/cjs.js!./src/icons/exclamation-triangle-solid.svg ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<svg aria-hidden=\"true\" width=\"24\" height=\"50\" focusable=\"false\" data-prefix=\"fas\" data-icon=\"exclamation-triangle\" class=\"svg-inline--fa fa-exclamation-triangle fa-w-18\" role=\"img\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 576 512\"><path fill=\"currentColor\" d=\"M569.517 440.013C587.975 472.007 564.806 512 527.94 512H48.054c-36.937 0-59.999-40.055-41.577-71.987L246.423 23.985c18.467-32.009 64.72-31.951 83.154 0l239.94 416.028zM288 354c-25.405 0-46 20.595-46 46s20.595 46 46 46 46-20.595 46-46-20.595-46-46-46zm-43.673-165.346l7.418 136c.347 6.364 5.609 11.346 11.982 11.346h48.546c6.373 0 11.635-4.982 11.982-11.346l7.418-136c.375-6.874-5.098-12.654-11.982-12.654h-63.383c-6.884 0-12.356 5.78-11.981 12.654z\"></path></svg>\r\n");

/***/ }),

/***/ "../../node_modules/raw-loader/dist/cjs.js!./src/icons/file-input.svg":
/*!****************************************************************************!*\
  !*** ../../node_modules/raw-loader/dist/cjs.js!./src/icons/file-input.svg ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<svg class=\"gjs-block-svg\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">\r\n    <path class=\"gjs-block-svg-path\" d=\"M22,9 C22,8.4 21.5,8 20.75,8 L3.25,8 C2.5,8 2,8.4 2,9 L2,15 C2,15.6 2.5,16 3.25,16 L20.75,16 C21.5,16 22,15.6 22,15 L22,9 Z M21,15 L3,15 L3,9 L21,9 L21,15 Z\"></path>\r\n    <polygon class=\"gjs-block-svg-path\" points=\"4 10 5 10 5 14 4 14\"></polygon>\r\n</svg>\r\n");

/***/ }),

/***/ "../../node_modules/raw-loader/dist/cjs.js!./src/icons/font-solid.svg":
/*!****************************************************************************!*\
  !*** ../../node_modules/raw-loader/dist/cjs.js!./src/icons/font-solid.svg ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<svg aria-hidden=\"true\" width=\"24\" height=\"50\" focusable=\"false\" data-prefix=\"fas\" data-icon=\"font\" class=\"svg-inline--fa fa-font fa-w-14\" role=\"img\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 448 512\"><path fill=\"currentColor\" d=\"M432 416h-23.41L277.88 53.69A32 32 0 0 0 247.58 32h-47.16a32 32 0 0 0-30.3 21.69L39.41 416H16a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h128a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16h-19.58l23.3-64h152.56l23.3 64H304a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h128a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16zM176.85 272L224 142.51 271.15 272z\"></path></svg>\r\n");

/***/ }),

/***/ "../../node_modules/raw-loader/dist/cjs.js!./src/icons/form-group.svg":
/*!****************************************************************************!*\
  !*** ../../node_modules/raw-loader/dist/cjs.js!./src/icons/form-group.svg ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<svg class=\"gjs-block-svg\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">\r\n    <path class=\"gjs-block-svg-path\" d=\"M22,9 C22,8.4 21.5,8 20.75,8 L3.25,8 C2.5,8 2,8.4 2,9 L2,15 C2,15.6 2.5,16 3.25,16 L20.75,16 C21.5,16 22,15.6 22,15 L22,9 Z M21,15 L3,15 L3,9 L21,9 L21,15 Z\"></path>\r\n    <polygon class=\"gjs-block-svg-path\" points=\"4 10 5 10 5 14 4 14\"></polygon>\r\n</svg>\r\n");

/***/ }),

/***/ "../../node_modules/raw-loader/dist/cjs.js!./src/icons/form.svg":
/*!**********************************************************************!*\
  !*** ../../node_modules/raw-loader/dist/cjs.js!./src/icons/form.svg ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<svg class=\"gjs-block-svg\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">\r\n    <path class=\"gjs-block-svg-path\" d=\"M22,5.5 C22,5.2 21.5,5 20.75,5 L3.25,5 C2.5,5 2,5.2 2,5.5 L2,8.5 C2,8.8 2.5,9 3.25,9 L20.75,9 C21.5,9 22,8.8 22,8.5 L22,5.5 Z M21,8 L3,8 L3,6 L21,6 L21,8 Z\" fill-rule=\"nonzero\"></path>\r\n    <path class=\"gjs-block-svg-path\" d=\"M22,10.5 C22,10.2 21.5,10 20.75,10 L3.25,10 C2.5,10 2,10.2 2,10.5 L2,13.5 C2,13.8 2.5,14 3.25,14 L20.75,14 C21.5,14 22,13.8 22,13.5 L22,10.5 Z M21,13 L3,13 L3,11 L21,11 L21,13 Z\" fill-rule=\"nonzero\"></path>\r\n    <rect class=\"gjs-block-svg-path\" x=\"2\" y=\"15\" width=\"10\" height=\"3\" rx=\"0.5\"></rect>\r\n</svg>\r\n");

/***/ }),

/***/ "../../node_modules/raw-loader/dist/cjs.js!./src/icons/heading-solid.svg":
/*!*******************************************************************************!*\
  !*** ../../node_modules/raw-loader/dist/cjs.js!./src/icons/heading-solid.svg ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<svg aria-hidden=\"true\" width=\"24\" height=\"50\" focusable=\"false\" data-prefix=\"fas\" data-icon=\"heading\" class=\"svg-inline--fa fa-heading fa-w-16\" role=\"img\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\"><path fill=\"currentColor\" d=\"M448 96v320h32a16 16 0 0 1 16 16v32a16 16 0 0 1-16 16H320a16 16 0 0 1-16-16v-32a16 16 0 0 1 16-16h32V288H160v128h32a16 16 0 0 1 16 16v32a16 16 0 0 1-16 16H32a16 16 0 0 1-16-16v-32a16 16 0 0 1 16-16h32V96H32a16 16 0 0 1-16-16V48a16 16 0 0 1 16-16h160a16 16 0 0 1 16 16v32a16 16 0 0 1-16 16h-32v128h192V96h-32a16 16 0 0 1-16-16V48a16 16 0 0 1 16-16h160a16 16 0 0 1 16 16v32a16 16 0 0 1-16 16z\"></path></svg>\r\n");

/***/ }),

/***/ "../../node_modules/raw-loader/dist/cjs.js!./src/icons/image-solid.svg":
/*!*****************************************************************************!*\
  !*** ../../node_modules/raw-loader/dist/cjs.js!./src/icons/image-solid.svg ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<svg aria-hidden=\"true\" width=\"24\" height=\"50\" focusable=\"false\" data-prefix=\"fas\" data-icon=\"image\" class=\"svg-inline--fa fa-image fa-w-16\" role=\"img\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\"><path fill=\"currentColor\" d=\"M464 448H48c-26.51 0-48-21.49-48-48V112c0-26.51 21.49-48 48-48h416c26.51 0 48 21.49 48 48v288c0 26.51-21.49 48-48 48zM112 120c-30.928 0-56 25.072-56 56s25.072 56 56 56 56-25.072 56-56-25.072-56-56-56zM64 384h384V272l-87.515-87.515c-4.686-4.686-12.284-4.686-16.971 0L208 320l-55.515-55.515c-4.686-4.686-12.284-4.686-16.971 0L64 336v48z\"></path></svg>\r\n");

/***/ }),

/***/ "../../node_modules/raw-loader/dist/cjs.js!./src/icons/input-group.svg":
/*!*****************************************************************************!*\
  !*** ../../node_modules/raw-loader/dist/cjs.js!./src/icons/input-group.svg ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<svg class=\"gjs-block-svg\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">\r\n    <path class=\"gjs-block-svg-path\" d=\"M22,9 C22,8.4 21.5,8 20.75,8 L3.25,8 C2.5,8 2,8.4 2,9 L2,15 C2,15.6 2.5,16 3.25,16 L20.75,16 C21.5,16 22,15.6 22,15 L22,9 Z M21,15 L3,15 L3,9 L21,9 L21,15 Z\"></path>\r\n    <polygon class=\"gjs-block-svg-path\" points=\"4 10 5 10 5 14 4 14\"></polygon>\r\n</svg>\r\n");

/***/ }),

/***/ "../../node_modules/raw-loader/dist/cjs.js!./src/icons/input.svg":
/*!***********************************************************************!*\
  !*** ../../node_modules/raw-loader/dist/cjs.js!./src/icons/input.svg ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<svg class=\"gjs-block-svg\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">\r\n    <path class=\"gjs-block-svg-path\" d=\"M22,9 C22,8.4 21.5,8 20.75,8 L3.25,8 C2.5,8 2,8.4 2,9 L2,15 C2,15.6 2.5,16 3.25,16 L20.75,16 C21.5,16 22,15.6 22,15 L22,9 Z M21,15 L3,15 L3,9 L21,9 L21,15 Z\"></path>\r\n    <polygon class=\"gjs-block-svg-path\" points=\"4 10 5 10 5 14 4 14\"></polygon>\r\n</svg>\r\n");

/***/ }),

/***/ "../../node_modules/raw-loader/dist/cjs.js!./src/icons/label.svg":
/*!***********************************************************************!*\
  !*** ../../node_modules/raw-loader/dist/cjs.js!./src/icons/label.svg ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<svg class=\"gjs-block-svg\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">\r\n    <path class=\"gjs-block-svg-path\" d=\"M22,11.875 C22,11.35 21.5,11 20.75,11 L3.25,11 C2.5,11 2,11.35 2,11.875 L2,17.125 C2,17.65 2.5,18 3.25,18 L20.75,18 C21.5,18 22,17.65 22,17.125 L22,11.875 Z M21,17 L3,17 L3,12 L21,12 L21,17 Z\" fill-rule=\"nonzero\"></path>\r\n    <rect class=\"gjs-block-svg-path\" x=\"2\" y=\"5\" width=\"14\" height=\"5\" rx=\"0.5\"></rect>\r\n    <polygon class=\"gjs-block-svg-path\" fill-rule=\"nonzero\" points=\"4 13 5 13 5 16 4 16\"></polygon>\r\n</svg>\r\n");

/***/ }),

/***/ "../../node_modules/raw-loader/dist/cjs.js!./src/icons/link-solid.svg":
/*!****************************************************************************!*\
  !*** ../../node_modules/raw-loader/dist/cjs.js!./src/icons/link-solid.svg ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<svg aria-hidden=\"true\" width=\"24\" height=\"50\" focusable=\"false\" data-prefix=\"fas\" data-icon=\"link\" class=\"svg-inline--fa fa-link fa-w-16\" role=\"img\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\"><path fill=\"currentColor\" d=\"M326.612 185.391c59.747 59.809 58.927 155.698.36 214.59-.11.12-.24.25-.36.37l-67.2 67.2c-59.27 59.27-155.699 59.262-214.96 0-59.27-59.26-59.27-155.7 0-214.96l37.106-37.106c9.84-9.84 26.786-3.3 27.294 10.606.648 17.722 3.826 35.527 9.69 52.721 1.986 5.822.567 12.262-3.783 16.612l-13.087 13.087c-28.026 28.026-28.905 73.66-1.155 101.96 28.024 28.579 74.086 28.749 102.325.51l67.2-67.19c28.191-28.191 28.073-73.757 0-101.83-3.701-3.694-7.429-6.564-10.341-8.569a16.037 16.037 0 0 1-6.947-12.606c-.396-10.567 3.348-21.456 11.698-29.806l21.054-21.055c5.521-5.521 14.182-6.199 20.584-1.731a152.482 152.482 0 0 1 20.522 17.197zM467.547 44.449c-59.261-59.262-155.69-59.27-214.96 0l-67.2 67.2c-.12.12-.25.25-.36.37-58.566 58.892-59.387 154.781.36 214.59a152.454 152.454 0 0 0 20.521 17.196c6.402 4.468 15.064 3.789 20.584-1.731l21.054-21.055c8.35-8.35 12.094-19.239 11.698-29.806a16.037 16.037 0 0 0-6.947-12.606c-2.912-2.005-6.64-4.875-10.341-8.569-28.073-28.073-28.191-73.639 0-101.83l67.2-67.19c28.239-28.239 74.3-28.069 102.325.51 27.75 28.3 26.872 73.934-1.155 101.96l-13.087 13.087c-4.35 4.35-5.769 10.79-3.783 16.612 5.864 17.194 9.042 34.999 9.69 52.721.509 13.906 17.454 20.446 27.294 10.606l37.106-37.106c59.271-59.259 59.271-155.699.001-214.959z\"></path></svg>\r\n");

/***/ }),

/***/ "../../node_modules/raw-loader/dist/cjs.js!./src/icons/paragraph-solid.svg":
/*!*********************************************************************************!*\
  !*** ../../node_modules/raw-loader/dist/cjs.js!./src/icons/paragraph-solid.svg ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<svg aria-hidden=\"true\" width=\"24\" height=\"50\" focusable=\"false\" data-prefix=\"fas\" data-icon=\"paragraph\" class=\"svg-inline--fa fa-paragraph fa-w-14\" role=\"img\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 448 512\"><path fill=\"currentColor\" d=\"M448 48v32a16 16 0 0 1-16 16h-48v368a16 16 0 0 1-16 16h-32a16 16 0 0 1-16-16V96h-32v368a16 16 0 0 1-16 16h-32a16 16 0 0 1-16-16V352h-32a160 160 0 0 1 0-320h240a16 16 0 0 1 16 16z\"></path></svg>\r\n");

/***/ }),

/***/ "../../node_modules/raw-loader/dist/cjs.js!./src/icons/select-input.svg":
/*!******************************************************************************!*\
  !*** ../../node_modules/raw-loader/dist/cjs.js!./src/icons/select-input.svg ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<svg class=\"gjs-block-svg\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">\r\n    <path class=\"gjs-block-svg-path\" d=\"M22,9 C22,8.4 21.5,8 20.75,8 L3.25,8 C2.5,8 2,8.4 2,9 L2,15 C2,15.6 2.5,16 3.25,16 L20.75,16 C21.5,16 22,15.6 22,15 L22,9 Z M21,15 L3,15 L3,9 L21,9 L21,15 Z\" fill-rule=\"nonzero\"></path>\r\n    <polygon class=\"gjs-block-svg-path\" transform=\"translate(18.500000, 12.000000) scale(1, -1) translate(-18.500000, -12.000000) \" points=\"18.5 11 20 13 17 13\"></polygon>\r\n    <rect class=\"gjs-block-svg-path\" x=\"4\" y=\"11.5\" width=\"11\" height=\"1\"></rect>\r\n</svg>\r\n");

/***/ }),

/***/ "../../node_modules/raw-loader/dist/cjs.js!./src/icons/textarea.svg":
/*!**************************************************************************!*\
  !*** ../../node_modules/raw-loader/dist/cjs.js!./src/icons/textarea.svg ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<svg class=\"gjs-block-svg\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">\r\n    <path class=\"gjs-block-svg-path\" d=\"M22,7.5 C22,6.6 21.5,6 20.75,6 L3.25,6 C2.5,6 2,6.6 2,7.5 L2,16.5 C2,17.4 2.5,18 3.25,18 L20.75,18 C21.5,18 22,17.4 22,16.5 L22,7.5 Z M21,17 L3,17 L3,7 L21,7 L21,17 Z\"></path>\r\n    <polygon class=\"gjs-block-svg-path\" points=\"4 8 5 8 5 12 4 12\"></polygon>\r\n    <polygon class=\"gjs-block-svg-path\" points=\"19 7 20 7 20 17 19 17\"></polygon>\r\n    <polygon class=\"gjs-block-svg-path\" points=\"20 8 21 8 21 9 20 9\"></polygon>\r\n    <polygon class=\"gjs-block-svg-path\" points=\"20 15 21 15 21 16 20 16\"></polygon>\r\n</svg>\r\n");

/***/ }),

/***/ "../../node_modules/raw-loader/dist/cjs.js!./src/icons/window-maximize-solid.svg":
/*!***************************************************************************************!*\
  !*** ../../node_modules/raw-loader/dist/cjs.js!./src/icons/window-maximize-solid.svg ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<svg aria-hidden=\"true\" width=\"24\" height=\"50\" focusable=\"false\" data-prefix=\"fas\" data-icon=\"window-maximize\" class=\"svg-inline--fa fa-window-maximize fa-w-16\" role=\"img\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\"><path fill=\"currentColor\" d=\"M464 32H48C21.5 32 0 53.5 0 80v352c0 26.5 21.5 48 48 48h416c26.5 0 48-21.5 48-48V80c0-26.5-21.5-48-48-48zm-16 160H64v-84c0-6.6 5.4-12 12-12h360c6.6 0 12 5.4 12 12v84z\"></path></svg>\r\n");

/***/ }),

/***/ "../../node_modules/raw-loader/dist/cjs.js!./src/icons/youtube-brands.svg":
/*!********************************************************************************!*\
  !*** ../../node_modules/raw-loader/dist/cjs.js!./src/icons/youtube-brands.svg ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<svg aria-hidden=\"true\" width=\"24\" height=\"50\" focusable=\"false\" data-prefix=\"fab\" data-icon=\"youtube\" class=\"svg-inline--fa fa-youtube fa-w-18\" role=\"img\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 576 512\"><path fill=\"currentColor\" d=\"M549.655 124.083c-6.281-23.65-24.787-42.276-48.284-48.597C458.781 64 288 64 288 64S117.22 64 74.629 75.486c-23.497 6.322-42.003 24.947-48.284 48.597-11.412 42.867-11.412 132.305-11.412 132.305s0 89.438 11.412 132.305c6.281 23.65 24.787 41.5 48.284 47.821C117.22 448 288 448 288 448s170.78 0 213.371-11.486c23.497-6.321 42.003-24.171 48.284-47.821 11.412-42.867 11.412-132.305 11.412-132.305s0-89.438-11.412-132.305zm-317.51 213.508V175.185l142.739 81.205-142.739 81.201z\"></path></svg>\r\n");

/***/ }),

/***/ "grapesjs":
/*!***************************!*\
  !*** external "grapesjs" ***!
  \***************************/
/***/ ((module) => {

module.exports = grapesjs;

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be isolated against other modules in the chunk.
(() => {
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var grapesjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! grapesjs */ "grapesjs");
/* harmony import */ var grapesjs__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(grapesjs__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _commands__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./commands */ "./src/commands.js");
/* harmony import */ var _traits__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./traits */ "./src/traits.js");
/* harmony import */ var _components__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./components */ "./src/components.js");
/* harmony import */ var _devices__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./devices */ "./src/devices.js");
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }





var loadCss = function loadCss(editor) {
  editor.Config.canvasCss += "\n    /* Layout */\n\n    .gjs-dashed .container, .gjs-dashed .container-fluid,\n    .gjs-dashed .row,\n    .gjs-dashed .col, .gjs-dashed [class^=\"col-\"] {\n      min-height: 1.5rem !important;\n    }\n    .gjs-dashed .w-100 {\n      min-height: .25rem !important;\n      background-color: rgba(0,0,0,0.1);\n    }\n    .gjs-dashed img {\n      min-width: 25px;\n      min-height: 25px;\n      background-color: rgba(0,0,0,0.5);\n    }\n\n    /* Components */\n\n    .gjs-dashed .btn-group,\n    .gjs-dashed .btn-toolbar {\n      padding-right: 1.5rem !important;\n      min-height: 1.5rem !important;\n    }\n    .gjs-dashed .card,\n    .gjs-dashed .card-group, .gjs-dashed .card-deck, .gjs-dashed .card-columns {\n      min-height: 1.5rem !important;\n    }\n    .gjs-dashed .collapse {\n      display: block !important;\n      min-height: 1.5rem !important;\n    }\n    .gjs-dashed .dropdown {\n      display: block !important;\n      min-height: 1.5rem !important;\n    }\n    .gjs-dashed .dropdown-menu {\n      min-height: 1.5rem !important;\n      display: block !important;\n    }\n  ";
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (grapesjs__WEBPACK_IMPORTED_MODULE_0___default().plugins.add('grapesjs-blocks-bootstrap5', function (editor) {
  var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  window.editor = editor;
  var opts_blocks = opts.blocks || {};
  var opts_labels = opts.labels || {};
  var opts_categories = opts.blockCategories || {};
  delete opts['blocks'];
  delete opts['labels'];
  delete opts['blockCategories'];
  var default_blocks = {
    "default": true,
    text: true,
    link: true,
    image: true,
    // LAYOUT
    container: true,
    row: true,
    column: true,
    column_break: true,
    media_object: true,
    // COMPONENTS
    alert: true,
    tabs: true,
    badge: true,
    button: true,
    button_group: true,
    button_toolbar: true,
    card: true,
    card_container: true,
    collapse: true,
    dropdown: true,
    video: true,
    // TYPOGRAPHY
    header: true,
    paragraph: true,
    // BASIC
    list: true,
    // FORMS
    form: true,
    input: true,
    form_group_input: true,
    input_group: true,
    textarea: true,
    select: true,
    label: true,
    checkbox: true,
    radio: true,
    jsfInputText: true
  };
  var default_labels = {
    // LAYOUT
    container: 'Container',
    row: 'Row',
    column: 'Column',
    column_break: 'Column Break',
    media_object: 'Media Object',
    // COMPONENTS
    alert: 'Alert',
    tabs: 'Tabs',
    tab: 'Tab',
    tabPane: 'Tab Pane',
    badge: 'Badge',
    button: 'Button',
    button_group: 'Button Group',
    button_toolbar: 'Button Toolbar',
    card: 'Card',
    card_container: 'Card Container',
    collapse: 'Collapse',
    dropdown: 'Dropdown',
    dropdown_menu: 'Dropdown Menu',
    dropdown_item: 'Dropdown Item',
    // MEDIA
    image: 'Image',
    video: 'Video',
    // TYPOGRAPHY
    text: 'Text',
    // BASIC
    header: 'Header',
    paragraph: 'Paragraph',
    link: 'Link',
    list: 'Simple List',
    // FORMS
    form: 'Form',
    input: 'Input',
    file_input: 'File',
    form_group_input: 'Form Group',
    input_group: 'Input group',
    textarea: 'Textarea',
    select: 'Select',
    select_option: '- Select option -',
    option: 'Option',
    label: 'Label',
    checkbox: 'Checkbox',
    radio: 'Radio',
    trait_method: 'Method',
    trait_enctype: 'Encoding Type',
    trait_multiple: 'Multiple',
    trait_action: 'Action',
    trait_state: 'State',
    trait_id: 'ID',
    trait_for: 'For',
    trait_name: 'Name',
    trait_placeholder: 'Placeholder',
    trait_value: 'Value',
    trait_required: 'Required',
    trait_type: 'Type',
    trait_options: 'Options',
    trait_checked: 'Checked',
    type_text: 'Text',
    type_email: 'Email',
    type_password: 'Password',
    type_number: 'Number',
    type_date: 'Date',
    type_hidden: 'Hidden',
    type_submit: 'Submit',
    type_reset: 'Reset',
    type_button: 'Button',
    jsfInputText: 'JSF Input Text'
  };
  var default_categories = {
    'layout': true,
    'media': true,
    'components': true,
    'typography': true,
    'basic': true,
    'forms': true,
    'jsfForms': true
  };
  var options = _objectSpread(_objectSpread({}, {
    blocks: Object.assign(default_blocks, opts_blocks),
    labels: Object.assign(default_labels, opts_labels),
    blockCategories: Object.assign(default_categories, opts_categories),
    optionsStringSeparator: '::',
    gridDevices: true,
    gridDevicesPanel: false,
    classNavigation: 'nav',
    classTabPanes: 'tab-content',
    classTabPane: 'tab-pane',
    classTab: 'nav-item'
  }), opts);
  console.log("******** options are");
  console.log(options);

  // Add components
  (0,_commands__WEBPACK_IMPORTED_MODULE_1__["default"])(editor, options);
  (0,_traits__WEBPACK_IMPORTED_MODULE_2__["default"])(editor, options);
  (0,_components__WEBPACK_IMPORTED_MODULE_3__["default"])(editor, options);
  (0,_devices__WEBPACK_IMPORTED_MODULE_4__["default"])(editor, options);
  loadCss(editor, options);
}));
})();

/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QU8sQ0FBQztFQUMvQjBWLG9EQUFXLENBQUN6ZixNQUFNLEVBQUUrSixPQUFPLENBQUM7RUFDNUIyVixPQUFPLENBQUMxZixNQUFNLEVBQUUrSixPQUFPLENBQUM7QUFDMUIsQ0FBQyxDQUFDLEUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ncmFwZXNqcy1ibG9ja3MtYm9vdHN0cmFwNS8uL3NyYy9ib290c3RyYXAtYnRuLXNpemVzLmpzIiwid2VicGFjazovL2dyYXBlc2pzLWJsb2Nrcy1ib290c3RyYXA1Ly4vc3JjL2Jvb3RzdHJhcC1jb250ZXh0cy5qcyIsIndlYnBhY2s6Ly9ncmFwZXNqcy1ibG9ja3MtYm9vdHN0cmFwNS8uL3NyYy9jb21tYW5kcy5qcyIsIndlYnBhY2s6Ly9ncmFwZXNqcy1ibG9ja3MtYm9vdHN0cmFwNS8uL3NyYy9jb21wb25lbnRzLmpzIiwid2VicGFjazovL2dyYXBlc2pzLWJsb2Nrcy1ib290c3RyYXA1Ly4vc3JjL2NvbXBvbmVudHMvQWxlcnQuanMiLCJ3ZWJwYWNrOi8vZ3JhcGVzanMtYmxvY2tzLWJvb3RzdHJhcDUvLi9zcmMvY29tcG9uZW50cy9CYWRnZS5qcyIsIndlYnBhY2s6Ly9ncmFwZXNqcy1ibG9ja3MtYm9vdHN0cmFwNS8uL3NyYy9jb21wb25lbnRzL0J1dHRvbi5qcyIsIndlYnBhY2s6Ly9ncmFwZXNqcy1ibG9ja3MtYm9vdHN0cmFwNS8uL3NyYy9jb21wb25lbnRzL0J1dHRvbkdyb3VwLmpzIiwid2VicGFjazovL2dyYXBlc2pzLWJsb2Nrcy1ib290c3RyYXA1Ly4vc3JjL2NvbXBvbmVudHMvQnV0dG9uVG9vbGJhci5qcyIsIndlYnBhY2s6Ly9ncmFwZXNqcy1ibG9ja3MtYm9vdHN0cmFwNS8uL3NyYy9jb21wb25lbnRzL0NhcmQuanMiLCJ3ZWJwYWNrOi8vZ3JhcGVzanMtYmxvY2tzLWJvb3RzdHJhcDUvLi9zcmMvY29tcG9uZW50cy9DaGVja2JveC5qcyIsIndlYnBhY2s6Ly9ncmFwZXNqcy1ibG9ja3MtYm9vdHN0cmFwNS8uL3NyYy9jb21wb25lbnRzL0NvbGxhcHNlLmpzIiwid2VicGFjazovL2dyYXBlc2pzLWJsb2Nrcy1ib290c3RyYXA1Ly4vc3JjL2NvbXBvbmVudHMvQ29sdW1uLmpzIiwid2VicGFjazovL2dyYXBlc2pzLWJsb2Nrcy1ib290c3RyYXA1Ly4vc3JjL2NvbXBvbmVudHMvQ29sdW1uQnJlYWsuanMiLCJ3ZWJwYWNrOi8vZ3JhcGVzanMtYmxvY2tzLWJvb3RzdHJhcDUvLi9zcmMvY29tcG9uZW50cy9Db250YWluZXIuanMiLCJ3ZWJwYWNrOi8vZ3JhcGVzanMtYmxvY2tzLWJvb3RzdHJhcDUvLi9zcmMvY29tcG9uZW50cy9EZWZhdWx0LmpzIiwid2VicGFjazovL2dyYXBlc2pzLWJsb2Nrcy1ib290c3RyYXA1Ly4vc3JjL2NvbXBvbmVudHMvRHJvcGRvd24uanMiLCJ3ZWJwYWNrOi8vZ3JhcGVzanMtYmxvY2tzLWJvb3RzdHJhcDUvLi9zcmMvY29tcG9uZW50cy9GaWxlSW5wdXQuanMiLCJ3ZWJwYWNrOi8vZ3JhcGVzanMtYmxvY2tzLWJvb3RzdHJhcDUvLi9zcmMvY29tcG9uZW50cy9Gb3JtLmpzIiwid2VicGFjazovL2dyYXBlc2pzLWJsb2Nrcy1ib290c3RyYXA1Ly4vc3JjL2NvbXBvbmVudHMvSGVhZGVyLmpzIiwid2VicGFjazovL2dyYXBlc2pzLWJsb2Nrcy1ib290c3RyYXA1Ly4vc3JjL2NvbXBvbmVudHMvSW1hZ2UuanMiLCJ3ZWJwYWNrOi8vZ3JhcGVzanMtYmxvY2tzLWJvb3RzdHJhcDUvLi9zcmMvY29tcG9uZW50cy9JbnB1dC5qcyIsIndlYnBhY2s6Ly9ncmFwZXNqcy1ibG9ja3MtYm9vdHN0cmFwNS8uL3NyYy9jb21wb25lbnRzL0lucHV0R3JvdXAuanMiLCJ3ZWJwYWNrOi8vZ3JhcGVzanMtYmxvY2tzLWJvb3RzdHJhcDUvLi9zcmMvY29tcG9uZW50cy9Kc2ZJbnB1dC5qcyIsIndlYnBhY2s6Ly9ncmFwZXNqcy1ibG9ja3MtYm9vdHN0cmFwNS8uL3NyYy9jb21wb25lbnRzL0xhYmVsLmpzIiwid2VicGFjazovL2dyYXBlc2pzLWJsb2Nrcy1ib290c3RyYXA1Ly4vc3JjL2NvbXBvbmVudHMvTGluay5qcyIsIndlYnBhY2s6Ly9ncmFwZXNqcy1ibG9ja3MtYm9vdHN0cmFwNS8uL3NyYy9jb21wb25lbnRzL01lZGlhT2JqZWN0LmpzIiwid2VicGFjazovL2dyYXBlc2pzLWJsb2Nrcy1ib290c3RyYXA1Ly4vc3JjL2NvbXBvbmVudHMvUGFyYWdyYXBoLmpzIiwid2VicGFjazovL2dyYXBlc2pzLWJsb2Nrcy1ib290c3RyYXA1Ly4vc3JjL2NvbXBvbmVudHMvUmFkaW8uanMiLCJ3ZWJwYWNrOi8vZ3JhcGVzanMtYmxvY2tzLWJvb3RzdHJhcDUvLi9zcmMvY29tcG9uZW50cy9Sb3cuanMiLCJ3ZWJwYWNrOi8vZ3JhcGVzanMtYmxvY2tzLWJvb3RzdHJhcDUvLi9zcmMvY29tcG9uZW50cy9TZWxlY3QuanMiLCJ3ZWJwYWNrOi8vZ3JhcGVzanMtYmxvY2tzLWJvb3RzdHJhcDUvLi9zcmMvY29tcG9uZW50cy9UZXh0LmpzIiwid2VicGFjazovL2dyYXBlc2pzLWJsb2Nrcy1ib290c3RyYXA1Ly4vc3JjL2NvbXBvbmVudHMvVGV4dGFyZWEuanMiLCJ3ZWJwYWNrOi8vZ3JhcGVzanMtYmxvY2tzLWJvb3RzdHJhcDUvLi9zcmMvY29tcG9uZW50cy90YWJzL1RhYi5qcyIsIndlYnBhY2s6Ly9ncmFwZXNqcy1ibG9ja3MtYm9vdHN0cmFwNS8uL3NyYy9jb21wb25lbnRzL3RhYnMvVGFiUGFuZS5qcyIsIndlYnBhY2s6Ly9ncmFwZXNqcy1ibG9ja3MtYm9vdHN0cmFwNS8uL3NyYy9jb21wb25lbnRzL3RhYnMvVGFic05hdmlnYXRpb24uanMiLCJ3ZWJwYWNrOi8vZ3JhcGVzanMtYmxvY2tzLWJvb3RzdHJhcDUvLi9zcmMvY29tcG9uZW50cy90YWJzL1RhYnNQYW5lcy5qcyIsIndlYnBhY2s6Ly9ncmFwZXNqcy1ibG9ja3MtYm9vdHN0cmFwNS8uL3NyYy9jb21wb25lbnRzL3RhYnMvY29uc3RhbnRzLmpzIiwid2VicGFjazovL2dyYXBlc2pzLWJsb2Nrcy1ib290c3RyYXA1Ly4vc3JjL2NvbXBvbmVudHMvdmlkZW8vRW1iZWQuanMiLCJ3ZWJwYWNrOi8vZ3JhcGVzanMtYmxvY2tzLWJvb3RzdHJhcDUvLi9zcmMvY29tcG9uZW50cy92aWRlby9WaWRlby5qcyIsIndlYnBhY2s6Ly9ncmFwZXNqcy1ibG9ja3MtYm9vdHN0cmFwNS8uL3NyYy9kZXZpY2VzLmpzIiwid2VicGFjazovL2dyYXBlc2pzLWJsb2Nrcy1ib290c3RyYXA1Ly4vc3JjL3RyYWl0cy5qcyIsIndlYnBhY2s6Ly9ncmFwZXNqcy1ibG9ja3MtYm9vdHN0cmFwNS8uL3NyYy91dGlscy5qcyIsIndlYnBhY2s6Ly9ncmFwZXNqcy1ibG9ja3MtYm9vdHN0cmFwNS8uL3NyYy9pY29ucy9idXR0b24uc3ZnIiwid2VicGFjazovL2dyYXBlc2pzLWJsb2Nrcy1ib290c3RyYXA1Ly4vc3JjL2ljb25zL2NhcmV0LXNxdWFyZS1kb3duLXJlZ3VsYXIuc3ZnIiwid2VicGFjazovL2dyYXBlc2pzLWJsb2Nrcy1ib290c3RyYXA1Ly4vc3JjL2ljb25zL2NlcnRpZmljYXRlLXNvbGlkLnN2ZyIsIndlYnBhY2s6Ly9ncmFwZXNqcy1ibG9ja3MtYm9vdHN0cmFwNS8uL3NyYy9pY29ucy9jaGVjay1zcXVhcmUtc29saWQuc3ZnIiwid2VicGFjazovL2dyYXBlc2pzLWJsb2Nrcy1ib290c3RyYXA1Ly4vc3JjL2ljb25zL2NpcmNsZS1zb2xpZC5zdmciLCJ3ZWJwYWNrOi8vZ3JhcGVzanMtYmxvY2tzLWJvb3RzdHJhcDUvLi9zcmMvaWNvbnMvY29sdW1ucy1zb2xpZC5zdmciLCJ3ZWJwYWNrOi8vZ3JhcGVzanMtYmxvY2tzLWJvb3RzdHJhcDUvLi9zcmMvaWNvbnMvY29tcHJlc3Mtc29saWQuc3ZnIiwid2VicGFjazovL2dyYXBlc2pzLWJsb2Nrcy1ib290c3RyYXA1Ly4vc3JjL2ljb25zL2NyZWRpdC1jYXJkLXNvbGlkLnN2ZyIsIndlYnBhY2s6Ly9ncmFwZXNqcy1ibG9ja3MtYm9vdHN0cmFwNS8uL3NyYy9pY29ucy9kb3QtY2lyY2xlLXJlZ3VsYXIuc3ZnIiwid2VicGFjazovL2dyYXBlc2pzLWJsb2Nrcy1ib290c3RyYXA1Ly4vc3JjL2ljb25zL2VsbGlwc2lzLWgtc29saWQuc3ZnIiwid2VicGFjazovL2dyYXBlc2pzLWJsb2Nrcy1ib290c3RyYXA1Ly4vc3JjL2ljb25zL2VxdWFscy1zb2xpZC5zdmciLCJ3ZWJwYWNrOi8vZ3JhcGVzanMtYmxvY2tzLWJvb3RzdHJhcDUvLi9zcmMvaWNvbnMvZXhjbGFtYXRpb24tdHJpYW5nbGUtc29saWQuc3ZnIiwid2VicGFjazovL2dyYXBlc2pzLWJsb2Nrcy1ib290c3RyYXA1Ly4vc3JjL2ljb25zL2ZpbGUtaW5wdXQuc3ZnIiwid2VicGFjazovL2dyYXBlc2pzLWJsb2Nrcy1ib290c3RyYXA1Ly4vc3JjL2ljb25zL2ZvbnQtc29saWQuc3ZnIiwid2VicGFjazovL2dyYXBlc2pzLWJsb2Nrcy1ib290c3RyYXA1Ly4vc3JjL2ljb25zL2Zvcm0tZ3JvdXAuc3ZnIiwid2VicGFjazovL2dyYXBlc2pzLWJsb2Nrcy1ib290c3RyYXA1Ly4vc3JjL2ljb25zL2Zvcm0uc3ZnIiwid2VicGFjazovL2dyYXBlc2pzLWJsb2Nrcy1ib290c3RyYXA1Ly4vc3JjL2ljb25zL2hlYWRpbmctc29saWQuc3ZnIiwid2VicGFjazovL2dyYXBlc2pzLWJsb2Nrcy1ib290c3RyYXA1Ly4vc3JjL2ljb25zL2ltYWdlLXNvbGlkLnN2ZyIsIndlYnBhY2s6Ly9ncmFwZXNqcy1ibG9ja3MtYm9vdHN0cmFwNS8uL3NyYy9pY29ucy9pbnB1dC1ncm91cC5zdmciLCJ3ZWJwYWNrOi8vZ3JhcGVzanMtYmxvY2tzLWJvb3RzdHJhcDUvLi9zcmMvaWNvbnMvaW5wdXQuc3ZnIiwid2VicGFjazovL2dyYXBlc2pzLWJsb2Nrcy1ib290c3RyYXA1Ly4vc3JjL2ljb25zL2xhYmVsLnN2ZyIsIndlYnBhY2s6Ly9ncmFwZXNqcy1ibG9ja3MtYm9vdHN0cmFwNS8uL3NyYy9pY29ucy9saW5rLXNvbGlkLnN2ZyIsIndlYnBhY2s6Ly9ncmFwZXNqcy1ibG9ja3MtYm9vdHN0cmFwNS8uL3NyYy9pY29ucy9wYXJhZ3JhcGgtc29saWQuc3ZnIiwid2VicGFjazovL2dyYXBlc2pzLWJsb2Nrcy1ib290c3RyYXA1Ly4vc3JjL2ljb25zL3NlbGVjdC1pbnB1dC5zdmciLCJ3ZWJwYWNrOi8vZ3JhcGVzanMtYmxvY2tzLWJvb3RzdHJhcDUvLi9zcmMvaWNvbnMvdGV4dGFyZWEuc3ZnIiwid2VicGFjazovL2dyYXBlc2pzLWJsb2Nrcy1ib290c3RyYXA1Ly4vc3JjL2ljb25zL3dpbmRvdy1tYXhpbWl6ZS1zb2xpZC5zdmciLCJ3ZWJwYWNrOi8vZ3JhcGVzanMtYmxvY2tzLWJvb3RzdHJhcDUvLi9zcmMvaWNvbnMveW91dHViZS1icmFuZHMuc3ZnIiwid2VicGFjazovL2dyYXBlc2pzLWJsb2Nrcy1ib290c3RyYXA1L2V4dGVybmFsIHZhciBcImdyYXBlc2pzXCIiLCJ3ZWJwYWNrOi8vZ3JhcGVzanMtYmxvY2tzLWJvb3RzdHJhcDUvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vZ3JhcGVzanMtYmxvY2tzLWJvb3RzdHJhcDUvd2VicGFjay9ydW50aW1lL2NvbXBhdCBnZXQgZGVmYXVsdCBleHBvcnQiLCJ3ZWJwYWNrOi8vZ3JhcGVzanMtYmxvY2tzLWJvb3RzdHJhcDUvd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovL2dyYXBlc2pzLWJsb2Nrcy1ib290c3RyYXA1L3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vZ3JhcGVzanMtYmxvY2tzLWJvb3RzdHJhcDUvd2VicGFjay9ydW50aW1lL21ha2UgbmFtZXNwYWNlIG9iamVjdCIsIndlYnBhY2s6Ly9ncmFwZXNqcy1ibG9ja3MtYm9vdHN0cmFwNS8uL3NyYy9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCB7XHJcbiAgICAnbGcnOiAnTGFyZ2UnLFxyXG4gICAgJ3NtJzogJ1NtYWxsJ1xyXG59O1xyXG4iLCJleHBvcnQgZGVmYXVsdCBbXHJcbiAgICAncHJpbWFyeScsXHJcbiAgICAnc2Vjb25kYXJ5JyxcclxuICAgICdzdWNjZXNzJyxcclxuICAgICdpbmZvJyxcclxuICAgICd3YXJuaW5nJyxcclxuICAgICdkYW5nZXInLFxyXG4gICAgJ2xpZ2h0JyxcclxuICAgICdkYXJrJyxcclxuXTtcclxuIiwiZXhwb3J0IGRlZmF1bHQgKGVkaXRvciwgY29uZmlnID0ge30pID0+IHtcclxuICBjb25zdCBjb21tYW5kcyA9IGVkaXRvci5Db21tYW5kcztcclxufVxyXG4iLCJpbXBvcnQgQ29sbGFwc2UsIHtDb2xsYXBzZUJsb2NrfSBmcm9tICcuL2NvbXBvbmVudHMvQ29sbGFwc2UnO1xyXG5pbXBvcnQgRHJvcGRvd24sIHtEcm9wRG93bkJsb2NrfSBmcm9tICcuL2NvbXBvbmVudHMvRHJvcGRvd24nO1xyXG5pbXBvcnQgVGFic05hdmlnYXRpb24sIHtUYWJzQmxvY2t9IGZyb20gXCIuL2NvbXBvbmVudHMvdGFicy9UYWJzTmF2aWdhdGlvblwiO1xyXG5pbXBvcnQgVGFic1BhbmVzIGZyb20gXCIuL2NvbXBvbmVudHMvdGFicy9UYWJzUGFuZXNcIjtcclxuaW1wb3J0IFRhYiBmcm9tIFwiLi9jb21wb25lbnRzL3RhYnMvVGFiXCI7XHJcbmltcG9ydCBUYWJQYW5lIGZyb20gXCIuL2NvbXBvbmVudHMvdGFicy9UYWJQYW5lXCI7XHJcbmltcG9ydCBGb3JtLCB7Rm9ybUJsb2NrfSBmcm9tIFwiLi9jb21wb25lbnRzL0Zvcm1cIjtcclxuaW1wb3J0IElucHV0LCB7SW5wdXRCbG9ja30gZnJvbSBcIi4vY29tcG9uZW50cy9JbnB1dFwiO1xyXG5pbXBvcnQgSW5wdXRHcm91cCwge0lucHV0R3JvdXBCbG9ja30gZnJvbSBcIi4vY29tcG9uZW50cy9JbnB1dEdyb3VwXCI7XHJcbmltcG9ydCBUZXh0YXJlYSwge1RleHRhcmVhQmxvY2t9IGZyb20gXCIuL2NvbXBvbmVudHMvVGV4dGFyZWFcIjtcclxuaW1wb3J0IFNlbGVjdCwge1NlbGVjdEJsb2NrfSBmcm9tIFwiLi9jb21wb25lbnRzL1NlbGVjdFwiO1xyXG5pbXBvcnQgQ2hlY2tib3gsIHtDaGVja2JveEJsb2NrfSBmcm9tIFwiLi9jb21wb25lbnRzL0NoZWNrYm94XCI7XHJcbmltcG9ydCBSYWRpbywge1JhZGlvQmxvY2t9IGZyb20gXCIuL2NvbXBvbmVudHMvUmFkaW9cIjtcclxuaW1wb3J0IEJ1dHRvbiwge0J1dHRvbkJsb2NrfSBmcm9tIFwiLi9jb21wb25lbnRzL0J1dHRvblwiO1xyXG5pbXBvcnQgQnV0dG9uR3JvdXAsIHtCdXR0b25Hcm91cEJsb2NrfSBmcm9tIFwiLi9jb21wb25lbnRzL0J1dHRvbkdyb3VwXCI7XHJcbmltcG9ydCBCdXR0b25Ub29sYmFyLCB7QnV0dG9uVG9vbGJhckJsb2NrfSBmcm9tIFwiLi9jb21wb25lbnRzL0J1dHRvblRvb2xiYXJcIjtcclxuaW1wb3J0IExhYmVsLCB7TGFiZWxCbG9ja30gZnJvbSBcIi4vY29tcG9uZW50cy9MYWJlbFwiO1xyXG5pbXBvcnQgTGluaywge0xpbmtCbG9ja30gZnJvbSBcIi4vY29tcG9uZW50cy9MaW5rXCI7XHJcbmltcG9ydCBGaWxlSW5wdXQsIHtGaWxlSW5wdXRCbG9ja30gZnJvbSBcIi4vY29tcG9uZW50cy9GaWxlSW5wdXRcIjtcclxuaW1wb3J0IEltYWdlLCB7SW1hZ2VCbG9ja30gZnJvbSBcIi4vY29tcG9uZW50cy9JbWFnZVwiO1xyXG5pbXBvcnQgVmlkZW8sIHtWaWRlb0Jsb2NrfSBmcm9tIFwiLi9jb21wb25lbnRzL3ZpZGVvL1ZpZGVvXCI7XHJcbmltcG9ydCBFbWJlZCBmcm9tIFwiLi9jb21wb25lbnRzL3ZpZGVvL0VtYmVkXCI7XHJcbmltcG9ydCBQYXJhZ3JhcGgsIHtQYXJhZ3JhcGhCbG9ja30gZnJvbSBcIi4vY29tcG9uZW50cy9QYXJhZ3JhcGhcIjtcclxuaW1wb3J0IEhlYWRlciwge0hlYWRlckJsb2NrfSBmcm9tIFwiLi9jb21wb25lbnRzL0hlYWRlclwiO1xyXG5pbXBvcnQgQ2FyZCwge0NhcmRCbG9ja30gZnJvbSBcIi4vY29tcG9uZW50cy9DYXJkXCI7XHJcbmltcG9ydCBCYWRnZSwge0JhZGdlQmxvY2t9IGZyb20gXCIuL2NvbXBvbmVudHMvQmFkZ2VcIjtcclxuaW1wb3J0IEFsZXJ0LCB7QWxlcnRCbG9ja30gZnJvbSBcIi4vY29tcG9uZW50cy9BbGVydFwiO1xyXG5pbXBvcnQgTWVkaWFPYmplY3QsIHtNZWRpYU9iamVjdEJsb2NrfSBmcm9tIFwiLi9jb21wb25lbnRzL01lZGlhT2JqZWN0XCI7XHJcbmltcG9ydCBDb2x1bW5CcmVhaywge0NvbHVtbkJyZWFrQmxvY2t9IGZyb20gXCIuL2NvbXBvbmVudHMvQ29sdW1uQnJlYWtcIjtcclxuaW1wb3J0IENvbHVtbiwge0NvbHVtbkJsb2NrfSBmcm9tIFwiLi9jb21wb25lbnRzL0NvbHVtblwiO1xyXG5pbXBvcnQgUm93LCB7Um93QmxvY2t9IGZyb20gXCIuL2NvbXBvbmVudHMvUm93XCI7XHJcbmltcG9ydCBDb250YWluZXIsIHtDb250YWluZXJCbG9ja30gZnJvbSBcIi4vY29tcG9uZW50cy9Db250YWluZXJcIjtcclxuaW1wb3J0IFRleHQsIHtUZXh0QmxvY2t9IGZyb20gXCIuL2NvbXBvbmVudHMvVGV4dFwiO1xyXG5pbXBvcnQgRGVmYXVsdCBmcm9tIFwiLi9jb21wb25lbnRzL0RlZmF1bHRcIjtcclxuXHJcbmltcG9ydCBKc2ZJbnB1dCwge0pzZklucHV0QmxvY2t9IGZyb20gXCIuL2NvbXBvbmVudHMvSnNmSW5wdXRcIlxyXG5cclxuXHJcbmV4cG9ydCBkZWZhdWx0IChlZGl0b3IsIGNvbmZpZyA9IHt9KSA9PiB7XHJcbiAgY29uc3QgYyA9IGNvbmZpZztcclxuICBjb25zdCBkb21jID0gZWRpdG9yLkRvbUNvbXBvbmVudHM7XHJcbiAgY29uc3QgYmxvY2tzID0gYy5ibG9ja3M7XHJcbiAgY29uc3QgYm0gPSBlZGl0b3IuQmxvY2tNYW5hZ2VyO1xyXG4gIGNvbnN0IGNhdHMgPSBjLmJsb2NrQ2F0ZWdvcmllcztcclxuXHJcbiAgY29uc3QgdHJhaXRzID0ge1xyXG4gICAgaWQ6IHtcclxuICAgICAgbmFtZTogJ2lkJyxcclxuICAgICAgbGFiZWw6IGMubGFiZWxzLnRyYWl0X2lkLFxyXG4gICAgfSxcclxuICAgIGZvcjoge1xyXG4gICAgICBuYW1lOiAnZm9yJyxcclxuICAgICAgbGFiZWw6IGMubGFiZWxzLnRyYWl0X2ZvcixcclxuICAgIH0sXHJcbiAgICBuYW1lOiB7XHJcbiAgICAgIG5hbWU6ICduYW1lJyxcclxuICAgICAgbGFiZWw6IGMubGFiZWxzLnRyYWl0X25hbWUsXHJcbiAgICB9LFxyXG4gICAgcGxhY2Vob2xkZXI6IHtcclxuICAgICAgbmFtZTogJ3BsYWNlaG9sZGVyJyxcclxuICAgICAgbGFiZWw6IGMubGFiZWxzLnRyYWl0X3BsYWNlaG9sZGVyLFxyXG4gICAgfSxcclxuICAgIHZhbHVlOiB7XHJcbiAgICAgIG5hbWU6ICd2YWx1ZScsXHJcbiAgICAgIGxhYmVsOiBjLmxhYmVscy50cmFpdF92YWx1ZSxcclxuICAgIH0sXHJcbiAgICByZXF1aXJlZDoge1xyXG4gICAgICB0eXBlOiAnY2hlY2tib3gnLFxyXG4gICAgICBuYW1lOiAncmVxdWlyZWQnLFxyXG4gICAgICBsYWJlbDogYy5sYWJlbHMudHJhaXRfcmVxdWlyZWQsXHJcbiAgICB9LFxyXG4gICAgY2hlY2tlZDoge1xyXG4gICAgICBsYWJlbDogYy5sYWJlbHMudHJhaXRfY2hlY2tlZCxcclxuICAgICAgdHlwZTogJ2NoZWNrYm94JyxcclxuICAgICAgbmFtZTogJ2NoZWNrZWQnLFxyXG4gICAgICBjaGFuZ2VQcm9wOiAxXHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgaWYgKGNhdHMubWVkaWEpIHtcclxuICAgIGlmIChibG9ja3MuaW1hZ2UpIHtcclxuICAgICAgSW1hZ2VCbG9jayhibSwgYy5sYWJlbHMuaW1hZ2UpO1xyXG4gICAgICBJbWFnZShkb21jKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoYmxvY2tzLnZpZGVvKSB7XHJcbiAgICAgIEVtYmVkKGRvbWMpO1xyXG4gICAgICBWaWRlb0Jsb2NrKGJtLCBjLmxhYmVscy52aWRlbyk7XHJcbiAgICAgIFZpZGVvKGRvbWMpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLy8gUmVidWlsZCB0aGUgZGVmYXVsdCBjb21wb25lbnQgYW5kIGFkZCB1dGlsaXR5IHNldHRpbmdzIHRvIGl0IChib3JkZXIsIGJnLCBjb2xvciwgZXRjKVxyXG4gIGlmIChjYXRzLmJhc2ljKSB7XHJcbiAgICBpZiAoYmxvY2tzLmRlZmF1bHQpIHtcclxuICAgICAgRGVmYXVsdChkb21jKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBSZWJ1aWxkIHRoZSB0ZXh0IGNvbXBvbmVudCBhbmQgYWRkIGRpc3BsYXkgdXRpbGl0eSBzZXR0aW5nXHJcbiAgICBpZiAoYmxvY2tzLnRleHQpIHtcclxuICAgICAgVGV4dEJsb2NrKGJtLCBjLmxhYmVscy50ZXh0KTtcclxuICAgICAgVGV4dChkb21jKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBSZWJ1aWxkIHRoZSBsaW5rIGNvbXBvbmVudCB3aXRoIHNldHRpbmdzIGZvciBjb2xsYXBzZS1jb250cm9sXHJcbiAgICBpZiAoYmxvY2tzLmxpbmspIHtcclxuICAgICAgTGlua0Jsb2NrKGJtLCBjLmxhYmVscy5saW5rKTtcclxuICAgICAgTGluayhlZGl0b3IpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIEJhc2ljXHJcbiAgICAvKmlmIChibG9ja3MubGlzdCkge1xyXG4gICAgICBMaXN0QmxvY2soYm0sIGMubGFiZWxzLmxpc3QpXHJcbiAgICAgIExpc3QoZG9tYyk7XHJcbiAgICB9Ki9cclxuXHJcbiAgICAvKmlmIChibG9ja3MuZGVzY3JpcHRpb25fbGlzdCkge1xyXG4gICAgfSovXHJcblxyXG4gIH1cclxuXHJcbiAgLy8gTEFZT1VUXHJcbiAgaWYgKGNhdHMubGF5b3V0KSB7XHJcbiAgICBpZiAoYmxvY2tzLmNvbnRhaW5lcikge1xyXG4gICAgICBDb250YWluZXJCbG9jayhibSwgYy5sYWJlbHMuY29udGFpbmVyKTtcclxuICAgICAgQ29udGFpbmVyKGRvbWMpO1xyXG4gICAgfVxyXG4gICAgaWYgKGJsb2Nrcy5yb3cpIHtcclxuICAgICAgUm93QmxvY2soYm0sIGMubGFiZWxzLnJvdyk7XHJcbiAgICAgIFJvdyhkb21jKTtcclxuICAgIH1cclxuICAgIGlmIChibG9ja3MuY29sdW1uKSB7XHJcbiAgICAgIENvbHVtbkJsb2NrKGJtLCBjLmxhYmVscy5jb2x1bW4pO1xyXG4gICAgICBDb2x1bW4oZG9tYywgZWRpdG9yKTtcclxuXHJcbiAgICAgIENvbHVtbkJyZWFrQmxvY2soYm0sIGMubGFiZWxzLmNvbHVtbl9icmVhayk7XHJcbiAgICAgIENvbHVtbkJyZWFrKGRvbWMpO1xyXG4gICAgfVxyXG4gICAgLy8gTWVkaWEgb2JqZWN0XHJcbiAgICBpZiAoYmxvY2tzLm1lZGlhX29iamVjdCkge1xyXG4gICAgICBNZWRpYU9iamVjdEJsb2NrKGJtLCBjLmxhYmVscy5tZWRpYV9vYmplY3QpO1xyXG4gICAgICBNZWRpYU9iamVjdChkb21jKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8vIEJvb3RzdHJhcCBDT01QT05FTlRTXHJcbiAgaWYgKGNhdHMuY29tcG9uZW50cykge1xyXG4gICAgLy8gQWxlcnRcclxuICAgIGlmIChibG9ja3MuYWxlcnQpIHtcclxuICAgICAgQWxlcnRCbG9jayhibSwgYy5sYWJlbHMuYWxlcnQpO1xyXG4gICAgICBBbGVydChkb21jKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoYmxvY2tzLnRhYnMpIHtcclxuICAgICAgVGFic0Jsb2NrKGJtLCBjKTtcclxuICAgICAgVGFic05hdmlnYXRpb24oZG9tYywgY29uZmlnKTtcclxuICAgICAgVGFiKGRvbWMsIGNvbmZpZyk7XHJcbiAgICAgIFRhYnNQYW5lcyhkb21jLCBjb25maWcpO1xyXG4gICAgICBUYWJQYW5lKGRvbWMsIGNvbmZpZyk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gQmFkZ2VcclxuICAgIGlmIChibG9ja3MuYmFkZ2UpIHtcclxuICAgICAgQmFkZ2VCbG9jayhibSwgYy5sYWJlbHMuYmFkZ2UpO1xyXG4gICAgICBCYWRnZShkb21jKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBDYXJkXHJcbiAgICBpZiAoYmxvY2tzLmNhcmQpIHtcclxuICAgICAgQ2FyZEJsb2NrKGJtLCBjKTtcclxuICAgICAgQ2FyZChkb21jLCBlZGl0b3IpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIENvbGxhcHNlXHJcbiAgICBpZiAoYmxvY2tzLmNvbGxhcHNlKSB7XHJcbiAgICAgIENvbGxhcHNlQmxvY2soYm0sIGMubGFiZWxzLmNvbGxhcHNlKTtcclxuICAgICAgQ29sbGFwc2UoZWRpdG9yKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBEcm9wZG93blxyXG4gICAgaWYgKGJsb2Nrcy5kcm9wZG93bikge1xyXG4gICAgICBEcm9wRG93bkJsb2NrKGJtLCBjLmxhYmVscy5kcm9wZG93bik7XHJcbiAgICAgIERyb3Bkb3duKGVkaXRvcik7XHJcbiAgICB9XHJcblxyXG4gIH1cclxuXHJcbiAgLy8gVFlQT0dSQVBIWVxyXG4gIGlmIChjYXRzLnR5cG9ncmFwaHkpIHtcclxuICAgIGlmIChibG9ja3MuaGVhZGVyKSB7XHJcbiAgICAgIEhlYWRlckJsb2NrKGJtLCBjLmxhYmVscy5oZWFkZXIpO1xyXG4gICAgICBIZWFkZXIoZG9tYyk7XHJcbiAgICB9XHJcbiAgICBpZiAoYmxvY2tzLnBhcmFncmFwaCkge1xyXG4gICAgICBQYXJhZ3JhcGhCbG9jayhibSwgYy5sYWJlbHMucGFyYWdyYXBoKTtcclxuICAgICAgUGFyYWdyYXBoKGRvbWMpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgaWYoY2F0cy5mb3Jtcykge1xyXG4gICAgaWYgKGJsb2Nrcy5mb3JtKSB7XHJcbiAgICAgIEZvcm1CbG9jayhibSwgYy5sYWJlbHMuZm9ybSk7XHJcbiAgICAgIEZvcm0oZG9tYywgdHJhaXRzLCBjb25maWcpO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChibG9ja3MuaW5wdXQpIHtcclxuICAgICAgSW5wdXRCbG9jayhibSwgYy5sYWJlbHMuaW5wdXQpO1xyXG4gICAgICBJbnB1dChkb21jLCB0cmFpdHMsIGNvbmZpZyk7XHJcblxyXG4gICAgICBGaWxlSW5wdXRCbG9jayhibSwgYy5sYWJlbHMuZmlsZV9pbnB1dCk7XHJcbiAgICAgIEZpbGVJbnB1dChkb21jLCB0cmFpdHMsIGNvbmZpZyk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGJsb2Nrcy5mb3JtX2dyb3VwX2lucHV0KSB7XHJcbiAgICAgIElucHV0R3JvdXBCbG9jayhibSwgYy5sYWJlbHMuZm9ybV9ncm91cF9pbnB1dCk7XHJcbiAgICAgIElucHV0R3JvdXAoZG9tYywgdHJhaXRzLCBjb25maWcpO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChibG9ja3MudGV4dGFyZWEpIHtcclxuICAgICAgVGV4dGFyZWFCbG9jayhibSwgYy5sYWJlbHMudGV4dGFyZWEpO1xyXG4gICAgICBUZXh0YXJlYShkb21jLCB0cmFpdHMsIGNvbmZpZyk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGJsb2Nrcy5zZWxlY3QpIHtcclxuICAgICAgU2VsZWN0QmxvY2soYm0sIGMubGFiZWxzLnNlbGVjdCk7XHJcbiAgICAgIFNlbGVjdChlZGl0b3IsIGRvbWMsIHRyYWl0cywgY29uZmlnKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoYmxvY2tzLmNoZWNrYm94KSB7XHJcbiAgICAgIENoZWNrYm94QmxvY2soYm0sIGMubGFiZWxzLmNoZWNrYm94KTtcclxuICAgICAgQ2hlY2tib3goZG9tYywgdHJhaXRzLCBjb25maWcpO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChibG9ja3MucmFkaW8pIHtcclxuICAgICAgUmFkaW9CbG9jayhibSwgYy5sYWJlbHMucmFkaW8pO1xyXG4gICAgICBSYWRpbyhkb21jLCB0cmFpdHMsIGNvbmZpZyk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGJsb2Nrcy5sYWJlbCkge1xyXG4gICAgICBMYWJlbEJsb2NrKGJtLCBjLmxhYmVscy5sYWJlbCk7XHJcbiAgICAgIExhYmVsKGRvbWMsIHRyYWl0cywgY29uZmlnKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoYmxvY2tzLmJ1dHRvbikge1xyXG4gICAgICBCdXR0b25CbG9jayhibSwgYy5sYWJlbHMuYnV0dG9uKTtcclxuICAgICAgQnV0dG9uKGRvbWMpO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChibG9ja3MuYnV0dG9uX2dyb3VwKSB7XHJcbiAgICAgIEJ1dHRvbkdyb3VwQmxvY2soYm0sIGMubGFiZWxzLmJ1dHRvbl9ncm91cCk7XHJcbiAgICAgIEJ1dHRvbkdyb3VwKGRvbWMpO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChibG9ja3MuYnV0dG9uX3Rvb2xiYXIpIHtcclxuICAgICAgQnV0dG9uVG9vbGJhckJsb2NrKGJtLCBjLmxhYmVscy5idXR0b25fdG9vbGJhciwgYyk7XHJcbiAgICAgIEJ1dHRvblRvb2xiYXIoZG9tYyk7XHJcbiAgICB9XHJcblxyXG4gIH1cclxuXHJcbiAgaWYoY2F0cy5qc2ZGb3Jtcykge1xyXG4gICAgaWYgKGJsb2Nrcy5qc2ZJbnB1dFRleHQpIHtcclxuICAgICAgSnNmSW5wdXQoZG9tYywgdHJhaXRzLCBjb25maWcpO1xyXG4gICAgICBKc2ZJbnB1dEJsb2NrKGJtLCBjLmxhYmVscy5qc2ZJbnB1dFRleHQpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbn1cclxuIiwiaW1wb3J0IGNvbnRleHRzIGZyb20gJy4uL2Jvb3RzdHJhcC1jb250ZXh0cyc7XHJcbmltcG9ydCBleGNsYW1hdGlvbkljb24gZnJvbSBcInJhdy1sb2FkZXIhLi4vaWNvbnMvZXhjbGFtYXRpb24tdHJpYW5nbGUtc29saWQuc3ZnXCI7XHJcbmltcG9ydCB7Y2FwaXRhbGl6ZX0gZnJvbSBcIi4uL3V0aWxzXCI7XHJcblxyXG5leHBvcnQgY29uc3QgQWxlcnRCbG9jayA9IChibSwgbGFiZWwpID0+IHtcclxuICAgIGJtLmFkZCgnYWxlcnQnLCB7XHJcbiAgICAgICAgbGFiZWw6IGBcclxuICAgICAgICAgICAgJHtleGNsYW1hdGlvbkljb259XHJcbiAgICAgICAgICAgIDxkaXY+JHtsYWJlbH08L2Rpdj5cclxuICAgICAgICBgLFxyXG4gICAgICAgIGNhdGVnb3J5OiAnQ29tcG9uZW50cycsXHJcbiAgICAgICAgY29udGVudDoge1xyXG4gICAgICAgICAgICB0eXBlOiAnYWxlcnQnLFxyXG4gICAgICAgICAgICBjb250ZW50OiAnVGhpcyBpcyBhbiBhbGVydOKAlGNoZWNrIGl0IG91dCEnXHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCAoZG9tYykgPT4ge1xyXG4gICAgY29uc3QgdGV4dFR5cGUgPSBkb21jLmdldFR5cGUoJ3RleHQnKTtcclxuICAgIGNvbnN0IHRleHRNb2RlbCA9IHRleHRUeXBlLm1vZGVsO1xyXG4gICAgY29uc3QgdGV4dFZpZXcgPSB0ZXh0VHlwZS52aWV3O1xyXG5cclxuICAgIGRvbWMuYWRkVHlwZSgnYWxlcnQnLCB7XHJcbiAgICAgICAgaXNDb21wb25lbnQoZWwpIHtcclxuICAgICAgICAgICAgaWYoZWwgJiYgZWwuY2xhc3NMaXN0ICYmIGVsLmNsYXNzTGlzdC5jb250YWlucygnYWxlcnQnKSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHt0eXBlOiAnYWxlcnQnfTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZXh0ZW5kOiAndGV4dCcsXHJcbiAgICAgICAgbW9kZWw6e1xyXG4gICAgICAgICAgICBkZWZhdWx0czogT2JqZWN0LmFzc2lnbih7fSwgdGV4dE1vZGVsLnByb3RvdHlwZS5kZWZhdWx0cywge1xyXG4gICAgICAgICAgICAgICAgJ2N1c3RvbS1uYW1lJzogJ0FsZXJ0JyxcclxuICAgICAgICAgICAgICAgIHRhZ05hbWU6ICdkaXYnLFxyXG4gICAgICAgICAgICAgICAgY2xhc3NlczogWydhbGVydCddLFxyXG4gICAgICAgICAgICAgICAgdHJhaXRzOiBbXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnY2xhc3Nfc2VsZWN0JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9uczogW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge3ZhbHVlOiAnJywgbmFtZTogJ05vbmUnfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC4uLiBjb250ZXh0cy5tYXAoZnVuY3Rpb24odikgeyByZXR1cm4ge3ZhbHVlOiAnYWxlcnQtJyt2LCBuYW1lOiBjYXBpdGFsaXplKHYpfSB9KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsYWJlbDogJ0NvbnRleHQnXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgXS5jb25jYXQodGV4dE1vZGVsLnByb3RvdHlwZS5kZWZhdWx0cy50cmFpdHMpXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgfSxcclxuICAgICAgICBleHRlbmRWaWV3OiAndGV4dCdcclxuICAgIH0pO1xyXG59XHJcbiIsImltcG9ydCBjb250ZXh0cyBmcm9tICcuLi9ib290c3RyYXAtY29udGV4dHMnO1xyXG5pbXBvcnQgY2VydGlmaWNhdGVJY29uIGZyb20gXCJyYXctbG9hZGVyIS4uL2ljb25zL2NlcnRpZmljYXRlLXNvbGlkLnN2Z1wiO1xyXG5pbXBvcnQge2NhcGl0YWxpemV9IGZyb20gXCIuLi91dGlsc1wiO1xyXG5cclxuZXhwb3J0IGNvbnN0IEJhZGdlQmxvY2sgPSAoYm0sIGxhYmVsKSA9PiB7XHJcbiAgICBibS5hZGQoJ2JhZGdlJywge1xyXG4gICAgICAgIGxhYmVsOiBgXHJcbiAgICAgICAgICAgICR7Y2VydGlmaWNhdGVJY29ufVxyXG4gICAgICAgICAgICA8ZGl2PiR7bGFiZWx9PC9kaXY+XHJcbiAgICAgICAgYCxcclxuICAgICAgICBjYXRlZ29yeTogJ0NvbXBvbmVudHMnLFxyXG4gICAgICAgIGNvbnRlbnQ6IHtcclxuICAgICAgICAgICAgdHlwZTogJ2JhZGdlJyxcclxuICAgICAgICAgICAgY29udGVudDogJ05ldyEnXHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCAoZG9tYykgPT4ge1xyXG4gICAgY29uc3QgdGV4dFR5cGUgPSBkb21jLmdldFR5cGUoJ3RleHQnKTtcclxuICAgIGNvbnN0IHRleHRNb2RlbCA9IHRleHRUeXBlLm1vZGVsO1xyXG4gICAgY29uc3QgdGV4dFZpZXcgPSB0ZXh0VHlwZS52aWV3O1xyXG5cclxuICAgIGRvbWMuYWRkVHlwZSgnYmFkZ2UnLCB7XHJcbiAgICAgICAgaXNDb21wb25lbnQ6IGZ1bmN0aW9uKGVsKSB7XHJcbiAgICAgICAgICAgIGlmKGVsICYmIGVsLmNsYXNzTGlzdCAmJiBlbC5jbGFzc0xpc3QuY29udGFpbnMoJ2JhZGdlJykpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB7dHlwZTogJ2JhZGdlJ307XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG4gICAgICAgIGV4dGVuZDogJ3RleHQnLFxyXG4gICAgICAgIG1vZGVsOiB7XHJcbiAgICAgICAgICAgIGRlZmF1bHRzOiBPYmplY3QuYXNzaWduKHt9LCB0ZXh0TW9kZWwucHJvdG90eXBlLmRlZmF1bHRzLCB7XHJcbiAgICAgICAgICAgICAgICAnY3VzdG9tLW5hbWUnOiAnQmFkZ2UnLFxyXG4gICAgICAgICAgICAgICAgdGFnTmFtZTogJ3NwYW4nLFxyXG4gICAgICAgICAgICAgICAgY2xhc3NlczogWydiYWRnZSddLFxyXG4gICAgICAgICAgICAgICAgdHJhaXRzOiBbXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnY2xhc3Nfc2VsZWN0JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9uczogW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge3ZhbHVlOiAnJywgbmFtZTogJ05vbmUnfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC4uLiBjb250ZXh0cy5tYXAoZnVuY3Rpb24odikgeyByZXR1cm4ge3ZhbHVlOiAnYmFkZ2UtJyt2LCBuYW1lOiBjYXBpdGFsaXplKHYpfSB9KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsYWJlbDogJ0NvbnRleHQnXHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdjbGFzc19zZWxlY3QnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25zOiBbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7dmFsdWU6ICcnLCBuYW1lOiAnRGVmYXVsdCd9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge3ZhbHVlOiAnYmFkZ2UtcGlsbCcsIG5hbWU6ICdQaWxsJ30sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsOiAnU2hhcGUnXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgXS5jb25jYXQodGV4dE1vZGVsLnByb3RvdHlwZS5kZWZhdWx0cy50cmFpdHMpXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgfSxcclxuICAgICAgICBleHRlbmRWaWV3OiAndGV4dCdcclxuICAgIH0pO1xyXG59XHJcbiIsImltcG9ydCBjb250ZXh0cyBmcm9tICcuLi9ib290c3RyYXAtY29udGV4dHMnO1xyXG5pbXBvcnQgc2l6ZXMgZnJvbSAnLi4vYm9vdHN0cmFwLWJ0bi1zaXplcyc7XHJcbmltcG9ydCBidXR0b25JY29uIGZyb20gXCJyYXctbG9hZGVyIS4uL2ljb25zL2J1dHRvbi5zdmdcIjtcclxuaW1wb3J0IHtjYXBpdGFsaXplfSBmcm9tIFwiLi4vdXRpbHNcIjtcclxuXHJcbmV4cG9ydCBjb25zdCBCdXR0b25CbG9jayA9IChibSwgbGFiZWwpID0+IHtcclxuICAgIGJtLmFkZCgnYnV0dG9uJywge1xyXG4gICAgICAgIGxhYmVsOiBgJHtidXR0b25JY29ufTxkaXY+JHtsYWJlbH08L2Rpdj5gLFxyXG4gICAgICAgIGNhdGVnb3J5OiAnRm9ybXMnLFxyXG4gICAgICAgIGNvbnRlbnQ6ICc8YnV0dG9uIGNsYXNzPVwiYnRuIGJ0bi1wcmltYXJ5XCI+U2VuZDwvYnV0dG9uPicsXHJcbiAgICB9KTtcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IChkYykgPT4ge1xyXG4gICAgY29uc3QgZGVmYXVsdFR5cGUgPSBkYy5nZXRUeXBlKCdkZWZhdWx0Jyk7XHJcbiAgICBjb25zdCBkZWZhdWx0TW9kZWwgPSBkZWZhdWx0VHlwZS5tb2RlbDtcclxuICAgIGNvbnN0IGRlZmF1bHRWaWV3ID0gZGVmYXVsdFR5cGUudmlldztcclxuXHJcbiAgICBkYy5hZGRUeXBlKCdidXR0b24nLCB7XHJcbiAgICAgICAgaXNDb21wb25lbnQ6IChlbCkgPT4ge1xyXG4gICAgICAgICAgICBpZihlbCAmJiBlbC5jbGFzc0xpc3QgJiYgZWwuY2xhc3NMaXN0LmNvbnRhaW5zKCdidG4nKSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHt0eXBlOiAnYnV0dG9uJ307XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG4gICAgICAgIGV4dGVuZDogJ2RlZmF1bHQnLFxyXG4gICAgICAgIG1vZGVsOiB7XHJcbiAgICAgICAgICAgIGRlZmF1bHRzOiB7XHJcbiAgICAgICAgICAgICAgICAuLi5kZWZhdWx0TW9kZWwucHJvdG90eXBlLmRlZmF1bHRzLFxyXG4gICAgICAgICAgICAgICAgJ2N1c3RvbS1uYW1lJzogJ0J1dHRvbicsXHJcbiAgICAgICAgICAgICAgICBkcm9wcGFibGU6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgYXR0cmlidXRlczoge1xyXG4gICAgICAgICAgICAgICAgICAgIHJvbGU6ICdidXR0b24nXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgY2xhc3NlczogWydidG4nXSxcclxuICAgICAgICAgICAgICAgIHRyYWl0czogW1xyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2NvbnRlbnQnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsYWJlbDogJ1RleHQnLFxyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsYWJlbDogJ1R5cGUnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnc2VsZWN0JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogJ3R5cGUnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25zOiBbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7dmFsdWU6ICdzdWJtaXQnLCBuYW1lOiAnU3VibWl0J30sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7dmFsdWU6ICdyZXNldCcsIG5hbWU6ICdSZXNldCd9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge3ZhbHVlOiAnYnV0dG9uJywgbmFtZTogJ0J1dHRvbid9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBdXHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdjbGFzc19zZWxlY3QnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25zOiBbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7dmFsdWU6ICcnLCBuYW1lOiAnTm9uZSd9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLi4uIGNvbnRleHRzLm1hcCgodikgPT4geyByZXR1cm4ge3ZhbHVlOiBgYnRuLSR7dn1gLCBuYW1lOiBjYXBpdGFsaXplKHYpfSB9KSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC4uLiBjb250ZXh0cy5tYXAoKHYpID0+IHsgcmV0dXJuIHt2YWx1ZTogYGJ0bi1vdXRsaW5lLSR7dn1gLCBuYW1lOiBjYXBpdGFsaXplKHYpICsgJyAoT3V0bGluZSknfSB9KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsYWJlbDogJ0NvbnRleHQnXHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdjbGFzc19zZWxlY3QnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25zOiBbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7dmFsdWU6ICcnLCBuYW1lOiAnRGVmYXVsdCd9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLi4uIE9iamVjdC5rZXlzKHNpemVzKS5tYXAoKGspID0+IHsgcmV0dXJuIHt2YWx1ZTogYGJ0bi0ke2t9YCwgbmFtZTogc2l6ZXNba119IH0pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsOiAnU2l6ZSdcclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2NsYXNzX3NlbGVjdCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbnM6IFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt2YWx1ZTogJycsIG5hbWU6ICdJbmxpbmUnfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt2YWx1ZTogJ2J0bi1ibG9jaycsIG5hbWU6ICdCbG9jayd9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsOiAnV2lkdGgnXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgXS5jb25jYXQoZGVmYXVsdE1vZGVsLnByb3RvdHlwZS5kZWZhdWx0cy50cmFpdHMpXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGFmdGVyQ2hhbmdlKGUpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmF0dHJpYnV0ZXMudHlwZSA9PT0gJ2J1dHRvbicpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5hdHRyaWJ1dGVzLmNsYXNzZXMuZmlsdGVyKChrbGFzcykgPT4geyByZXR1cm4ga2xhc3MuaWQgPT09ICdidG4nIH0pLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNoYW5nZVR5cGUoJ2xpbmsnKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG4gICAgICAgIGV4dGVuZFZpZXc6ICdkZWZhdWx0JyxcclxuICAgICAgICB2aWV3OiB7XHJcbiAgICAgICAgICAgIGV2ZW50czoge1xyXG4gICAgICAgICAgICAgICAgJ2NsaWNrJzogJ2hhbmRsZUNsaWNrJ1xyXG4gICAgICAgICAgICB9LFxyXG5cclxuICAgICAgICAgICAgaW5pdCgpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMubGlzdGVuVG8odGhpcy5tb2RlbCwgJ2NoYW5nZTpjb250ZW50JywgdGhpcy51cGRhdGVDb250ZW50KTtcclxuICAgICAgICAgICAgfSxcclxuXHJcbiAgICAgICAgICAgIHVwZGF0ZUNvbnRlbnQoKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmVsLmlubmVySFRNTCA9IHRoaXMubW9kZWwuZ2V0KCdjb250ZW50JylcclxuICAgICAgICAgICAgfSxcclxuXHJcbiAgICAgICAgICAgIGhhbmRsZUNsaWNrKGUpIHtcclxuICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICB9LFxyXG4gICAgfSk7XHJcbn1cclxuIiwiaW1wb3J0IHNpemVzIGZyb20gJy4uL2Jvb3RzdHJhcC1idG4tc2l6ZXMnO1xyXG5pbXBvcnQgYnV0dG9uSWNvbiBmcm9tIFwicmF3LWxvYWRlciEuLi9pY29ucy9idXR0b24uc3ZnXCI7XHJcblxyXG5leHBvcnQgY29uc3QgQnV0dG9uR3JvdXBCbG9jayA9IChibSwgbGFiZWwpID0+IHtcclxuICAgIGJtLmFkZCgnYnV0dG9uX2dyb3VwJywge1xyXG4gICAgICAgIGxhYmVsOiBgXHJcbiAgICAgICAgICAgICR7YnV0dG9uSWNvbn1cclxuICAgICAgICAgICAgPGRpdj4ke2xhYmVsfTwvZGl2PlxyXG4gICAgICAgIGAsXHJcbiAgICAgICAgY2F0ZWdvcnk6ICdGb3JtcycsXHJcbiAgICAgICAgY29udGVudDoge1xyXG4gICAgICAgICAgICB0eXBlOiAnYnV0dG9uX2dyb3VwJ1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgKGRjKSA9PiB7XHJcblxyXG4gICAgY29uc3QgZGVmYXVsdFR5cGUgPSBkYy5nZXRUeXBlKCdkZWZhdWx0Jyk7XHJcbiAgICBjb25zdCBkZWZhdWx0TW9kZWwgPSBkZWZhdWx0VHlwZS5tb2RlbDtcclxuICAgIGNvbnN0IGRlZmF1bHRWaWV3ID0gZGVmYXVsdFR5cGUudmlldztcclxuXHJcbiAgICBkYy5hZGRUeXBlKCdidXR0b25fZ3JvdXAnLCB7XHJcbiAgICAgICAgaXNDb21wb25lbnQ6IGZ1bmN0aW9uKGVsKSB7XHJcbiAgICAgICAgICAgIGlmKGVsICYmIGVsLmNsYXNzTGlzdCAmJiBlbC5jbGFzc0xpc3QuY29udGFpbnMoJ2J0bi1ncm91cCcpKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4ge3R5cGU6ICdidXR0b25fZ3JvdXAnfTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZXh0ZW5kOiAnZGVmYXVsdCcsXHJcbiAgICAgICAgbW9kZWw6IHtcclxuICAgICAgICAgICAgZGVmYXVsdHM6IE9iamVjdC5hc3NpZ24oe30sIGRlZmF1bHRNb2RlbC5wcm90b3R5cGUuZGVmYXVsdHMsIHtcclxuICAgICAgICAgICAgICAgICdjdXN0b20tbmFtZSc6ICdCdXR0b24gR3JvdXAnLFxyXG4gICAgICAgICAgICAgICAgdGFnTmFtZTogJ2RpdicsXHJcbiAgICAgICAgICAgICAgICBjbGFzc2VzOiBbJ2J0bi1ncm91cCddLFxyXG4gICAgICAgICAgICAgICAgZHJvcHBhYmxlOiAnLmJ0bicsXHJcbiAgICAgICAgICAgICAgICBhdHRyaWJ1dGVzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgcm9sZTogJ2dyb3VwJ1xyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIHRyYWl0czogW1xyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2NsYXNzX3NlbGVjdCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbnM6IFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt2YWx1ZTogJycsIG5hbWU6ICdEZWZhdWx0J30sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuLi4gT2JqZWN0LmtleXMoc2l6ZXMpLm1hcChmdW5jdGlvbihrKSB7IHJldHVybiB7dmFsdWU6ICdidG4tZ3JvdXAtJytrLCBuYW1lOiBzaXplc1trXX0gfSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWw6ICdTaXplJ1xyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnY2xhc3Nfc2VsZWN0JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9uczogW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge3ZhbHVlOiAnJywgbmFtZTogJ0hvcml6b250YWwnfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt2YWx1ZTogJ2J0bi1ncm91cC12ZXJ0aWNhbCcsIG5hbWU6ICdWZXJ0aWNhbCd9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsYWJlbDogJ1NpemUnXHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdUZXh0JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWw6ICdBUklBIExhYmVsJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogJ2FyaWEtbGFiZWwnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcjogJ0EgZ3JvdXAgb2YgYnV0dG9ucydcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBdLmNvbmNhdChkZWZhdWx0TW9kZWwucHJvdG90eXBlLmRlZmF1bHRzLnRyYWl0cylcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICB9LFxyXG4gICAgICAgIGV4dGVuZFZpZXc6ICdkZWZhdWx0JyxcclxuICAgIH0pO1xyXG59XHJcbiIsImltcG9ydCBidXR0b25JY29uIGZyb20gXCJyYXctbG9hZGVyIS4uL2ljb25zL2J1dHRvbi5zdmdcIjtcclxuXHJcbmV4cG9ydCBjb25zdCBCdXR0b25Ub29sYmFyQmxvY2sgPSAoYm0sIGxhYmVsKSA9PiB7XHJcbiAgICBibS5hZGQoJ2J1dHRvbl90b29sYmFyJywge1xyXG4gICAgICAgIGxhYmVsOiBgXHJcbiAgICAgICAgICAgICR7YnV0dG9uSWNvbn1cclxuICAgICAgICAgICAgPGRpdj4ke2xhYmVsfTwvZGl2PlxyXG4gICAgICAgIGAsXHJcbiAgICAgICAgY2F0ZWdvcnk6ICdGb3JtcycsXHJcbiAgICAgICAgY29udGVudDoge1xyXG4gICAgICAgICAgICB0eXBlOiAnYnV0dG9uX3Rvb2xiYXInXHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCAoZGMpID0+IHtcclxuXHJcbiAgICBjb25zdCBkZWZhdWx0VHlwZSA9IGRjLmdldFR5cGUoJ2RlZmF1bHQnKTtcclxuICAgIGNvbnN0IGRlZmF1bHRNb2RlbCA9IGRlZmF1bHRUeXBlLm1vZGVsO1xyXG4gICAgY29uc3QgZGVmYXVsdFZpZXcgPSBkZWZhdWx0VHlwZS52aWV3O1xyXG5cclxuICAgIGRjLmFkZFR5cGUoJ2J1dHRvbl90b29sYmFyJywge1xyXG4gICAgICAgIGlzQ29tcG9uZW50OiBmdW5jdGlvbihlbCkge1xyXG4gICAgICAgICAgICBpZihlbCAmJiBlbC5jbGFzc0xpc3QgJiYgZWwuY2xhc3NMaXN0LmNvbnRhaW5zKCdidG4tdG9vbGJhcicpKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4ge3R5cGU6ICdidXR0b25fdG9vbGJhcid9O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuICAgICAgICBleHRlbmQ6ICdkZWZhdWx0JyxcclxuICAgICAgICBtb2RlbDoge1xyXG4gICAgICAgICAgICBkZWZhdWx0czogT2JqZWN0LmFzc2lnbih7fSwgZGVmYXVsdE1vZGVsLnByb3RvdHlwZS5kZWZhdWx0cywge1xyXG4gICAgICAgICAgICAgICAgJ2N1c3RvbS1uYW1lJzogJ0J1dHRvbiBUb29sYmFyJyxcclxuICAgICAgICAgICAgICAgIHRhZ05hbWU6ICdkaXYnLFxyXG4gICAgICAgICAgICAgICAgY2xhc3NlczogWydidG4tdG9vbGJhciddLFxyXG4gICAgICAgICAgICAgICAgZHJvcHBhYmxlOiAnLmJ0bi1ncm91cCcsXHJcbiAgICAgICAgICAgICAgICBhdHRyaWJ1dGVzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgcm9sZTogJ3Rvb2xiYXInXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgdHJhaXRzOiBbXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnVGV4dCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsOiAnQVJJQSBMYWJlbCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICdhcmlhLWxhYmVsJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI6ICdBIHRvb2xiYXIgb2YgYnV0dG9uIGdyb3VwcydcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBdLmNvbmNhdChkZWZhdWx0TW9kZWwucHJvdG90eXBlLmRlZmF1bHRzLnRyYWl0cylcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICB9LFxyXG4gICAgICAgIGV4dGVuZFZpZXc6ICdkZWZhdWx0JyxcclxuICAgIH0pO1xyXG59XHJcbiIsImltcG9ydCBjYXJkSWNvbiBmcm9tIFwicmF3LWxvYWRlciEuLi9pY29ucy9jcmVkaXQtY2FyZC1zb2xpZC5zdmdcIjtcclxuXHJcbmV4cG9ydCBjb25zdCBDYXJkQmxvY2sgPSAoYm0sIGMpID0+IHtcclxuICBibS5hZGQoJ2NhcmQnLCB7XHJcbiAgICBsYWJlbDogYFxyXG4gICAgICAgICAgICAke2NhcmRJY29ufVxyXG4gICAgICAgICAgICA8ZGl2PiR7Yy5sYWJlbHMuY2FyZH08L2Rpdj5cclxuICAgICAgICBgLFxyXG4gICAgY2F0ZWdvcnk6ICdDb21wb25lbnRzJyxcclxuICAgIGNvbnRlbnQ6IHtcclxuICAgICAgdHlwZTogJ2NhcmQnXHJcbiAgICB9XHJcbiAgfSk7XHJcbiAgYm0uYWRkKCdjYXJkX2NvbnRhaW5lcicsIHtcclxuICAgIGxhYmVsOiBgXHJcbiAgICAgICAgICAgICR7Y2FyZEljb259XHJcbiAgICAgICAgICAgIDxkaXY+JHtjLmxhYmVscy5jYXJkX2NvbnRhaW5lcn08L2Rpdj5cclxuICAgICAgICBgLFxyXG4gICAgY2F0ZWdvcnk6ICdDb21wb25lbnRzJyxcclxuICAgIGNvbnRlbnQ6IHtcclxuICAgICAgdHlwZTogJ2NhcmRfY29udGFpbmVyJ1xyXG4gICAgfVxyXG4gIH0pO1xyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgKGRvbWMsIGVkaXRvcikgPT4ge1xyXG4gIGNvbnN0IGNvbXBzID0gZWRpdG9yLkRvbUNvbXBvbmVudHM7XHJcbiAgY29uc3QgZGVmYXVsdFR5cGUgPSBjb21wcy5nZXRUeXBlKCdkZWZhdWx0Jyk7XHJcbiAgY29uc3QgZGVmYXVsdE1vZGVsID0gZGVmYXVsdFR5cGUubW9kZWw7XHJcbiAgY29uc3QgZGVmYXVsdFZpZXcgPSBkZWZhdWx0VHlwZS52aWV3O1xyXG4gIGNvbnN0IGltYWdlVHlwZSA9IGRvbWMuZ2V0VHlwZSgnaW1hZ2UnKTtcclxuICBjb25zdCBpbWFnZU1vZGVsID0gaW1hZ2VUeXBlLm1vZGVsO1xyXG4gIGNvbnN0IGltYWdlVmlldyA9IGltYWdlVHlwZS52aWV3O1xyXG5cclxuICBkb21jLmFkZFR5cGUoJ2NhcmQnLCB7XHJcbiAgICBpc0NvbXBvbmVudDogZnVuY3Rpb24oZWwpIHtcclxuICAgICAgaWYoZWwgJiYgZWwuY2xhc3NMaXN0ICYmIGVsLmNsYXNzTGlzdC5jb250YWlucygnY2FyZCcpKSB7XHJcbiAgICAgICAgcmV0dXJuIHt0eXBlOiAnY2FyZCd9O1xyXG4gICAgICB9XHJcbiAgICB9LFxyXG4gICAgZXh0ZW5kOiAnZGVmYXVsdCcsXHJcbiAgICBtb2RlbDoge1xyXG4gICAgICBkZWZhdWx0czogT2JqZWN0LmFzc2lnbih7fSwgZGVmYXVsdE1vZGVsLnByb3RvdHlwZS5kZWZhdWx0cywge1xyXG4gICAgICAgICdjdXN0b20tbmFtZSc6ICdDYXJkJyxcclxuICAgICAgICBjbGFzc2VzOiBbJ2NhcmQnXSxcclxuICAgICAgICB0cmFpdHM6IFtcclxuICAgICAgICAgIHtcclxuICAgICAgICAgICAgdHlwZTogJ2NoZWNrYm94JyxcclxuICAgICAgICAgICAgbGFiZWw6ICdJbWFnZSBUb3AnLFxyXG4gICAgICAgICAgICBuYW1lOiAnY2FyZC1pbWctdG9wJyxcclxuICAgICAgICAgICAgY2hhbmdlUHJvcDogMVxyXG4gICAgICAgICAgfSxcclxuICAgICAgICAgIHtcclxuICAgICAgICAgICAgdHlwZTogJ2NoZWNrYm94JyxcclxuICAgICAgICAgICAgbGFiZWw6ICdIZWFkZXInLFxyXG4gICAgICAgICAgICBuYW1lOiAnY2FyZC1oZWFkZXInLFxyXG4gICAgICAgICAgICBjaGFuZ2VQcm9wOiAxXHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAge1xyXG4gICAgICAgICAgICB0eXBlOiAnY2hlY2tib3gnLFxyXG4gICAgICAgICAgICBsYWJlbDogJ0ltYWdlJyxcclxuICAgICAgICAgICAgbmFtZTogJ2NhcmQtaW1nJyxcclxuICAgICAgICAgICAgY2hhbmdlUHJvcDogMVxyXG4gICAgICAgICAgfSxcclxuICAgICAgICAgIHtcclxuICAgICAgICAgICAgdHlwZTogJ2NoZWNrYm94JyxcclxuICAgICAgICAgICAgbGFiZWw6ICdJbWFnZSBPdmVybGF5JyxcclxuICAgICAgICAgICAgbmFtZTogJ2NhcmQtaW1nLW92ZXJsYXknLFxyXG4gICAgICAgICAgICBjaGFuZ2VQcm9wOiAxXHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAge1xyXG4gICAgICAgICAgICB0eXBlOiAnY2hlY2tib3gnLFxyXG4gICAgICAgICAgICBsYWJlbDogJ0JvZHknLFxyXG4gICAgICAgICAgICBuYW1lOiAnY2FyZC1ib2R5JyxcclxuICAgICAgICAgICAgY2hhbmdlUHJvcDogMVxyXG4gICAgICAgICAgfSxcclxuICAgICAgICAgIHtcclxuICAgICAgICAgICAgdHlwZTogJ2NoZWNrYm94JyxcclxuICAgICAgICAgICAgbGFiZWw6ICdGb290ZXInLFxyXG4gICAgICAgICAgICBuYW1lOiAnY2FyZC1mb290ZXInLFxyXG4gICAgICAgICAgICBjaGFuZ2VQcm9wOiAxXHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAge1xyXG4gICAgICAgICAgICB0eXBlOiAnY2hlY2tib3gnLFxyXG4gICAgICAgICAgICBsYWJlbDogJ0ltYWdlIEJvdHRvbScsXHJcbiAgICAgICAgICAgIG5hbWU6ICdjYXJkLWltZy1ib3R0b20nLFxyXG4gICAgICAgICAgICBjaGFuZ2VQcm9wOiAxXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgXS5jb25jYXQoZGVmYXVsdE1vZGVsLnByb3RvdHlwZS5kZWZhdWx0cy50cmFpdHMpXHJcbiAgICAgIH0pLFxyXG4gICAgICBpbml0MigpIHtcclxuICAgICAgICB0aGlzLmxpc3RlblRvKHRoaXMsICdjaGFuZ2U6Y2FyZC1pbWctdG9wJywgdGhpcy5jYXJkSW1hZ2VUb3ApO1xyXG4gICAgICAgIHRoaXMubGlzdGVuVG8odGhpcywgJ2NoYW5nZTpjYXJkLWhlYWRlcicsIHRoaXMuY2FyZEhlYWRlcik7XHJcbiAgICAgICAgdGhpcy5saXN0ZW5Ubyh0aGlzLCAnY2hhbmdlOmNhcmQtaW1nJywgdGhpcy5jYXJkSW1hZ2UpO1xyXG4gICAgICAgIHRoaXMubGlzdGVuVG8odGhpcywgJ2NoYW5nZTpjYXJkLWltZy1vdmVybGF5JywgdGhpcy5jYXJkSW1hZ2VPdmVybGF5KTtcclxuICAgICAgICB0aGlzLmxpc3RlblRvKHRoaXMsICdjaGFuZ2U6Y2FyZC1ib2R5JywgdGhpcy5jYXJkQm9keSk7XHJcbiAgICAgICAgdGhpcy5saXN0ZW5Ubyh0aGlzLCAnY2hhbmdlOmNhcmQtZm9vdGVyJywgdGhpcy5jYXJkRm9vdGVyKTtcclxuICAgICAgICB0aGlzLmxpc3RlblRvKHRoaXMsICdjaGFuZ2U6Y2FyZC1pbWctYm90dG9tJywgdGhpcy5jYXJkSW1hZ2VCb3R0b20pO1xyXG4gICAgICAgIHRoaXMuY29tcG9uZW50cygpLmNvbXBhcmF0b3IgPSAnY2FyZC1vcmRlcic7XHJcbiAgICAgICAgdGhpcy5zZXQoJ2NhcmQtaW1nLXRvcCcsIHRydWUpO1xyXG4gICAgICAgIHRoaXMuc2V0KCdjYXJkLWJvZHknLCB0cnVlKTtcclxuICAgICAgfSxcclxuICAgICAgY2FyZEltYWdlVG9wKCkgeyB0aGlzLmNyZWF0ZUNhcmRDb21wb25lbnQoJ2NhcmQtaW1nLXRvcCcpOyB9LFxyXG4gICAgICBjYXJkSGVhZGVyKCkgeyB0aGlzLmNyZWF0ZUNhcmRDb21wb25lbnQoJ2NhcmQtaGVhZGVyJyk7IH0sXHJcbiAgICAgIGNhcmRJbWFnZSgpIHsgdGhpcy5jcmVhdGVDYXJkQ29tcG9uZW50KCdjYXJkLWltZycpOyB9LFxyXG4gICAgICBjYXJkSW1hZ2VPdmVybGF5KCkgeyB0aGlzLmNyZWF0ZUNhcmRDb21wb25lbnQoJ2NhcmQtaW1nLW92ZXJsYXknKTsgfSxcclxuICAgICAgY2FyZEJvZHkoKSB7IHRoaXMuY3JlYXRlQ2FyZENvbXBvbmVudCgnY2FyZC1ib2R5Jyk7IH0sXHJcbiAgICAgIGNhcmRGb290ZXIoKSB7IHRoaXMuY3JlYXRlQ2FyZENvbXBvbmVudCgnY2FyZC1mb290ZXInKTsgfSxcclxuICAgICAgY2FyZEltYWdlQm90dG9tKCkgeyB0aGlzLmNyZWF0ZUNhcmRDb21wb25lbnQoJ2NhcmQtaW1nLWJvdHRvbScpOyB9LFxyXG4gICAgICBjcmVhdGVDYXJkQ29tcG9uZW50KHByb3ApIHtcclxuICAgICAgICBjb25zdCBzdGF0ZSA9IHRoaXMuZ2V0KHByb3ApO1xyXG4gICAgICAgIGNvbnN0IHR5cGUgPSBwcm9wLnJlcGxhY2UoLy0vZywnXycpLnJlcGxhY2UoL2ltZy9nLCdpbWFnZScpXHJcbiAgICAgICAgbGV0IGNoaWxkcmVuID0gdGhpcy5jb21wb25lbnRzKCk7XHJcbiAgICAgICAgbGV0IGV4aXN0aW5nID0gY2hpbGRyZW4uZmlsdGVyKGZ1bmN0aW9uKGNvbXApIHtcclxuICAgICAgICAgIHJldHVybiBjb21wLmF0dHJpYnV0ZXMudHlwZSA9PT0gdHlwZTtcclxuICAgICAgICB9KVswXTsgLy8gc2hvdWxkIG9ubHkgYmUgb25lIG9mIGVhY2guXHJcblxyXG4gICAgICAgIGlmKHN0YXRlICYmICFleGlzdGluZykge1xyXG4gICAgICAgICAgdmFyIGNvbXAgPSBjaGlsZHJlbi5hZGQoe1xyXG4gICAgICAgICAgICB0eXBlOiB0eXBlXHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICAgIGxldCBjb21wX2NoaWxkcmVuID0gY29tcC5jb21wb25lbnRzKCk7XHJcbiAgICAgICAgICBpZihwcm9wID09PSAnY2FyZC1oZWFkZXInKSB7XHJcbiAgICAgICAgICAgIGNvbXBfY2hpbGRyZW4uYWRkKHtcclxuICAgICAgICAgICAgICB0eXBlOiAnaGVhZGVyJyxcclxuICAgICAgICAgICAgICB0YWdOYW1lOiAnaDQnLFxyXG4gICAgICAgICAgICAgIHN0eWxlOiB7ICdtYXJnaW4tYm90dG9tJzogJzBweCcgfSxcclxuICAgICAgICAgICAgICBjb250ZW50OiAnQ2FyZCBIZWFkZXInXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgaWYocHJvcCA9PT0gJ2NhcmQtaW1nLW92ZXJsYXknKSB7XHJcbiAgICAgICAgICAgIGNvbXBfY2hpbGRyZW4uYWRkKHtcclxuICAgICAgICAgICAgICB0eXBlOiAnaGVhZGVyJyxcclxuICAgICAgICAgICAgICB0YWdOYW1lOiAnaDQnLFxyXG4gICAgICAgICAgICAgIGNsYXNzZXM6IFsnY2FyZC10aXRsZSddLFxyXG4gICAgICAgICAgICAgIGNvbnRlbnQ6ICdDYXJkIHRpdGxlJ1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgY29tcF9jaGlsZHJlbi5hZGQoe1xyXG4gICAgICAgICAgICAgIHR5cGU6ICd0ZXh0JyxcclxuICAgICAgICAgICAgICB0YWdOYW1lOiAncCcsXHJcbiAgICAgICAgICAgICAgY2xhc3NlczogWydjYXJkLXRleHQnXSxcclxuICAgICAgICAgICAgICBjb250ZW50OiBcIlNvbWUgcXVpY2sgZXhhbXBsZSB0ZXh0IHRvIGJ1aWxkIG9uIHRoZSBjYXJkIHRpdGxlIGFuZCBtYWtlIHVwIHRoZSBidWxrIG9mIHRoZSBjYXJkJ3MgY29udGVudC5cIlxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGlmKHByb3AgPT09ICdjYXJkLWJvZHknKSB7XHJcbiAgICAgICAgICAgIGNvbXBfY2hpbGRyZW4uYWRkKHtcclxuICAgICAgICAgICAgICB0eXBlOiAnaGVhZGVyJyxcclxuICAgICAgICAgICAgICB0YWdOYW1lOiAnaDQnLFxyXG4gICAgICAgICAgICAgIGNsYXNzZXM6IFsnY2FyZC10aXRsZSddLFxyXG4gICAgICAgICAgICAgIGNvbnRlbnQ6ICdDYXJkIHRpdGxlJ1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgY29tcF9jaGlsZHJlbi5hZGQoe1xyXG4gICAgICAgICAgICAgIHR5cGU6ICdoZWFkZXInLFxyXG4gICAgICAgICAgICAgIHRhZ05hbWU6ICdoNicsXHJcbiAgICAgICAgICAgICAgY2xhc3NlczogWydjYXJkLXN1YnRpdGxlJywgJ3RleHQtbXV0ZWQnLCAnbWItMiddLFxyXG4gICAgICAgICAgICAgIGNvbnRlbnQ6ICdDYXJkIHN1YnRpdGxlJ1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgY29tcF9jaGlsZHJlbi5hZGQoe1xyXG4gICAgICAgICAgICAgIHR5cGU6ICd0ZXh0JyxcclxuICAgICAgICAgICAgICB0YWdOYW1lOiAncCcsXHJcbiAgICAgICAgICAgICAgY2xhc3NlczogWydjYXJkLXRleHQnXSxcclxuICAgICAgICAgICAgICBjb250ZW50OiBcIlNvbWUgcXVpY2sgZXhhbXBsZSB0ZXh0IHRvIGJ1aWxkIG9uIHRoZSBjYXJkIHRpdGxlIGFuZCBtYWtlIHVwIHRoZSBidWxrIG9mIHRoZSBjYXJkJ3MgY29udGVudC5cIlxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgY29tcF9jaGlsZHJlbi5hZGQoe1xyXG4gICAgICAgICAgICAgIHR5cGU6ICdsaW5rJyxcclxuICAgICAgICAgICAgICBjbGFzc2VzOiBbJ2NhcmQtbGluayddLFxyXG4gICAgICAgICAgICAgIGhyZWY6ICcjJyxcclxuICAgICAgICAgICAgICBjb250ZW50OiAnQ2FyZCBsaW5rJ1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgY29tcF9jaGlsZHJlbi5hZGQoe1xyXG4gICAgICAgICAgICAgIHR5cGU6ICdsaW5rJyxcclxuICAgICAgICAgICAgICBjbGFzc2VzOiBbJ2NhcmQtbGluayddLFxyXG4gICAgICAgICAgICAgIGhyZWY6ICcjJyxcclxuICAgICAgICAgICAgICBjb250ZW50OiAnQW5vdGhlciBsaW5rJ1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIHRoaXMub3JkZXIoKTtcclxuICAgICAgICB9IGVsc2UgaWYgKCFzdGF0ZSkge1xyXG4gICAgICAgICAgZXhpc3RpbmcuZGVzdHJveSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSxcclxuICAgICAgb3JkZXIoKSB7XHJcblxyXG4gICAgICB9XHJcbiAgICB9LFxyXG4gICAgZXh0ZW5kVmlldzogJ2RlZmF1bHQnLFxyXG4gIH0pO1xyXG5cclxuICBkb21jLmFkZFR5cGUoJ2NhcmRfaW1hZ2VfdG9wJywge1xyXG4gICAgaXNDb21wb25lbnQ6IGZ1bmN0aW9uKGVsKSB7XHJcbiAgICAgIGlmKGVsICYmIGVsLmNsYXNzTGlzdCAmJiBlbC5jbGFzc0xpc3QuY29udGFpbnMoJ2NhcmQtaW1nLXRvcCcpKSB7XHJcbiAgICAgICAgcmV0dXJuIHt0eXBlOiAnY2FyZF9pbWFnZV90b3AnfTtcclxuICAgICAgfVxyXG4gICAgfSxcclxuICAgIGV4dGVuZDogJ2ltYWdlJyxcclxuICAgIG1vZGVsOiB7XHJcbiAgICAgIGRlZmF1bHRzOiBPYmplY3QuYXNzaWduKHt9LCBpbWFnZU1vZGVsLnByb3RvdHlwZS5kZWZhdWx0cywge1xyXG4gICAgICAgICdjdXN0b20tbmFtZSc6ICdDYXJkIEltYWdlIFRvcCcsXHJcbiAgICAgICAgY2xhc3NlczogWydjYXJkLWltZy10b3AnXSxcclxuICAgICAgICAnY2FyZC1vcmRlcic6IDFcclxuICAgICAgfSlcclxuICAgIH0sXHJcbiAgICBleHRlbmRWaWV3OiAnaW1hZ2UnLFxyXG4gIH0pO1xyXG5cclxuICBkb21jLmFkZFR5cGUoJ2NhcmRfaGVhZGVyJywge1xyXG4gICAgaXNDb21wb25lbnQ6IGZ1bmN0aW9uKGVsKSB7XHJcbiAgICAgIGlmKGVsICYmIGVsLmNsYXNzTGlzdCAmJiBlbC5jbGFzc0xpc3QuY29udGFpbnMoJ2NhcmQtaGVhZGVyJykpIHtcclxuICAgICAgICByZXR1cm4ge3R5cGU6ICdjYXJkX2hlYWRlcid9O1xyXG4gICAgICB9XHJcbiAgICB9LFxyXG4gICAgZXh0ZW5kOiAnZGVmYXVsdCcsXHJcbiAgICBtb2RlbDoge1xyXG4gICAgICBkZWZhdWx0czogT2JqZWN0LmFzc2lnbih7fSwgZGVmYXVsdE1vZGVsLnByb3RvdHlwZS5kZWZhdWx0cywge1xyXG4gICAgICAgICdjdXN0b20tbmFtZSc6ICdDYXJkIEhlYWRlcicsXHJcbiAgICAgICAgY2xhc3NlczogWydjYXJkLWhlYWRlciddLFxyXG4gICAgICAgICdjYXJkLW9yZGVyJzogMlxyXG4gICAgICB9KVxyXG4gICAgfSxcclxuICAgIGV4dGVuZFZpZXc6ICdkZWZhdWx0JyxcclxuICB9KTtcclxuXHJcbiAgZG9tYy5hZGRUeXBlKCdjYXJkX2ltYWdlJywge1xyXG4gICAgaXNDb21wb25lbnQ6IGZ1bmN0aW9uKGVsKSB7XHJcbiAgICAgIGlmKGVsICYmIGVsLmNsYXNzTGlzdCAmJiBlbC5jbGFzc0xpc3QuY29udGFpbnMoJ2NhcmQtaW1nJykpIHtcclxuICAgICAgICByZXR1cm4ge3R5cGU6ICdjYXJkX2ltYWdlJ307XHJcbiAgICAgIH1cclxuICAgIH0sXHJcbiAgICBleHRlbmQ6ICdpbWFnZScsXHJcbiAgICBtb2RlbDoge1xyXG4gICAgICBkZWZhdWx0czogT2JqZWN0LmFzc2lnbih7fSwgaW1hZ2VNb2RlbC5wcm90b3R5cGUuZGVmYXVsdHMsIHtcclxuICAgICAgICAnY3VzdG9tLW5hbWUnOiAnQ2FyZCBJbWFnZScsXHJcbiAgICAgICAgY2xhc3NlczogWydjYXJkLWltZyddLFxyXG4gICAgICAgICdjYXJkLW9yZGVyJzogM1xyXG4gICAgICB9KVxyXG4gICAgfSxcclxuICAgIGV4dGVuZFZpZXc6ICdpbWFnZScsXHJcbiAgfSk7XHJcblxyXG4gIGRvbWMuYWRkVHlwZSgnY2FyZF9pbWFnZV9vdmVybGF5Jywge1xyXG4gICAgaXNDb21wb25lbnQ6IGZ1bmN0aW9uKGVsKSB7XHJcbiAgICAgIGlmKGVsICYmIGVsLmNsYXNzTGlzdCAmJiBlbC5jbGFzc0xpc3QuY29udGFpbnMoJ2NhcmQtaW1nLW92ZXJsYXknKSkge1xyXG4gICAgICAgIHJldHVybiB7dHlwZTogJ2NhcmRfaW1hZ2Vfb3ZlcmxheSd9O1xyXG4gICAgICB9XHJcbiAgICB9LFxyXG4gICAgZXh0ZW5kOiAnZGVmYXVsdCcsXHJcbiAgICBtb2RlbDoge1xyXG4gICAgICBkZWZhdWx0czogT2JqZWN0LmFzc2lnbih7fSwgZGVmYXVsdE1vZGVsLnByb3RvdHlwZS5kZWZhdWx0cywge1xyXG4gICAgICAgICdjdXN0b20tbmFtZSc6ICdDYXJkIEltYWdlIE92ZXJsYXknLFxyXG4gICAgICAgIGNsYXNzZXM6IFsnY2FyZC1pbWctb3ZlcmxheSddLFxyXG4gICAgICAgICdjYXJkLW9yZGVyJzogNFxyXG4gICAgICB9KVxyXG4gICAgfSxcclxuICAgIGV4dGVuZFZpZXc6ICdkZWZhdWx0JyxcclxuICB9KTtcclxuXHJcbiAgZG9tYy5hZGRUeXBlKCdjYXJkX2JvZHknLCB7XHJcbiAgICBpc0NvbXBvbmVudDogZnVuY3Rpb24oZWwpIHtcclxuICAgICAgaWYoZWwgJiYgZWwuY2xhc3NMaXN0ICYmIGVsLmNsYXNzTGlzdC5jb250YWlucygnY2FyZC1ib2R5JykpIHtcclxuICAgICAgICByZXR1cm4ge3R5cGU6ICdjYXJkX2JvZHknfTtcclxuICAgICAgfVxyXG4gICAgfSxcclxuICAgIGV4dGVuZDogJ2RlZmF1bHQnLFxyXG4gICAgbW9kZWw6IHtcclxuICAgICAgZGVmYXVsdHM6IE9iamVjdC5hc3NpZ24oe30sIGRlZmF1bHRNb2RlbC5wcm90b3R5cGUuZGVmYXVsdHMsIHtcclxuICAgICAgICAnY3VzdG9tLW5hbWUnOiAnQ2FyZCBCb2R5JyxcclxuICAgICAgICBjbGFzc2VzOiBbJ2NhcmQtYm9keSddLFxyXG4gICAgICAgICdjYXJkLW9yZGVyJzogNVxyXG4gICAgICB9KVxyXG4gICAgfSxcclxuICAgIGV4dGVuZFZpZXc6ICdkZWZhdWx0JyxcclxuICB9KTtcclxuXHJcbiAgZG9tYy5hZGRUeXBlKCdjYXJkX2Zvb3RlcicsIHtcclxuICAgIGlzQ29tcG9uZW50OiBmdW5jdGlvbihlbCkge1xyXG4gICAgICBpZihlbCAmJiBlbC5jbGFzc0xpc3QgJiYgZWwuY2xhc3NMaXN0LmNvbnRhaW5zKCdjYXJkLWZvb3RlcicpKSB7XHJcbiAgICAgICAgcmV0dXJuIHt0eXBlOiAnY2FyZF9mb290ZXInfTtcclxuICAgICAgfVxyXG4gICAgfSxcclxuICAgIGV4dGVuZDogJ2RlZmF1bHQnLFxyXG4gICAgbW9kZWw6IHtcclxuICAgICAgZGVmYXVsdHM6IE9iamVjdC5hc3NpZ24oe30sIGRlZmF1bHRNb2RlbC5wcm90b3R5cGUuZGVmYXVsdHMsIHtcclxuICAgICAgICAnY3VzdG9tLW5hbWUnOiAnQ2FyZCBGb290ZXInLFxyXG4gICAgICAgIGNsYXNzZXM6IFsnY2FyZC1mb290ZXInXSxcclxuICAgICAgICAnY2FyZC1vcmRlcic6IDZcclxuICAgICAgfSlcclxuICAgIH0sXHJcbiAgICBleHRlbmRWaWV3OiAnZGVmYXVsdCcsXHJcbiAgfSk7XHJcblxyXG4gIGRvbWMuYWRkVHlwZSgnY2FyZF9pbWFnZV9ib3R0b20nLCB7XHJcbiAgICBpc0NvbXBvbmVudDogZnVuY3Rpb24oZWwpIHtcclxuICAgICAgaWYoZWwgJiYgZWwuY2xhc3NMaXN0ICYmIGVsLmNsYXNzTGlzdC5jb250YWlucygnY2FyZC1pbWctYm90dG9tJykpIHtcclxuICAgICAgICByZXR1cm4ge3R5cGU6ICdjYXJkX2ltYWdlX2JvdHRvbSd9O1xyXG4gICAgICB9XHJcbiAgICB9LFxyXG4gICAgZXh0ZW5kOiAnaW1hZ2UnLFxyXG4gICAgbW9kZWw6IHtcclxuICAgICAgZGVmYXVsdHM6IE9iamVjdC5hc3NpZ24oe30sIGltYWdlTW9kZWwucHJvdG90eXBlLmRlZmF1bHRzLCB7XHJcbiAgICAgICAgJ2N1c3RvbS1uYW1lJzogJ0NhcmQgSW1hZ2UgQm90dG9tJyxcclxuICAgICAgICBjbGFzc2VzOiBbJ2NhcmQtaW1nLWJvdHRvbSddLFxyXG4gICAgICAgICdjYXJkLW9yZGVyJzogN1xyXG4gICAgICB9KVxyXG4gICAgfSxcclxuICAgIGV4dGVuZFZpZXc6ICdpbWFnZScsXHJcbiAgfSk7XHJcblxyXG4gIGRvbWMuYWRkVHlwZSgnY2FyZF9jb250YWluZXInLCB7XHJcbiAgICBpc0NvbXBvbmVudDogZnVuY3Rpb24gKGVsKSB7XHJcbiAgICAgIGNvbnN0IGNzcyA9IEFycmF5LmZyb20oZWwuY2xhc3NMaXN0IHx8IFtdKTtcclxuICAgICAgY29uc3QgaW5jbHVkZXMgPSBbJ2NhcmQtZ3JvdXAnLCdjYXJkLWRlY2snLCdjYXJkLWNvbHVtbnMnXTtcclxuICAgICAgY29uc3QgaW50ZXJzZWN0aW9uID0gY3NzLmZpbHRlcih4ID0+IGluY2x1ZGVzLmluY2x1ZGVzKHgpKTtcclxuXHJcbiAgICAgIGlmKGVsICYmIGVsLmNsYXNzTGlzdCAmJiBpbnRlcnNlY3Rpb24ubGVuZ3RoKSB7XHJcbiAgICAgICAgcmV0dXJuIHt0eXBlOiAnY2FyZF9jb250YWluZXInfTtcclxuICAgICAgfVxyXG4gICAgfSxcclxuICAgIGV4dGVuZDogJ2RlZmF1bHQnLFxyXG4gICAgbW9kZWw6IHtcclxuICAgICAgZGVmYXVsdHM6IE9iamVjdC5hc3NpZ24oe30sIGRlZmF1bHRNb2RlbC5wcm90b3R5cGUuZGVmYXVsdHMsIHtcclxuICAgICAgICAnY3VzdG9tLW5hbWUnOiAnQ2FyZCBDb250YWluZXInLFxyXG4gICAgICAgIGNsYXNzZXM6IFsnY2FyZC1ncm91cCddLFxyXG4gICAgICAgIGRyb3BwYWJsZTogJy5jYXJkJyxcclxuICAgICAgICB0cmFpdHM6IFtcclxuICAgICAgICAgIHtcclxuICAgICAgICAgICAgdHlwZTogJ2NsYXNzX3NlbGVjdCcsXHJcbiAgICAgICAgICAgIG9wdGlvbnM6IFtcclxuICAgICAgICAgICAgICB7dmFsdWU6ICdjYXJkLWdyb3VwJywgbmFtZTogJ0dyb3VwJ30sXHJcbiAgICAgICAgICAgICAge3ZhbHVlOiAnY2FyZC1kZWNrJywgbmFtZTogJ0RlY2snfSxcclxuICAgICAgICAgICAgICB7dmFsdWU6ICdjYXJkLWNvbHVtbnMnLCBuYW1lOiAnQ29sdW1ucyd9LFxyXG4gICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICBsYWJlbDogJ0xheW91dCcsXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgXS5jb25jYXQoZGVmYXVsdE1vZGVsLnByb3RvdHlwZS5kZWZhdWx0cy50cmFpdHMpXHJcbiAgICAgIH0pXHJcbiAgICB9LFxyXG4gICAgZXh0ZW5kVmlldzogJ2RlZmF1bHQnLFxyXG4gIH0pO1xyXG5cclxufVxyXG4iLCJpbXBvcnQgY2hlY2tJY29uIGZyb20gXCJyYXctbG9hZGVyIS4uL2ljb25zL2NoZWNrLXNxdWFyZS1zb2xpZC5zdmdcIjtcclxuXHJcbmV4cG9ydCBjb25zdCBDaGVja2JveEJsb2NrID0gKGJtLCBsYWJlbCkgPT4ge1xyXG4gICAgYm0uYWRkKCdjaGVja2JveCcsIHtcclxuICAgICAgICBsYWJlbDogYFxyXG4gICAgICAgICAgICAke2NoZWNrSWNvbn1cclxuICAgICAgICAgICAgPGRpdj4ke2xhYmVsfTwvZGl2PlxyXG4gICAgICAgIGAsXHJcbiAgICAgICAgY2F0ZWdvcnk6ICdGb3JtcycsXHJcbiAgICAgICAgY29udGVudDogYFxyXG4gICAgICAgIDxkaXYgY2xhc3M9XCJmb3JtLWNoZWNrXCI+XHJcbiAgICAgICAgICA8aW5wdXQgY2xhc3M9XCJmb3JtLWNoZWNrLWlucHV0XCIgdHlwZT1cImNoZWNrYm94XCIgdmFsdWU9XCJcIiBpZD1cImRlZmF1bHRDaGVjazFcIj5cclxuICAgICAgICAgIDxsYWJlbCBjbGFzcz1cImZvcm0tY2hlY2stbGFiZWxcIiBmb3I9XCJkZWZhdWx0Q2hlY2sxXCI+XHJcbiAgICAgICAgICAgIERlZmF1bHQgY2hlY2tib3hcclxuICAgICAgICAgIDwvbGFiZWw+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgIGAsXHJcbiAgICB9KTtcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IChkYywgdHJhaXRzLCBjb25maWcgPSB7fSkgPT4ge1xyXG4gICAgY29uc3QgZGVmYXVsdFR5cGUgPSBkYy5nZXRUeXBlKCdkZWZhdWx0Jyk7XHJcbiAgICBjb25zdCBkZWZhdWx0TW9kZWwgPSBkZWZhdWx0VHlwZS5tb2RlbDtcclxuICAgIGNvbnN0IGRlZmF1bHRWaWV3ID0gZGVmYXVsdFR5cGUudmlldztcclxuICAgIGNvbnN0IGlucHV0VHlwZSA9IGRjLmdldFR5cGUoJ2lucHV0Jyk7XHJcbiAgICBjb25zdCBpbnB1dE1vZGVsID0gaW5wdXRUeXBlLm1vZGVsO1xyXG5cclxuICAgIGRjLmFkZFR5cGUoJ2NoZWNrYm94Jywge1xyXG4gICAgICAgIGlzQ29tcG9uZW50OiBmdW5jdGlvbihlbCkge1xyXG4gICAgICAgICAgICBpZiAoZWwudGFnTmFtZSA9PT0gJ0lOUFVUJyAmJiBlbC50eXBlID09PSAnY2hlY2tib3gnKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4ge3R5cGU6ICdjaGVja2JveCd9O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuICAgICAgICBleHRlbmQ6ICdkZWZhdWx0JyxcclxuICAgICAgICBtb2RlbDoge1xyXG4gICAgICAgICAgICBkZWZhdWx0czoge1xyXG4gICAgICAgICAgICAgICAgLi4uaW5wdXRNb2RlbC5wcm90b3R5cGUuZGVmYXVsdHMsXHJcbiAgICAgICAgICAgICAgICAnY3VzdG9tLW5hbWUnOiBjb25maWcubGFiZWxzLmNoZWNrYm94LFxyXG4gICAgICAgICAgICAgICAgY29weWFibGU6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgZHJvcHBhYmxlOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgIGF0dHJpYnV0ZXM6IHt0eXBlOiAnY2hlY2tib3gnfSxcclxuICAgICAgICAgICAgICAgIHRyYWl0czogW1xyXG4gICAgICAgICAgICAgICAgICAgIHRyYWl0cy5pZCxcclxuICAgICAgICAgICAgICAgICAgICB0cmFpdHMubmFtZSxcclxuICAgICAgICAgICAgICAgICAgICB0cmFpdHMudmFsdWUsXHJcbiAgICAgICAgICAgICAgICAgICAgdHJhaXRzLnJlcXVpcmVkLFxyXG4gICAgICAgICAgICAgICAgICAgIHRyYWl0cy5jaGVja2VkXHJcbiAgICAgICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICB9LFxyXG5cclxuICAgICAgICAgICAgaW5pdCgpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMubGlzdGVuVG8odGhpcywgJ2NoYW5nZTpjaGVja2VkJywgdGhpcy5oYW5kbGVDaGVja2VkKTtcclxuICAgICAgICAgICAgfSxcclxuXHJcbiAgICAgICAgICAgIGhhbmRsZUNoZWNrZWQoKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgY2hlY2tlZCA9IHRoaXMuZ2V0KCdjaGVja2VkJyk7XHJcbiAgICAgICAgICAgICAgICBsZXQgYXR0cnMgPSB0aGlzLmdldCgnYXR0cmlidXRlcycpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdmlldyA9IHRoaXMudmlldztcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoY2hlY2tlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGF0dHJzLmNoZWNrZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBkZWxldGUgYXR0cnMuY2hlY2tlZDtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAodmlldykge1xyXG4gICAgICAgICAgICAgICAgICAgIHZpZXcuZWwuY2hlY2tlZCA9IGNoZWNrZWRcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICB0aGlzLnNldCgnYXR0cmlidXRlcycsIHsgLi4uYXR0cnMgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG4gICAgICAgIGV4dGVuZFZpZXc6ICdkZWZhdWx0JyxcclxuICAgICAgICB2aWV3OiB7XHJcbiAgICAgICAgICAgIGV2ZW50czoge1xyXG4gICAgICAgICAgICAgICAgJ2NsaWNrJzogJ2hhbmRsZUNsaWNrJyxcclxuICAgICAgICAgICAgfSxcclxuXHJcbiAgICAgICAgICAgIGhhbmRsZUNsaWNrKGUpIHtcclxuICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICB9LFxyXG4gICAgfSk7XHJcbn1cclxuIiwiaW1wb3J0IGNvbXByZXNzSWNvbiBmcm9tIFwicmF3LWxvYWRlciEuLi9pY29ucy9jb21wcmVzcy1zb2xpZC5zdmdcIjtcclxuXHJcbmV4cG9ydCBjb25zdCBDb2xsYXBzZUJsb2NrID0gKGJtLCBsYWJlbCkgPT4ge1xyXG4gIGJtLmFkZCgnY29sbGFwc2UnLCB7XHJcbiAgICBsYWJlbDogYFxyXG4gICAgICAgICAgICAke2NvbXByZXNzSWNvbn1cclxuICAgICAgICAgICAgPGRpdj4ke2xhYmVsfTwvZGl2PlxyXG4gICAgICAgIGAsXHJcbiAgICBjYXRlZ29yeTogJ0NvbXBvbmVudHMnLFxyXG4gICAgY29udGVudDoge1xyXG4gICAgICB0eXBlOiAnY29sbGFwc2UnXHJcbiAgICB9XHJcbiAgfSk7XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCAoZWRpdG9yKSA9PiB7XHJcbiAgY29uc3QgY29tcHMgPSBlZGl0b3IuRG9tQ29tcG9uZW50cztcclxuICBjb25zdCBkZWZhdWx0VHlwZSA9IGNvbXBzLmdldFR5cGUoJ2RlZmF1bHQnKTtcclxuICBjb25zdCBkZWZhdWx0TW9kZWwgPSBkZWZhdWx0VHlwZS5tb2RlbDtcclxuICBjb25zdCBkZWZhdWx0VmlldyA9IGRlZmF1bHRUeXBlLnZpZXc7XHJcblxyXG4gIGNvbXBzLmFkZFR5cGUoJ2NvbGxhcHNlJywge1xyXG4gICAgaXNDb21wb25lbnQ6IGZ1bmN0aW9uKGVsKSB7XHJcbiAgICAgIGlmKGVsICYmIGVsLmNsYXNzTGlzdCAmJiBlbC5jbGFzc0xpc3QuY29udGFpbnMoJ2Ryb3Bkb3duJykpIHtcclxuICAgICAgICByZXR1cm4ge3R5cGU6ICdkcm9wZG93bid9O1xyXG4gICAgICB9XHJcbiAgICB9LFxyXG4gICAgZXh0ZW5kOiAnZGVmYXVsdCcsXHJcbiAgICBtb2RlbDoge1xyXG4gICAgICBkZWZhdWx0czogT2JqZWN0LmFzc2lnbih7fSwgZGVmYXVsdE1vZGVsLnByb3RvdHlwZS5kZWZhdWx0cywge1xyXG4gICAgICAgICdjdXN0b20tbmFtZSc6ICdEcm9wZG93bicsXHJcbiAgICAgICAgY2xhc3NlczogWydjb2xsYXBzZSddLFxyXG4gICAgICAgIGRyb3BwYWJsZTogdHJ1ZSxcclxuICAgICAgICB0cmFpdHM6IFtcclxuICAgICAgICAgIHtcclxuICAgICAgICAgICAgdHlwZTogJ2NsYXNzX3NlbGVjdCcsXHJcbiAgICAgICAgICAgIG9wdGlvbnM6IFtcclxuICAgICAgICAgICAgICB7dmFsdWU6ICcnLCBuYW1lOiAnQ2xvc2VkJ30sXHJcbiAgICAgICAgICAgICAge3ZhbHVlOiAnc2hvdycsIG5hbWU6ICdPcGVuJ31cclxuICAgICAgICAgICAgXSxcclxuICAgICAgICAgICAgbGFiZWw6ICdJbml0aWFsIHN0YXRlJ1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIF0uY29uY2F0KGRlZmF1bHRNb2RlbC5wcm90b3R5cGUuZGVmYXVsdHMudHJhaXRzKVxyXG4gICAgICB9KSxcclxuICAgICAgLyppbml0MigpIHtcclxuICAgICAgICB3aW5kb3cuYXNkZiA9IHRoaXM7XHJcbiAgICAgICAgY29uc3QgdG9nZ2xlID0ge1xyXG4gICAgICAgICAgdHlwZTogJ2J1dHRvbicsXHJcbiAgICAgICAgICBjb250ZW50OiAnQ2xpY2sgdG8gdG9nZ2xlJyxcclxuICAgICAgICAgIGNsYXNzZXM6IFsnYnRuJywgJ2Ryb3Bkb3duLXRvZ2dsZSddXHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IHRvZ2dsZV9jb21wID0gdGhpcy5hcHBlbmQodG9nZ2xlKVswXTtcclxuICAgICAgICBjb25zdCBtZW51ID0ge1xyXG4gICAgICAgICAgdHlwZTogJ2Ryb3Bkb3duX21lbnUnXHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IG1lbnVfY29tcCA9IHRoaXMuYXBwZW5kKG1lbnUpWzBdO1xyXG4gICAgICAgIHRoaXMuc2V0dXBUb2dnbGUobnVsbCwgbnVsbCwge2ZvcmNlOiB0cnVlfSk7XHJcbiAgICAgICAgY29uc3QgY29tcHMgPSB0aGlzLmNvbXBvbmVudHMoKTtcclxuICAgICAgICBjb21wcy5iaW5kKCdhZGQnLCB0aGlzLnNldHVwVG9nZ2xlLmJpbmQodGhpcykpO1xyXG4gICAgICAgIGNvbXBzLmJpbmQoJ2NoYW5nZScsIHRoaXMuc2V0dXBUb2dnbGUuYmluZCh0aGlzKSk7XHJcbiAgICAgICAgY29tcHMuYmluZCgncmVtb3ZlJywgdGhpcy5zZXR1cFRvZ2dsZS5iaW5kKHRoaXMpKTtcclxuICAgICAgICBjb25zdCBjbGFzc2VzID0gdGhpcy5nZXQoJ2NsYXNzZXMnKTtcclxuICAgICAgICBjbGFzc2VzLmJpbmQoJ2FkZCcsIHRoaXMuc2V0dXBUb2dnbGUuYmluZCh0aGlzKSk7XHJcbiAgICAgICAgY2xhc3Nlcy5iaW5kKCdjaGFuZ2UnLCB0aGlzLnNldHVwVG9nZ2xlLmJpbmQodGhpcykpO1xyXG4gICAgICAgIGNsYXNzZXMuYmluZCgncmVtb3ZlJywgdGhpcy5zZXR1cFRvZ2dsZS5iaW5kKHRoaXMpKTtcclxuICAgICAgfSxcclxuICAgICAgc2V0dXBUb2dnbGUoYSwgYiwgb3B0aW9ucyA9IHt9KSB7XHJcbiAgICAgICAgY29uc3QgdG9nZ2xlID0gdGhpcy5jb21wb25lbnRzKCkuZmlsdGVyKGMgPT4gYy5nZXRBdHRyaWJ1dGVzKCkuY2xhc3Muc3BsaXQoJyAnKS5pbmNsdWRlcygnZHJvcGRvd24tdG9nZ2xlJykpWzBdO1xyXG4gICAgICAgIC8vIHJhaXNlIGVycm9yIGlmIHRvZ2dsZSBub3QgZm91bmRcclxuICAgICAgICBjb25zdCBtZW51ID0gdGhpcy5jb21wb25lbnRzKCkuZmlsdGVyKGMgPT4gYy5nZXRBdHRyaWJ1dGVzKCkuY2xhc3Muc3BsaXQoJyAnKS5pbmNsdWRlcygnZHJvcGRvd24tbWVudScpKVswXTtcclxuICAgICAgICAvLyByYWlzZSBlcnJvciBpZiBtZW51IG5vdCBmb3VuZFxyXG5cclxuICAgICAgICBpZihvcHRpb25zLmZvcmNlICE9PSB0cnVlICYmIG9wdGlvbnMuaWdub3JlID09PSB0cnVlKSB7XHJcbiAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZih0b2dnbGUgJiYgbWVudSkge1xyXG5cclxuICAgICAgICAgIGZ1bmN0aW9uIGhhc0V2ZW50KGNvbXApIHtcclxuICAgICAgICAgICAgbGV0IGVjYSA9IGNvbXAuX2V2ZW50c1snY2hhbmdlOmF0dHJpYnV0ZXMnXTtcclxuICAgICAgICAgICAgaWYoIWVjYSkgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICByZXR1cm4gZWNhLmZpbHRlcihlID0+IGUuY2FsbGJhY2submFtZSA9PSAnc2V0dXBUb2dnbGUnKS5sZW5ndGggIT0gMDtcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAvLyBzZXR1cCBldmVudCBsaXN0ZW5lcnMgaWYgdGhleSBhcmVuJ3Qgc2V0XHJcbiAgICAgICAgICBpZighaGFzRXZlbnQodG9nZ2xlKSkge1xyXG4gICAgICAgICAgICB0aGlzLmxpc3RlblRvKHRvZ2dsZSwgJ2NoYW5nZTphdHRyaWJ1dGVzJywgdGhpcy5zZXR1cFRvZ2dsZSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBpZighaGFzRXZlbnQobWVudSkpIHtcclxuICAgICAgICAgICAgdGhpcy5saXN0ZW5UbyhtZW51LCAnY2hhbmdlOmF0dHJpYnV0ZXMnLCB0aGlzLnNldHVwVG9nZ2xlKTtcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAvLyBzZXR1cCB0b2dnbGVcclxuICAgICAgICAgIHZhciB0b2dnbGVfYXR0cnMgPSB0b2dnbGUuZ2V0QXR0cmlidXRlcygpO1xyXG4gICAgICAgICAgdG9nZ2xlX2F0dHJzWydyb2xlJ10gPSAnYnV0dG9uJzsgLy8gaWYgQVxyXG4gICAgICAgICAgdmFyIG1lbnVfYXR0cnMgPSBtZW51LmdldEF0dHJpYnV0ZXMoKTtcclxuICAgICAgICAgIGlmKCF0b2dnbGVfYXR0cnMuaGFzT3duUHJvcGVydHkoJ2RhdGEtdG9nZ2xlJykpIHtcclxuICAgICAgICAgICAgdG9nZ2xlX2F0dHJzWydkYXRhLXRvZ2dsZSddID0gJ2Ryb3Bkb3duJztcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGlmKCF0b2dnbGVfYXR0cnMuaGFzT3duUHJvcGVydHkoJ2FyaWEtaGFzcG9wdXAnKSkge1xyXG4gICAgICAgICAgICB0b2dnbGVfYXR0cnNbJ2FyaWEtaGFzcG9wdXAnXSA9IHRydWU7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBjb25zdCBkcm9wZG93bl9jbGFzc2VzID0gdGhpcy5nZXRBdHRyaWJ1dGVzKCkuY2xhc3Muc3BsaXQoJyAnKTtcclxuICAgICAgICAgIHRvZ2dsZV9hdHRyc1snYXJpYS1leHBhbmRlZCddID0gZHJvcGRvd25fY2xhc3Nlcy5pbmNsdWRlcygnc2hvdycpO1xyXG4gICAgICAgICAgdG9nZ2xlLnNldCgnYXR0cmlidXRlcycsIHRvZ2dsZV9hdHRycywge2lnbm9yZTogdHJ1ZX0pO1xyXG4gICAgICAgICAgLy8gc2V0dXAgbWVudVxyXG4gICAgICAgICAgLy8gdG9nZ2xlIG5lZWRzIElEIGZvciBhcmlhLWxhYmVsbGVkIG9uIHRoZSBtZW51LCBjb3VsZCBhbGVydCBoZXJlXHJcbiAgICAgICAgICBpZih0b2dnbGVfYXR0cnMuaGFzT3duUHJvcGVydHkoJ2lkJykpIHtcclxuICAgICAgICAgICAgbWVudV9hdHRyc1snYXJpYS1sYWJlbGxlZGJ5J10gPSB0b2dnbGVfYXR0cnMuaWQ7XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBkZWxldGUgbWVudV9hdHRyc1snYXJpYS1sYWJlbGxlZGJ5J107XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBtZW51LnNldCgnYXR0cmlidXRlcycsIG1lbnVfYXR0cnMsIHtpZ25vcmU6IHRydWV9KTtcclxuICAgICAgICB9XHJcbiAgICAgIH0qL1xyXG4gICAgfSxcclxuICAgIGV4dGVuZFZpZXc6ICdkZWZhdWx0JyxcclxuICAgIHZpZXc6e1xyXG4gICAgICAvKmluaXQoKSB7XHJcbiAgICAgICAgdGhpcy5tb2RlbC5zZXR1cFRvZ2dsZVxyXG4gICAgICB9Ki9cclxuICAgIH1cclxuICB9KTtcclxuXHJcbn1cclxuIiwiaW1wb3J0IGNvbHVtbnNJY29uIGZyb20gXCJyYXctbG9hZGVyIS4uL2ljb25zL2NvbHVtbnMtc29saWQuc3ZnXCI7XHJcblxyXG5leHBvcnQgY29uc3QgQ29sdW1uQmxvY2sgPSAoYm0sIGxhYmVsKSA9PiB7XHJcbiAgICBibS5hZGQoJ2NvbHVtbicpLnNldCh7XHJcbiAgICAgICAgbGFiZWw6IGBcclxuICAgICAgICAgICAgJHtjb2x1bW5zSWNvbn1cclxuICAgICAgICAgICAgPGRpdj4ke2xhYmVsfTwvZGl2PlxyXG4gICAgICAgIGAsXHJcbiAgICAgICAgY2F0ZWdvcnk6ICdMYXlvdXQnLFxyXG4gICAgICAgIGNvbnRlbnQ6IHtcclxuICAgICAgICAgICAgdHlwZTogJ2NvbHVtbicsXHJcbiAgICAgICAgICAgIGNsYXNzZXM6IFsnY29sJ11cclxuICAgICAgICB9XHJcbiAgICB9KTtcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IChkb21jLCBlZGl0b3IpID0+IHtcclxuICAgIGNvbnN0IGRlZmF1bHRUeXBlID0gZG9tYy5nZXRUeXBlKCdkZWZhdWx0Jyk7XHJcbiAgICBjb25zdCBkZWZhdWx0TW9kZWwgPSBkZWZhdWx0VHlwZS5tb2RlbDtcclxuICAgIGNvbnN0IGRlZmF1bHRWaWV3ID0gZGVmYXVsdFR5cGUudmlldztcclxuICAgIGNvbnN0IHNwYW5zID0gWzEsMiwzLDQsNSw2LDcsOCw5LDEwLDExLDEyXTtcclxuXHJcbiAgICBkb21jLmFkZFR5cGUoJ2NvbHVtbicsIHtcclxuICAgICAgICBpc0NvbXBvbmVudDogKGVsKSA9PiB7XHJcbiAgICAgICAgICAgIGxldCBtYXRjaCA9IGZhbHNlO1xyXG4gICAgICAgICAgICBpZihlbCAmJiBlbC5jbGFzc0xpc3QpIHtcclxuICAgICAgICAgICAgICAgIGVsLmNsYXNzTGlzdC5mb3JFYWNoKGZ1bmN0aW9uKGtsYXNzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYoa2xhc3M9PVwiY29sXCIgfHwga2xhc3MubWF0Y2goL15jb2wtLykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWF0Y2ggPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmKG1hdGNoKSByZXR1cm4ge3R5cGU6ICdjb2x1bW4nfTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGV4dGVuZDogJ2RlZmF1bHQnLFxyXG4gICAgICAgIG1vZGVsOiB7XHJcbiAgICAgICAgICAgIGRlZmF1bHRzOiBPYmplY3QuYXNzaWduKHt9LCBkZWZhdWx0TW9kZWwucHJvdG90eXBlLmRlZmF1bHRzLCB7XHJcbiAgICAgICAgICAgICAgICAnY3VzdG9tLW5hbWUnOiAnQ29sdW1uJyxcclxuICAgICAgICAgICAgICAgIGRyYWdnYWJsZTogJy5yb3cnLFxyXG4gICAgICAgICAgICAgICAgZHJvcHBhYmxlOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgcmVzaXphYmxlOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdXBkYXRlVGFyZ2V0OiAoZWwsIHJlY3QsIG9wdCk9PntcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgc2VsZWN0ZWQgPSAgZWRpdG9yLmdldFNlbGVjdGVkKCkgO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZighc2VsZWN0ZWQpeyByZXR1cm4gOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL2NvbXB1dGUgdGhlIGN1cnJlbnQgc2NyZWVuIHNpemUgKGJvb3RzdHJhcCBzZW1hbnRpYylcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZG9jV2lkdGggPSBlbC5nZXRSb290Tm9kZSgpLmJvZHkub2Zmc2V0V2lkdGggO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgY3VycmVudFNpemUgPSBcIlwiIDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYoZG9jV2lkdGggPj0gMTIwMCl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50U2l6ZSA9IFwieGxcIiA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZihkb2NXaWR0aCA+PSA5OTIpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudFNpemUgPSBcImxnXCIgO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYoZG9jV2lkdGggPj0gNzY4KXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRTaXplID0gXCJtZFwiIDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmKGRvY1dpZHRoID49IDU3Nil7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50U2l6ZSA9IFwic21cIiA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vY29tcHV0ZSB0aGUgdGhyZXNob2xkIHdoZW4gYWRkIG9uIHJlbW92ZSAxIGNvbCBzcGFuIHRvIHRoZSBlbGVtZW50XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHJvdyA9IGVsLnBhcmVudEVsZW1lbnQgO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBvbmVDb2xXaWR0aCA9IHJvdy5vZmZzZXRXaWR0aCAvIDEyIDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy90aGUgdGhyZXNob2xkIGlzIGhhbGYgb25lIGNvbHVtbiB3aWR0aFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0aHJlc2hvbGQgPSBvbmVDb2xXaWR0aCowLjUgO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgLy9jaGVjayBpZiB3ZSBhcmUgZ3Jvd2luZyBvciBzaHJpbmtpbmcgdGhlIGNvbHVtblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBncm93ID0gcmVjdC53ID4gZWwub2Zmc2V0V2lkdGggKyB0aHJlc2hvbGQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHNocmluayA9IHJlY3QudyA8IGVsLm9mZnNldFdpZHRoIC0gdGhyZXNob2xkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZihncm93IHx8IHNocmluayl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgdGVzdFJlZ2V4cCA9IG5ldyBSZWdFeHAoXCJeY29sLVwiK2N1cnJlbnRTaXplK1wiLVxcXFxkezEsMn0kXCIpIDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKCFjdXJyZW50U2l6ZSl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGVzdFJlZ2V4cCA9IG5ldyBSZWdFeHAoXCJeY29sLVxcXFxkezEsMn0kXCIpIDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBmb3VuZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHNpemVzU3BhbnMgPSB7fSA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgb2xkU3BhbiA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgb2xkQ2xhc3MgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yKGxldCBjbCBvZiBlbC5jbGFzc0xpc3Qpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKGNsLmluZGV4T2YoXCJjb2wtXCIpID09PSAwKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IFtjLHNpemUsc3Bhbl0gPSBjbC5zcGxpdChcIi1cIikgO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZighc3Bhbil7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcGFuID0gc2l6ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNpemUgPSBcIlwiIDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaXplc1NwYW5zW3NpemVdID0gc3BhbiA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKHNpemUgPT09IGN1cnJlbnRTaXplKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vZm91bmQgdGhlIGNvbC1YWC05OSBjbGFzc1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2xkQ2xhc3MgPSBjbDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9sZFNwYW4gPSBzcGFuIDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvdW5kID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZighZm91bmQpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHNpemVPcmRlciA9IFtcIlwiLCBcInhzXCIsIFwic21cIiwgXCJtZFwiLCBcImxnXCIsIFwieGxcIl0gO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvcihsZXQgcyBvZiBzaXplT3JkZXIpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZihzaXplc1NwYW5zW3NdKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9sZFNwYW4gPSBzaXplc1NwYW5zW3NdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm91bmQgPSB0cnVlIDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZihzID09PSBjdXJyZW50U2l6ZSl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgbmV3U3BhbiA9IE51bWJlcihvbGRTcGFuKSA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZihncm93KXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdTcGFuKysgO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3U3Bhbi0tIDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKG5ld1NwYW4gPiAxMil7IG5ld1NwYW4gPSAxMiA7IH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKG5ld1NwYW4gPCAxKXsgbmV3U3BhbiA9IDEgOyB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IG5ld0NsYXNzID0gXCJjb2wtXCIrY3VycmVudFNpemUrXCItXCIrbmV3U3BhbiA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZighY3VycmVudFNpemUpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld0NsYXNzID0gXCJjb2wtXCIrbmV3U3BhbiA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL3VwZGF0ZSB0aGUgY2xhc3NcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdGVkLmFkZENsYXNzKG5ld0NsYXNzKSA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZihvbGRDbGFzcyAmJiBvbGRDbGFzcyAhPT0gbmV3Q2xhc3Mpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdGVkLnJlbW92ZUNsYXNzKG9sZENsYXNzKSA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL25vdGlmeSB0aGUgY29ycmVzcG9uZGluZyB0cmFpdCB0byB1cGRhdGUgaXRzIHZhbHVlIGFjY29yZGluZ2x5XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3RlZC5nZXRUcmFpdCgoY3VycmVudFNpemV8fFwieHNcIikrXCJfd2lkdGhcIikudmlldy5wb3N0VXBkYXRlKCkgO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICB0bDogMCwgXHJcbiAgICAgICAgICAgICAgICAgICAgdGM6IDAsIFxyXG4gICAgICAgICAgICAgICAgICAgIHRyOiAwLCBcclxuICAgICAgICAgICAgICAgICAgICBjbDogMCwgXHJcbiAgICAgICAgICAgICAgICAgICAgY3I6IDEsIFxyXG4gICAgICAgICAgICAgICAgICAgIGJsOiAwLCBcclxuICAgICAgICAgICAgICAgICAgICBiYzogMCwgXHJcbiAgICAgICAgICAgICAgICAgICAgYnI6IDAgXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgdHJhaXRzOiBbXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZDogXCJ4c193aWR0aFwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnY2xhc3Nfc2VsZWN0JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9uczogW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge3ZhbHVlOiAnY29sJywgbmFtZTogJ0VxdWFsJ30sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7dmFsdWU6ICdjb2wtYXV0bycsIG5hbWU6ICdWYXJpYWJsZSd9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLi4uIHNwYW5zLm1hcChmdW5jdGlvbihpKSB7IHJldHVybiB7dmFsdWU6ICdjb2wtJytpLCBuYW1lOiBpKycvMTInfSB9KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsYWJlbDogJ1hTIFdpZHRoJyxcclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWQ6IFwic21fd2lkdGhcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2NsYXNzX3NlbGVjdCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbnM6IFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt2YWx1ZTogJycsIG5hbWU6ICdOb25lJ30sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7dmFsdWU6ICdjb2wtc20nLCBuYW1lOiAnRXF1YWwnfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt2YWx1ZTogJ2NvbC1zbS1hdXRvJywgbmFtZTogJ1ZhcmlhYmxlJ30sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuLi4gc3BhbnMubWFwKGZ1bmN0aW9uKGkpIHsgcmV0dXJuIHt2YWx1ZTogJ2NvbC1zbS0nK2ksIG5hbWU6IGkrJy8xMid9IH0pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsOiAnU00gV2lkdGgnLFxyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZDogXCJtZF93aWR0aFwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnY2xhc3Nfc2VsZWN0JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9uczogW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge3ZhbHVlOiAnJywgbmFtZTogJ05vbmUnfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt2YWx1ZTogJ2NvbC1tZCcsIG5hbWU6ICdFcXVhbCd9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge3ZhbHVlOiAnY29sLW1kLWF1dG8nLCBuYW1lOiAnVmFyaWFibGUnfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC4uLiBzcGFucy5tYXAoZnVuY3Rpb24oaSkgeyByZXR1cm4ge3ZhbHVlOiAnY29sLW1kLScraSwgbmFtZTogaSsnLzEyJ30gfSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWw6ICdNRCBXaWR0aCcsXHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlkOiBcImxnX3dpZHRoXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdjbGFzc19zZWxlY3QnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25zOiBbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7dmFsdWU6ICcnLCBuYW1lOiAnTm9uZSd9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge3ZhbHVlOiAnY29sLWxnJywgbmFtZTogJ0VxdWFsJ30sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7dmFsdWU6ICdjb2wtbGctYXV0bycsIG5hbWU6ICdWYXJpYWJsZSd9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLi4uIHNwYW5zLm1hcChmdW5jdGlvbihpKSB7IHJldHVybiB7dmFsdWU6ICdjb2wtbGctJytpLCBuYW1lOiBpKycvMTInfSB9KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsYWJlbDogJ0xHIFdpZHRoJyxcclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWQ6IFwieGxfd2lkdGhcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2NsYXNzX3NlbGVjdCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbnM6IFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt2YWx1ZTogJycsIG5hbWU6ICdOb25lJ30sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7dmFsdWU6ICdjb2wteGwnLCBuYW1lOiAnRXF1YWwnfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt2YWx1ZTogJ2NvbC14bC1hdXRvJywgbmFtZTogJ1ZhcmlhYmxlJ30sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuLi4gc3BhbnMubWFwKGZ1bmN0aW9uKGkpIHsgcmV0dXJuIHt2YWx1ZTogJ2NvbC14bC0nK2ksIG5hbWU6IGkrJy8xMid9IH0pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsOiAnWEwgV2lkdGgnLFxyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnY2xhc3Nfc2VsZWN0JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9uczogW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge3ZhbHVlOiAnJywgbmFtZTogJ05vbmUnfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC4uLiBzcGFucy5tYXAoZnVuY3Rpb24oaSkgeyByZXR1cm4ge3ZhbHVlOiAnb2Zmc2V0LScraSwgbmFtZTogaSsnLzEyJ30gfSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWw6ICdYUyBPZmZzZXQnLFxyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnY2xhc3Nfc2VsZWN0JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9uczogW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge3ZhbHVlOiAnJywgbmFtZTogJ05vbmUnfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC4uLiBzcGFucy5tYXAoZnVuY3Rpb24oaSkgeyByZXR1cm4ge3ZhbHVlOiAnb2Zmc2V0LXNtLScraSwgbmFtZTogaSsnLzEyJ30gfSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWw6ICdTTSBPZmZzZXQnLFxyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnY2xhc3Nfc2VsZWN0JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9uczogW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge3ZhbHVlOiAnJywgbmFtZTogJ05vbmUnfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC4uLiBzcGFucy5tYXAoZnVuY3Rpb24oaSkgeyByZXR1cm4ge3ZhbHVlOiAnb2Zmc2V0LW1kLScraSwgbmFtZTogaSsnLzEyJ30gfSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWw6ICdNRCBPZmZzZXQnLFxyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnY2xhc3Nfc2VsZWN0JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9uczogW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge3ZhbHVlOiAnJywgbmFtZTogJ05vbmUnfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC4uLiBzcGFucy5tYXAoZnVuY3Rpb24oaSkgeyByZXR1cm4ge3ZhbHVlOiAnb2Zmc2V0LWxnLScraSwgbmFtZTogaSsnLzEyJ30gfSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWw6ICdMRyBPZmZzZXQnLFxyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnY2xhc3Nfc2VsZWN0JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9uczogW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge3ZhbHVlOiAnJywgbmFtZTogJ05vbmUnfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC4uLiBzcGFucy5tYXAoZnVuY3Rpb24oaSkgeyByZXR1cm4ge3ZhbHVlOiAnb2Zmc2V0LXhsLScraSwgbmFtZTogaSsnLzEyJ30gfSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWw6ICdYTCBPZmZzZXQnLFxyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBdLmNvbmNhdChkZWZhdWx0TW9kZWwucHJvdG90eXBlLmRlZmF1bHRzLnRyYWl0cylcclxuICAgICAgICAgICAgfSksXHJcbiAgICAgICAgfSxcclxuICAgICAgICBleHRlbmRWaWV3OiAnZGVmYXVsdCdcclxuICAgIH0pO1xyXG59XHJcbiIsImltcG9ydCBlcXVhbHNJY29uIGZyb20gXCJyYXctbG9hZGVyIS4uL2ljb25zL2VxdWFscy1zb2xpZC5zdmdcIjtcclxuXHJcbmV4cG9ydCBjb25zdCBDb2x1bW5CcmVha0Jsb2NrID0gKGJtLCBsYWJlbCkgPT4ge1xyXG4gICAgYm0uYWRkKCdjb2x1bW5fYnJlYWsnKS5zZXQoe1xyXG4gICAgICAgIGxhYmVsOiBgXHJcbiAgICAgICAgICAgICR7ZXF1YWxzSWNvbn1cclxuICAgICAgICAgICAgPGRpdj4ke2xhYmVsfTwvZGl2PlxyXG4gICAgICAgIGAsXHJcbiAgICAgICAgY2F0ZWdvcnk6ICdMYXlvdXQnLFxyXG4gICAgICAgIGNvbnRlbnQ6IHtcclxuICAgICAgICAgICAgdHlwZTogJ2NvbHVtbl9icmVhaydcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IChkb21jKSA9PiB7XHJcbiAgICBjb25zdCBkZWZhdWx0VHlwZSA9IGRvbWMuZ2V0VHlwZSgnZGVmYXVsdCcpO1xyXG4gICAgY29uc3QgZGVmYXVsdE1vZGVsID0gZGVmYXVsdFR5cGUubW9kZWw7XHJcbiAgICBjb25zdCBkZWZhdWx0VmlldyA9IGRlZmF1bHRUeXBlLnZpZXc7XHJcblxyXG4gICAgZG9tYy5hZGRUeXBlKCdjb2x1bW5fYnJlYWsnLCB7XHJcbiAgICAgICAgaXNDb21wb25lbnQ6IGZ1bmN0aW9uKGVsKSB7XHJcbiAgICAgICAgICAgIGlmKGVsICYmIGVsLmNsYXNzTGlzdCAmJiBlbC5jbGFzc0xpc3QuY29udGFpbnMoJ3ctMTAwJykpIHsgLy8gYWxzbyBjaGVjayBpZiBwYXJlbnQgaXMgYC5yb3dgXHJcbiAgICAgICAgICAgICAgICByZXR1cm4ge3R5cGU6ICdjb2x1bW5fYnJlYWsnfTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZXh0ZW5kOiAnZGVmYXVsdCcsXHJcbiAgICAgICAgbW9kZWw6e1xyXG4gICAgICAgICAgICBkZWZhdWx0czogT2JqZWN0LmFzc2lnbih7fSwgZGVmYXVsdE1vZGVsLnByb3RvdHlwZS5kZWZhdWx0cywge1xyXG4gICAgICAgICAgICAgICAgJ2N1c3RvbS1uYW1lJzogJ0NvbHVtbiBCcmVhaycsXHJcbiAgICAgICAgICAgICAgICB0YWdOYW1lOiAnZGl2JyxcclxuICAgICAgICAgICAgICAgIGNsYXNzZXM6IFsndy0xMDAnXVxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZXh0ZW5kVmlldzogJ2RlZmF1bHQnLFxyXG4gICAgfSk7XHJcbn1cclxuIiwiaW1wb3J0IHdpbmRvd0ljb24gZnJvbSBcInJhdy1sb2FkZXIhLi4vaWNvbnMvd2luZG93LW1heGltaXplLXNvbGlkLnN2Z1wiO1xyXG5cclxuZXhwb3J0IGNvbnN0IENvbnRhaW5lckJsb2NrID0gKGJtLCBsYWJlbCkgPT4ge1xyXG4gICAgYm0uYWRkKCdjb250YWluZXInKS5zZXQoe1xyXG4gICAgICAgIGxhYmVsOiBgXHJcbiAgICAgICAgICAgICR7d2luZG93SWNvbn1cclxuICAgICAgICAgICAgPGRpdj4ke2xhYmVsfTwvZGl2PlxyXG4gICAgICAgIGAsXHJcbiAgICAgICAgY2F0ZWdvcnk6ICdMYXlvdXQnLFxyXG4gICAgICAgIGNvbnRlbnQ6IHtcclxuICAgICAgICAgICAgdHlwZTogJ2NvbnRhaW5lcicsXHJcbiAgICAgICAgICAgIGNsYXNzZXM6IFsnY29udGFpbmVyJ11cclxuICAgICAgICB9XHJcbiAgICB9KTtcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IChkb21jKSA9PiB7XHJcbiAgICBjb25zdCBkZWZhdWx0VHlwZSA9IGRvbWMuZ2V0VHlwZSgnZGVmYXVsdCcpO1xyXG4gICAgY29uc3QgZGVmYXVsdE1vZGVsID0gZGVmYXVsdFR5cGUubW9kZWw7XHJcbiAgICBjb25zdCBkZWZhdWx0VmlldyA9IGRlZmF1bHRUeXBlLnZpZXc7XHJcbiAgICBkb21jLmFkZFR5cGUoJ2NvbnRhaW5lcicsIHtcclxuICAgICAgICBpc0NvbXBvbmVudDogKGVsKSA9PiB7XHJcbiAgICAgICAgICAgIGlmKGVsICYmIGVsLmNsYXNzTGlzdCAmJiAoZWwuY2xhc3NMaXN0LmNvbnRhaW5zKCdjb250YWluZXInKSB8fCBlbC5jbGFzc0xpc3QuY29udGFpbnMoJ2NvbnRhaW5lci1mbHVpZCcpKSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHt0eXBlOiAnY29udGFpbmVyJ307XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG4gICAgICAgIGV4dGVuZDogJ2RlZmF1bHQnLFxyXG4gICAgICAgIG1vZGVsOiB7XHJcbiAgICAgICAgICAgIGRlZmF1bHRzOiBPYmplY3QuYXNzaWduKHt9LCBkZWZhdWx0TW9kZWwucHJvdG90eXBlLmRlZmF1bHRzLCB7XHJcbiAgICAgICAgICAgICAgICAnY3VzdG9tLW5hbWUnOiAnQ29udGFpbmVyJyxcclxuICAgICAgICAgICAgICAgIHRhZ05hbWU6ICdkaXYnLFxyXG4gICAgICAgICAgICAgICAgZHJvcHBhYmxlOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgdHJhaXRzOiBbXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnY2xhc3Nfc2VsZWN0JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9uczogW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge3ZhbHVlOiAnY29udGFpbmVyJywgbmFtZTogJ0ZpeGVkJ30sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7dmFsdWU6ICdjb250YWluZXItZmx1aWQnLCBuYW1lOiAnRmx1aWQnfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsYWJlbDogJ1dpZHRoJ1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIF0uY29uY2F0KGRlZmF1bHRNb2RlbC5wcm90b3R5cGUuZGVmYXVsdHMudHJhaXRzKVxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZXh0ZW5kVmlldzogJ2RlZmF1bHQnXHJcbiAgICB9KTtcclxuICAgIFxyXG59XHJcbiIsImltcG9ydCBjb250ZXh0cyBmcm9tICcuLi9ib290c3RyYXAtY29udGV4dHMnO1xyXG5pbXBvcnQge2NhcGl0YWxpemV9IGZyb20gXCIuLi91dGlsc1wiO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgKGRvbWMpID0+IHtcclxuICAgIGNvbnN0IGNvbnRleHRzX3dfd2hpdGUgPSBjb250ZXh0cy5jb25jYXQoWyd3aGl0ZSddKTtcclxuICAgIGNvbnN0IGRlZmF1bHRUeXBlID0gZG9tYy5nZXRUeXBlKCdkZWZhdWx0Jyk7XHJcbiAgICBjb25zdCBkZWZhdWx0TW9kZWwgPSBkZWZhdWx0VHlwZS5tb2RlbDtcclxuICAgIGNvbnN0IGRlZmF1bHRWaWV3ID0gZGVmYXVsdFR5cGUudmlldztcclxuXHJcbiAgICBkb21jLmFkZFR5cGUoJ2RlZmF1bHQnLCB7XHJcbiAgICAgICAgZXh0ZW5kOiAnZGVmYXVsdCcsXHJcbiAgICAgICAgbW9kZWw6IHtcclxuICAgICAgICAgICAgZGVmYXVsdHM6IE9iamVjdC5hc3NpZ24oe30sIGRlZmF1bHRNb2RlbC5wcm90b3R5cGUuZGVmYXVsdHMsIHtcclxuICAgICAgICAgICAgICAgIHRhZ05hbWU6ICdkaXYnLFxyXG4gICAgICAgICAgICAgICAgdHJhaXRzOiBbXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnY2xhc3Nfc2VsZWN0JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9uczogW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge3ZhbHVlOiAnJywgbmFtZTogJ0RlZmF1bHQnfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC4uLiBjb250ZXh0c193X3doaXRlLm1hcChmdW5jdGlvbih2KSB7IHJldHVybiB7dmFsdWU6ICd0ZXh0LScrdiwgbmFtZTogY2FwaXRhbGl6ZSh2KX0gfSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWw6ICdUZXh0IGNvbG9yJ1xyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnY2xhc3Nfc2VsZWN0JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9uczogW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge3ZhbHVlOiAnJywgbmFtZTogJ0RlZmF1bHQnfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC4uLiBjb250ZXh0c193X3doaXRlLm1hcChmdW5jdGlvbih2KSB7IHJldHVybiB7dmFsdWU6ICdiZy0nK3YsIG5hbWU6IGNhcGl0YWxpemUodil9IH0pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsOiAnQmFja2dyb3VuZCBjb2xvcidcclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2NsYXNzX3NlbGVjdCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbnM6IFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt2YWx1ZTogJycsIG5hbWU6ICdEZWZhdWx0J30sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7dmFsdWU6ICdib3JkZXInLCBuYW1lOiAnRnVsbCd9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge3ZhbHVlOiAnYm9yZGVyLXRvcC0wJywgbmFtZTogJ05vIHRvcCd9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge3ZhbHVlOiAnYm9yZGVyLXJpZ2h0LTAnLCBuYW1lOiAnTm8gcmlnaHQnfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt2YWx1ZTogJ2JvcmRlci1ib3R0b20tMCcsIG5hbWU6ICdObyBib3R0b20nfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt2YWx1ZTogJ2JvcmRlci1sZWZ0LTAnLCBuYW1lOiAnTm8gbGVmdCd9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge3ZhbHVlOiAnYm9yZGVyLTAnLCBuYW1lOiAnTm9uZSd9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsOiAnQm9yZGVyIHdpZHRoJ1xyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnY2xhc3Nfc2VsZWN0JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9uczogW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge3ZhbHVlOiAnJywgbmFtZTogJ0RlZmF1bHQnfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC4uLiBjb250ZXh0c193X3doaXRlLm1hcChmdW5jdGlvbih2KSB7IHJldHVybiB7dmFsdWU6ICdib3JkZXIgYm9yZGVyLScrdiwgbmFtZTogY2FwaXRhbGl6ZSh2KX0gfSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWw6ICdCb3JkZXIgY29sb3InXHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdjbGFzc19zZWxlY3QnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25zOiBbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7dmFsdWU6ICcnLCBuYW1lOiAnRGVmYXVsdCd9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge3ZhbHVlOiAncm91bmRlZCcsIG5hbWU6ICdSb3VuZGVkJ30sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7dmFsdWU6ICdyb3VuZGVkLXRvcCcsIG5hbWU6ICdSb3VuZGVkIHRvcCd9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge3ZhbHVlOiAncm91bmRlZC1yaWdodCcsIG5hbWU6ICdSb3VuZGVkIHJpZ2h0J30sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7dmFsdWU6ICdyb3VuZGVkLWJvdHRvbScsIG5hbWU6ICdSb3VuZGVkIGJvdHRvbSd9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge3ZhbHVlOiAncm91bmRlZC1sZWZ0JywgbmFtZTogJ1JvdW5kZWQgbGVmdCd9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge3ZhbHVlOiAncm91bmRlZC1jaXJjbGUnLCBuYW1lOiAnQ2lyY2xlJ30sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7dmFsdWU6ICdyb3VuZGVkLTAnLCBuYW1lOiAnU3F1YXJlJ30sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsOiAnQm9yZGVyIHJhZGl1cydcclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ3RleHQnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsYWJlbDogJ0lEJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogJ2lkJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI6ICdteV9lbGVtZW50J1xyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAndGV4dCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsOiAnVGl0bGUnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAndGl0bGUnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcjogJ015IEVsZW1lbnQnXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgXSAvLy5jb25jYXQoZGVmYXVsdE1vZGVsLnByb3RvdHlwZS5kZWZhdWx0cy50cmFpdHMpXHJcbiAgICAgICAgICAgIH0pLFxyXG4gICAgICAgICAgICBpbml0KCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgY2xhc3NlcyA9IHRoaXMuZ2V0KCdjbGFzc2VzJyk7XHJcbiAgICAgICAgICAgICAgICBjbGFzc2VzLmJpbmQoJ2FkZCcsIHRoaXMuY2xhc3Nlc0NoYW5nZWQuYmluZCh0aGlzKSk7XHJcbiAgICAgICAgICAgICAgICBjbGFzc2VzLmJpbmQoJ2NoYW5nZScsIHRoaXMuY2xhc3Nlc0NoYW5nZWQuYmluZCh0aGlzKSk7XHJcbiAgICAgICAgICAgICAgICBjbGFzc2VzLmJpbmQoJ3JlbW92ZScsIHRoaXMuY2xhc3Nlc0NoYW5nZWQuYmluZCh0aGlzKSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmluaXQyKCk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIC8qIEJTIGNvbXBzIHVzZSBpbml0Miwgbm90IGluaXQgKi9cclxuICAgICAgICAgICAgaW5pdDIoKSB7fSxcclxuICAgICAgICAgICAgLyogbWV0aG9kIHdoZXJlIHdlIGNhbiBjaGVjayBpZiB3ZSBzaG91bGQgY2hhbmdlVHlwZSAqL1xyXG4gICAgICAgICAgICBjbGFzc2VzQ2hhbmdlZCgpIHt9LFxyXG4gICAgICAgICAgICAvKiByZXBsYWNlIHRoZSBjb21wIHdpdGggYSBjb3B5IG9mIGEgZGlmZmVyZW50IHR5cGUgKi9cclxuICAgICAgICAgICAgY2hhbmdlVHlwZShuZXdfdHlwZSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgY29sbCA9IHRoaXMuY29sbGVjdGlvbjtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGF0ID0gY29sbC5pbmRleE9mKHRoaXMpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgYnV0dG9uX29wdHMgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogbmV3X3R5cGUsXHJcbiAgICAgICAgICAgICAgICAgICAgc3R5bGU6IHRoaXMuZ2V0U3R5bGUoKSxcclxuICAgICAgICAgICAgICAgICAgICBhdHRyaWJ1dGVzOiB0aGlzLmdldEF0dHJpYnV0ZXMoKSxcclxuICAgICAgICAgICAgICAgICAgICBjb250ZW50OiB0aGlzLnZpZXcuZWwuaW5uZXJIVE1MXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjb2xsLnJlbW92ZSh0aGlzKTtcclxuICAgICAgICAgICAgICAgIGNvbGwuYWRkKGJ1dHRvbl9vcHRzLCB7IGF0IH0pO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5kZXN0cm95KCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG4gICAgICAgIGV4dGVuZFZpZXc6ICdkZWZhdWx0JyxcclxuICAgIH0pO1xyXG59XHJcbiIsIi8qXHJcbmtub3duIGlzc3VlczpcclxuLSBCUyBkcm9wZG93biBKUyBpc24ndCBhdHRhY2hlZCBpZiB5b3UgcmVtb3ZlIHRoZSBleGlzdGluZyB0b2dnbGUgYW5kIGFkZCBhIG5ldyBvbmVcclxuKi9cclxuXHJcbmltcG9ydCBjYXJldEljb24gZnJvbSBcInJhdy1sb2FkZXIhLi4vaWNvbnMvY2FyZXQtc3F1YXJlLWRvd24tcmVndWxhci5zdmdcIjtcclxuXHJcbmV4cG9ydCBjb25zdCBEcm9wRG93bkJsb2NrID0gKGJtLCBsYWJlbCkgPT4ge1xyXG4gICAgYm0uYWRkKCdkcm9wZG93bicsIHtcclxuICAgICAgICBsYWJlbDogYFxyXG4gICAgICAgICAgICAke2NhcmV0SWNvbn1cclxuICAgICAgICAgICAgPGRpdj4ke2xhYmVsfTwvZGl2PlxyXG4gICAgICAgIGAsXHJcbiAgICAgICAgY2F0ZWdvcnk6ICdDb21wb25lbnRzJyxcclxuICAgICAgICBjb250ZW50OiB7XHJcbiAgICAgICAgICAgIHR5cGU6ICdkcm9wZG93bidcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuICAgIC8qYm0uYWRkKCdkcm9wZG93bl9tZW51Jywge1xyXG4gICAgICBsYWJlbDogYy5sYWJlbHMuZHJvcGRvd25fbWVudSxcclxuICAgICAgY2F0ZWdvcnk6ICdDb21wb25lbnRzJyxcclxuICAgICAgYXR0cmlidXRlczoge2NsYXNzOidmYSBmYS1jYXJldC1kb3duJ30sXHJcbiAgICAgIGNvbnRlbnQ6IHtcclxuICAgICAgICB0eXBlOiAnZHJvcGRvd25fbWVudSdcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgICBibS5hZGQoJ2Ryb3Bkb3duX2l0ZW0nLCB7XHJcbiAgICAgIGxhYmVsOiBjLmxhYmVscy5kcm9wZG93bl9pdGVtLFxyXG4gICAgICBjYXRlZ29yeTogJ0NvbXBvbmVudHMnLFxyXG4gICAgICBhdHRyaWJ1dGVzOiB7Y2xhc3M6J2ZhIGZhLWxpbmsnfSxcclxuICAgICAgY29udGVudDoge1xyXG4gICAgICAgIHR5cGU6ICdkcm9wZG93bl9pdGVtJ1xyXG4gICAgICB9XHJcbiAgICB9KTsqL1xyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgKGVkaXRvcikgPT4ge1xyXG4gICAgY29uc3QgY29tcHMgPSBlZGl0b3IuRG9tQ29tcG9uZW50cztcclxuICAgIGNvbnN0IGRlZmF1bHRUeXBlID0gY29tcHMuZ2V0VHlwZSgnZGVmYXVsdCcpO1xyXG4gICAgY29uc3QgZGVmYXVsdE1vZGVsID0gZGVmYXVsdFR5cGUubW9kZWw7XHJcbiAgICBjb25zdCBkZWZhdWx0VmlldyA9IGRlZmF1bHRUeXBlLnZpZXc7XHJcblxyXG4gICAgZnVuY3Rpb24gaGFzRXZlbnQoY29tcCkge1xyXG4gICAgICAgIGxldCBlY2EgPSBjb21wLl9ldmVudHNbJ2NoYW5nZTphdHRyaWJ1dGVzJ107XHJcbiAgICAgICAgaWYgKCFlY2EpIHJldHVybiBmYWxzZTtcclxuICAgICAgICByZXR1cm4gZWNhLmZpbHRlcihlID0+IGUuY2FsbGJhY2submFtZSA9PT0gJ3NldHVwVG9nZ2xlJykubGVuZ3RoICE9PSAwO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbXBzLmFkZFR5cGUoJ2Ryb3Bkb3duJywge1xyXG4gICAgICAgIGlzQ29tcG9uZW50OiBmdW5jdGlvbihlbCkge1xyXG4gICAgICAgICAgICBpZiAoZWwgJiYgZWwuY2xhc3NMaXN0ICYmIGVsLmNsYXNzTGlzdC5jb250YWlucygnZHJvcGRvd24nKSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHt0eXBlOiAnZHJvcGRvd24nfTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZXh0ZW5kOiAnZGVmYXVsdCcsXHJcbiAgICAgICAgbW9kZWw6IHtcclxuICAgICAgICAgICAgZGVmYXVsdHM6IHtcclxuICAgICAgICAgICAgICAgIC4uLmRlZmF1bHRNb2RlbC5wcm90b3R5cGUuZGVmYXVsdHMsXHJcbiAgICAgICAgICAgICAgICAnY3VzdG9tLW5hbWUnOiAnRHJvcGRvd24nLFxyXG4gICAgICAgICAgICAgICAgY2xhc3NlczogWydkcm9wZG93biddLFxyXG4gICAgICAgICAgICAgICAgZHJvcHBhYmxlOiAnYSwgYnV0dG9uLCAuZHJvcGRvd24tbWVudScsXHJcbiAgICAgICAgICAgICAgICB0cmFpdHM6IFtcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdzZWxlY3QnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsYWJlbDogJ0luaXRpYWwgc3RhdGUnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAnaW5pdGlhbF9zdGF0ZScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbnM6IFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt2YWx1ZTogJycsIG5hbWU6ICdDbG9zZWQnfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt2YWx1ZTogJ3Nob3cnLCBuYW1lOiAnT3Blbid9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgXS5jb25jYXQoZGVmYXVsdE1vZGVsLnByb3RvdHlwZS5kZWZhdWx0cy50cmFpdHMpLFxyXG4gICAgICAgICAgICB9LFxyXG5cclxuICAgICAgICAgICAgaW5pdDIoKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB0b2dnbGUgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2J1dHRvbicsXHJcbiAgICAgICAgICAgICAgICAgICAgY29udGVudDogJ0NsaWNrIHRvIHRvZ2dsZScsXHJcbiAgICAgICAgICAgICAgICAgICAgY2xhc3NlczogWydidG4nLCAnZHJvcGRvd24tdG9nZ2xlJ11cclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICBjb25zdCB0b2dnbGVfY29tcCA9IHRoaXMuYXBwZW5kKHRvZ2dsZSlbMF07XHJcbiAgICAgICAgICAgICAgICBjb25zdCBtZW51ID0ge1xyXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6ICdkcm9wZG93bl9tZW51J1xyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG1lbnVfY29tcCA9IHRoaXMuYXBwZW5kKG1lbnUpWzBdO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zZXR1cFRvZ2dsZShudWxsLCBudWxsLCB7Zm9yY2U6IHRydWV9KTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGNvbXBzID0gdGhpcy5jb21wb25lbnRzKCk7XHJcbiAgICAgICAgICAgICAgICBjb21wcy5iaW5kKCdhZGQnLCB0aGlzLnNldHVwVG9nZ2xlLmJpbmQodGhpcykpO1xyXG4gICAgICAgICAgICAgICAgY29tcHMuYmluZCgncmVtb3ZlJywgdGhpcy5zZXR1cFRvZ2dsZS5iaW5kKHRoaXMpKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGNsYXNzZXMgPSB0aGlzLmdldCgnY2xhc3NlcycpO1xyXG4gICAgICAgICAgICAgICAgY2xhc3Nlcy5iaW5kKCdhZGQnLCB0aGlzLnNldHVwVG9nZ2xlLmJpbmQodGhpcykpO1xyXG4gICAgICAgICAgICAgICAgY2xhc3Nlcy5iaW5kKCdjaGFuZ2UnLCB0aGlzLnNldHVwVG9nZ2xlLmJpbmQodGhpcykpO1xyXG4gICAgICAgICAgICAgICAgY2xhc3Nlcy5iaW5kKCdyZW1vdmUnLCB0aGlzLnNldHVwVG9nZ2xlLmJpbmQodGhpcykpO1xyXG4gICAgICAgICAgICB9LFxyXG5cclxuICAgICAgICAgICAgc2V0dXBUb2dnbGUoYSwgYiwgb3B0aW9ucyA9IHt9KSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB0b2dnbGUgPSB0aGlzLmNvbXBvbmVudHMoKS5maWx0ZXIoYyA9PiBjLmdldEF0dHJpYnV0ZXMoKS5jbGFzcy5zcGxpdCgnICcpLmluY2x1ZGVzKCdkcm9wZG93bi10b2dnbGUnKSlbMF07XHJcbiAgICAgICAgICAgICAgICBjb25zdCBtZW51ID0gdGhpcy5jb21wb25lbnRzKCkuZmlsdGVyKGMgPT4gYy5nZXRBdHRyaWJ1dGVzKCkuY2xhc3Muc3BsaXQoJyAnKS5pbmNsdWRlcygnZHJvcGRvd24tbWVudScpKVswXTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAob3B0aW9ucy5mb3JjZSAhPT0gdHJ1ZSAmJiBvcHRpb25zLmlnbm9yZSA9PT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAodG9nZ2xlICYmIG1lbnUpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gc2V0dXAgZXZlbnQgbGlzdGVuZXJzIGlmIHRoZXkgYXJlbid0IHNldFxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghaGFzRXZlbnQodG9nZ2xlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmxpc3RlblRvKHRvZ2dsZSwgJ2NoYW5nZTphdHRyaWJ1dGVzJywgdGhpcy5zZXR1cFRvZ2dsZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghaGFzRXZlbnQobWVudSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5saXN0ZW5UbyhtZW51LCAnY2hhbmdlOmF0dHJpYnV0ZXMnLCB0aGlzLnNldHVwVG9nZ2xlKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vIHNldHVwIHRvZ2dsZVxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHRvZ2dsZV9hdHRycyA9IHRvZ2dsZS5nZXRBdHRyaWJ1dGVzKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdG9nZ2xlX2F0dHJzWydyb2xlJ10gPSAnYnV0dG9uJztcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBtZW51X2F0dHJzID0gbWVudS5nZXRBdHRyaWJ1dGVzKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCF0b2dnbGVfYXR0cnMuaGFzT3duUHJvcGVydHkoJ2RhdGEtdG9nZ2xlJykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG9nZ2xlX2F0dHJzWydkYXRhLXRvZ2dsZSddID0gJ2Ryb3Bkb3duJztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCF0b2dnbGVfYXR0cnMuaGFzT3duUHJvcGVydHkoJ2FyaWEtaGFzcG9wdXAnKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0b2dnbGVfYXR0cnNbJ2FyaWEtaGFzcG9wdXAnXSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICB0b2dnbGUuc2V0KCdhdHRyaWJ1dGVzJywgdG9nZ2xlX2F0dHJzLCB7aWdub3JlOiB0cnVlfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vIHNldHVwIG1lbnVcclxuICAgICAgICAgICAgICAgICAgICAvLyB0b2dnbGUgbmVlZHMgSUQgZm9yIGFyaWEtbGFiZWxsZWQgb24gdGhlIG1lbnUsIGNvdWxkIGFsZXJ0IGhlcmVcclxuICAgICAgICAgICAgICAgICAgICBpZiAodG9nZ2xlX2F0dHJzLmhhc093blByb3BlcnR5KCdpZCcpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lbnVfYXR0cnNbJ2FyaWEtbGFiZWxsZWRieSddID0gdG9nZ2xlX2F0dHJzLmlkO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBtZW51X2F0dHJzWydhcmlhLWxhYmVsbGVkYnknXTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgbWVudS5zZXQoJ2F0dHJpYnV0ZXMnLCBtZW51X2F0dHJzLCB7aWdub3JlOiB0cnVlfSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sXHJcblxyXG4gICAgICAgICAgICB1cGRhdGVkKHByb3BlcnR5LCB2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgaWYodmFsdWUuaGFzT3duUHJvcGVydHkoJ2luaXRpYWxfc3RhdGUnKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG1lbnUgPSB0aGlzLmNvbXBvbmVudHMoKS5maWx0ZXIoYyA9PiBjLmdldEF0dHJpYnV0ZXMoKS5jbGFzcy5zcGxpdCgnICcpLmluY2x1ZGVzKCdkcm9wZG93bi1tZW51JykpWzBdO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGF0dHJzID0gbWVudS5nZXRBdHRyaWJ1dGVzKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY2xhc3NlcyA9IGF0dHJzLmNsYXNzLnNwbGl0KCcgJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmKGNsYXNzZXMuaW5jbHVkZXMoJ3Nob3cnKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBDbG9zZSB0aGUgbWVudVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBhdHRyc1snYXJpYS1leHBhbmRlZCddID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lbnUucmVtb3ZlQ2xhc3MoJ3Nob3cnKTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBPcGVuIHRoZSBtZW51XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzWydhcmlhLWV4cGFuZGVkJ10gPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtZW51LmFkZENsYXNzKCdzaG93Jyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LFxyXG5cclxuICAgICAgICB9LFxyXG4gICAgICAgIGV4dGVuZFZpZXc6ICdkZWZhdWx0JyxcclxuICAgIH0pO1xyXG5cclxuICAgIC8vIG5lZWQgYXJpYS1sYWJlbGxlZGJ5IHRvIGVxdWFsIGRyb3Bkb3duLXRvZ2dsZSBpZFxyXG4gICAgLy8gbmVlZCB0byBpbnNlcnQgZHJvcGRvd24taXRlbSBjbGFzcyBvbiBsaW5rcyB3aGVuIGFkZGVkXHJcbiAgICBjb21wcy5hZGRUeXBlKCdkcm9wZG93bl9tZW51Jywge1xyXG4gICAgICAgIGlzQ29tcG9uZW50OiBmdW5jdGlvbihlbCkge1xyXG4gICAgICAgICAgICBpZiAoZWwgJiYgZWwuY2xhc3NMaXN0ICYmIGVsLmNsYXNzTGlzdC5jb250YWlucygnZHJvcGRvd24tbWVudScpKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4ge3R5cGU6ICdkcm9wZG93bl9tZW51J307XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG4gICAgICAgIGV4dGVuZDogJ2RlZmF1bHQnLFxyXG4gICAgICAgIG1vZGVsOiB7XHJcbiAgICAgICAgICAgIGRlZmF1bHRzOiBPYmplY3QuYXNzaWduKHt9LCBkZWZhdWx0TW9kZWwucHJvdG90eXBlLmRlZmF1bHRzLCB7XHJcbiAgICAgICAgICAgICAgICAnY3VzdG9tLW5hbWUnOiAnRHJvcGRvd24gTWVudScsXHJcbiAgICAgICAgICAgICAgICBjbGFzc2VzOiBbJ2Ryb3Bkb3duLW1lbnUnXSxcclxuICAgICAgICAgICAgICAgIGRyYWdnYWJsZTogJy5kcm9wZG93bicsXHJcbiAgICAgICAgICAgICAgICBkcm9wcGFibGU6IHRydWVcclxuICAgICAgICAgICAgfSksXHJcbiAgICAgICAgICAgIGluaXQyKCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaGVhZGVyID0ge1xyXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6ICdoZWFkZXInLFxyXG4gICAgICAgICAgICAgICAgICAgIHRhZ05hbWU6ICdoNicsXHJcbiAgICAgICAgICAgICAgICAgICAgY2xhc3NlczogWydkcm9wZG93bi1oZWFkZXInXSxcclxuICAgICAgICAgICAgICAgICAgICBjb250ZW50OiAnRHJvcGRvd24gaGVhZGVyJ1xyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGxpbmsgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2xpbmsnLFxyXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzZXM6IFsnZHJvcGRvd24taXRlbSddLFxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6ICdEcm9wZG93biBpdGVtJ1xyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGRpdmlkZXIgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2RlZmF1bHQnLFxyXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzZXM6IFsnZHJvcGRvd24tZGl2aWRlciddXHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgdGhpcy5hcHBlbmQoaGVhZGVyKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuYXBwZW5kKGxpbmspO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5hcHBlbmQoZGl2aWRlcik7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmFwcGVuZChsaW5rKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgdmlldzogZGVmYXVsdFZpZXcsXHJcbiAgICB9KTtcclxuXHJcbn1cclxuIiwiaW1wb3J0IHtlbEhhc0NsYXNzfSBmcm9tIFwiLi4vdXRpbHNcIjtcclxuaW1wb3J0IGZpbGVJbnB1dEljb24gZnJvbSBcInJhdy1sb2FkZXIhLi4vaWNvbnMvZmlsZS1pbnB1dC5zdmdcIjtcclxuXHJcbmV4cG9ydCBjb25zdCBGaWxlSW5wdXRCbG9jayA9IChibSwgbGFiZWwpID0+IHtcclxuICAgIGJtLmFkZCgnZmlsZS1pbnB1dCcsIHtcclxuICAgICAgICBsYWJlbDogYFxyXG4gICAgICAgICAgICAke2ZpbGVJbnB1dEljb259XHJcbiAgICAgICAgICAgIDxkaXY+JHtsYWJlbH08L2Rpdj5cclxuICAgICAgICBgLFxyXG4gICAgICAgIGNhdGVnb3J5OiAnRm9ybXMnLFxyXG4gICAgICAgIGNvbnRlbnQ6IGA8aW5wdXQgdHlwZT1cImZpbGVcIiBuYW1lPVwiZmlsZVwiIGNsYXNzPVwiZm9ybS1jb250cm9sLWZpbGVcIiBpZD1cImV4YW1wbGVGb3JtQ29udHJvbEZpbGUxXCI+YFxyXG4gICAgfSk7XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCAoZGMsIHRyYWl0cywgY29uZmlnID0ge30pID0+IHtcclxuICAgIGNvbnN0IGRlZmF1bHRUeXBlID0gZGMuZ2V0VHlwZSgnZGVmYXVsdCcpO1xyXG4gICAgY29uc3QgZGVmYXVsdE1vZGVsID0gZGVmYXVsdFR5cGUubW9kZWw7XHJcbiAgICBjb25zdCBkZWZhdWx0VmlldyA9IGRlZmF1bHRUeXBlLnZpZXc7XHJcbiAgICBjb25zdCB0eXBlID0gJ2ZpbGUtaW5wdXQnO1xyXG5cclxuICAgIGRjLmFkZFR5cGUodHlwZSwge1xyXG4gICAgICAgIGlzQ29tcG9uZW50OiBmdW5jdGlvbihlbCkge1xyXG4gICAgICAgICAgICBpZihlbC50YWdOYW1lID09PSAnSU5QVVQnICYmIGVsSGFzQ2xhc3MoZWwsICdmb3JtLWNvbnRyb2wtZmlsZScpKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4ge3R5cGV9O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuICAgICAgICBleHRlbmQ6ICdkZWZhdWx0JyxcclxuICAgICAgICBtb2RlbDoge1xyXG4gICAgICAgICAgICBkZWZhdWx0czoge1xyXG4gICAgICAgICAgICAgICAgLi4uZGVmYXVsdE1vZGVsLnByb3RvdHlwZS5kZWZhdWx0cyxcclxuICAgICAgICAgICAgICAgICdjdXN0b20tbmFtZSc6IGNvbmZpZy5sYWJlbHMuaW5wdXQsXHJcbiAgICAgICAgICAgICAgICB0YWdOYW1lOiAnaW5wdXQnLFxyXG4gICAgICAgICAgICAgICAgZHJhZ2dhYmxlOiAnZm9ybSAuZm9ybS1ncm91cCcsXHJcbiAgICAgICAgICAgICAgICBkcm9wcGFibGU6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgdHJhaXRzOiBbXHJcbiAgICAgICAgICAgICAgICAgICAgdHJhaXRzLm5hbWUsXHJcbiAgICAgICAgICAgICAgICAgICAgdHJhaXRzLnJlcXVpcmVkLFxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2NoZWNrYm94JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWw6IGNvbmZpZy5sYWJlbHMudHJhaXRfbXVsdGlwbGUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICdtdWx0aXBsZScsXHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgfSxcclxuICAgICAgICBleHRlbmRWaWV3OiAnZGVmYXVsdCcsXHJcbiAgICB9KTtcclxufVxyXG4iLCJpbXBvcnQgZm9ybUljb24gZnJvbSBcInJhdy1sb2FkZXIhLi4vaWNvbnMvZm9ybS5zdmdcIjtcclxuXHJcbmV4cG9ydCBjb25zdCBGb3JtQmxvY2sgPSAoYm0sIGxhYmVsKSA9PiB7XHJcbiAgICBibS5hZGQoJ2Zvcm0nLCB7XHJcbiAgICAgICAgbGFiZWw6IGBcclxuICAgICAgJHtmb3JtSWNvbn1cclxuICAgICAgPGRpdj4ke2xhYmVsfTwvZGl2PmAsXHJcbiAgICAgICAgY2F0ZWdvcnk6ICdGb3JtcycsXHJcbiAgICAgICAgY29udGVudDoge3R5cGU6ICdmb3JtJ30sXHJcbiAgICAvLyAgICAgYFxyXG4gICAgLy8gICAgIDxmb3JtPlxyXG4gICAgLy8gICAgICAgPGRpdiBjbGFzcz1cImZvcm0tZ3JvdXBcIj5cclxuICAgIC8vICAgICAgICAgPGxhYmVsPk5hbWU8L2xhYmVsPlxyXG4gICAgLy8gICAgICAgICA8aW5wdXQgbmFtZT1cIm5hbWVcIiBwbGFjZWhvbGRlcj1cIlR5cGUgaGVyZSB5b3VyIG5hbWVcIiBjbGFzcz1cImZvcm0tY29udHJvbFwiLz5cclxuICAgIC8vICAgICAgIDwvZGl2PlxyXG4gICAgLy8gICAgICAgPGRpdiBjbGFzcz1cImZvcm0tZ3JvdXBcIj5cclxuICAgIC8vICAgICAgICAgPGxhYmVsPkVtYWlsPC9sYWJlbD5cclxuICAgIC8vICAgICAgICAgPGlucHV0IG5hbWU9XCJlbWFpbFwiIHR5cGU9XCJlbWFpbFwiIHBsYWNlaG9sZGVyPVwiVHlwZSBoZXJlIHlvdXIgZW1haWxcIiBjbGFzcz1cImZvcm0tY29udHJvbFwiLz5cclxuICAgIC8vICAgICAgIDwvZGl2PlxyXG4gICAgLy8gICAgICAgPGRpdiBjbGFzcz1cImZvcm0tY2hlY2tcIj5cclxuICAgIC8vICAgICAgICAgPGlucHV0IG5hbWU9XCJzZXhcIiB0eXBlPVwiY2hlY2tib3hcIiBjbGFzcz1cImZvcm0tY2hlY2staW5wdXRcIiB2YWx1ZT1cIk1cIj5cclxuICAgIC8vICAgICAgICAgPGxhYmVsIGNsYXNzPVwiZm9ybS1jaGVjay1sYWJlbFwiPk08L2xhYmVsPlxyXG4gICAgLy8gICAgICAgPC9kaXY+XHJcbiAgICAvLyAgICAgICA8ZGl2IGNsYXNzPVwiZm9ybS1jaGVja1wiPlxyXG4gICAgLy8gICAgICAgICA8aW5wdXQgbmFtZT1cInNleFwiIHR5cGU9XCJjaGVja2JveFwiIGNsYXNzPVwiZm9ybS1jaGVjay1pbnB1dFwiIHZhbHVlPVwiRlwiPlxyXG4gICAgLy8gICAgICAgICA8bGFiZWwgY2xhc3M9XCJmb3JtLWNoZWNrLWxhYmVsXCI+RjwvbGFiZWw+XHJcbiAgICAvLyAgICAgICA8L2Rpdj5cclxuICAgIC8vICAgICAgIDxkaXYgY2xhc3M9XCJmb3JtLWdyb3VwXCI+XHJcbiAgICAvLyAgICAgICAgIDxsYWJlbD5NZXNzYWdlPC9sYWJlbD5cclxuICAgIC8vICAgICAgICAgPHRleHRhcmVhIG5hbWU9XCJtZXNzYWdlXCIgY2xhc3M9XCJmb3JtLWNvbnRyb2xcIj48L3RleHRhcmVhPlxyXG4gICAgLy8gICAgICAgPC9kaXY+XHJcbiAgICAvLyAgICAgICA8ZGl2IGNsYXNzPVwiZm9ybS1ncm91cFwiPlxyXG4gICAgLy8gICAgICAgICA8YnV0dG9uIHR5cGU9XCJzdWJtaXRcIiBjbGFzcz1cImJ0biBidG4tcHJpbWFyeVwiPlNlbmQ8L2J1dHRvbj5cclxuICAgIC8vICAgICAgIDwvZGl2PlxyXG4gICAgLy8gICAgIDwvZm9ybT5cclxuICAgIC8vICAgYCxcclxuICAgIH0pO1xyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgKGRjLCB0cmFpdHMsIGNvbmZpZyA9IHt9KSA9PiB7XHJcbiAgICBjb25zdCBkZWZhdWx0VHlwZSA9IGRjLmdldFR5cGUoJ2RlZmF1bHQnKTtcclxuICAgIGNvbnN0IGRlZmF1bHRNb2RlbCA9IGRlZmF1bHRUeXBlLm1vZGVsO1xyXG4gICAgY29uc3QgZGVmYXVsdFZpZXcgPSBkZWZhdWx0VHlwZS52aWV3O1xyXG4gICAgbGV0IGFjdGlvblRyYWl0O1xyXG5cclxuICAgIC8vIElmIHRoZSBmb3JtUHJlZGVmaW5lZEFjdGlvbnMgaXMgc2V0IGluIHRoZSBjb25maWcgeW91IGNhbiBhZGQgYSBkcm9wZG93biBtZW51IHRvIHRoZSBhY3Rpb25zIHRyYWl0XHJcbiAgICBpZihjb25maWcuZm9ybVByZWRlZmluZWRBY3Rpb25zICYmIGNvbmZpZy5mb3JtUHJlZGVmaW5lZEFjdGlvbnMubGVuZ3RoKSB7XHJcbiAgICAgICAgYWN0aW9uVHJhaXQgPSB7XHJcbiAgICAgICAgICAgIHR5cGU6ICdzZWxlY3QnLFxyXG4gICAgICAgICAgICBsYWJlbDogY29uZmlnLmxhYmVscy50cmFpdF9hY3Rpb24sXHJcbiAgICAgICAgICAgIG5hbWU6ICdhY3Rpb24nLFxyXG4gICAgICAgICAgICBvcHRpb25zOiBbXSxcclxuICAgICAgICB9O1xyXG4gICAgICAgIGNvbmZpZy5mb3JtUHJlZGVmaW5lZEFjdGlvbnMuZm9yRWFjaCgoYWN0aW9uKSA9PiB7XHJcbiAgICAgICAgICAgIGFjdGlvblRyYWl0Lm9wdGlvbnMucHVzaCh7dmFsdWU6IGFjdGlvbi52YWx1ZSwgbmFtZTogYWN0aW9uLm5hbWV9KVxyXG4gICAgICAgIH0pO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICBhY3Rpb25UcmFpdCA9IHtcclxuICAgICAgICAgICAgbGFiZWw6IGNvbmZpZy5sYWJlbHMudHJhaXRfYWN0aW9uLFxyXG4gICAgICAgICAgICBuYW1lOiAnYWN0aW9uJyxcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZGMuYWRkVHlwZSgnZm9ybScsIHtcclxuICAgICAgICBpc0NvbXBvbmVudDogZnVuY3Rpb24oZWwpIHtcclxuICAgICAgICAgICAgaWYgKGVsLnRhZ05hbWUgPT09ICdGT1JNJykge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHt0eXBlOiAnZm9ybSd9O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuICAgICAgICBleHRlbmQ6ICdkZWZhdWx0JyxcclxuICAgICAgICBtb2RlbDoge1xyXG4gICAgICAgICAgICBkZWZhdWx0czoge1xyXG4gICAgICAgICAgICAgICAgdGFnTmFtZTogJ2Zvcm0nLFxyXG4gICAgICAgICAgICAgICAgZHJvcHBhYmxlOiAnOm5vdChmb3JtKScsXHJcbiAgICAgICAgICAgICAgICBkcmFnZ2FibGU6ICc6bm90KGZvcm0pJyxcclxuICAgICAgICAgICAgICAgIHRyYWl0czogW1xyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ3NlbGVjdCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsOiBjb25maWcubGFiZWxzLnRyYWl0X2VuY3R5cGUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICdlbmN0eXBlJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9uczogW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge3ZhbHVlOiAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkJywgbmFtZTogJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCAoZGVmYXVsdCknfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt2YWx1ZTogJ211bHRpcGFydC9mb3JtLWRhdGEnLCBuYW1lOiAnbXVsdGlwYXJ0L2Zvcm0tZGF0YSd9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge3ZhbHVlOiAndGV4dC9wbGFpbicsIG5hbWU6ICd0ZXh0L3BsYWluJ30sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF1cclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ3NlbGVjdCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsOiBjb25maWcubGFiZWxzLnRyYWl0X21ldGhvZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogJ21ldGhvZCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbnM6IFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt2YWx1ZTogJ3Bvc3QnLCBuYW1lOiAnUE9TVCd9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge3ZhbHVlOiAnZ2V0JywgbmFtZTogJ0dFVCd9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBdXHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICBhY3Rpb25UcmFpdFxyXG4gICAgICAgICAgICAgICAgXSxcclxuICAgICAgICAgICAgfSxcclxuXHJcbiAgICAgICAgICAgIGluaXQoKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmxpc3RlblRvKHRoaXMsICdjaGFuZ2U6Zm9ybVN0YXRlJywgdGhpcy51cGRhdGVGb3JtU3RhdGUpO1xyXG4gICAgICAgICAgICB9LFxyXG5cclxuICAgICAgICAgICAgdXBkYXRlRm9ybVN0YXRlKCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHN0YXRlID0gdGhpcy5nZXQoJ2Zvcm1TdGF0ZScpO1xyXG4gICAgICAgICAgICAgICAgc3dpdGNoIChzdGF0ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ3N1Y2Nlc3MnOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNob3dTdGF0ZSgnc3VjY2VzcycpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlICdlcnJvcic6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2hvd1N0YXRlKCdlcnJvcicpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNob3dTdGF0ZSgnbm9ybWFsJyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sXHJcblxyXG4gICAgICAgICAgICBzaG93U3RhdGUoc3RhdGUpIHtcclxuICAgICAgICAgICAgICAgIHZhciBzdCA9IHN0YXRlIHx8ICdub3JtYWwnO1xyXG4gICAgICAgICAgICAgICAgdmFyIGZhaWxWaXMsIHN1Y2Nlc3NWaXM7XHJcbiAgICAgICAgICAgICAgICBpZiAoc3QgPT09ICdzdWNjZXNzJykge1xyXG4gICAgICAgICAgICAgICAgICAgIGZhaWxWaXMgPSAnbm9uZSc7XHJcbiAgICAgICAgICAgICAgICAgICAgc3VjY2Vzc1ZpcyA9ICdibG9jayc7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHN0ID09PSAnZXJyb3InKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZmFpbFZpcyA9ICdibG9jayc7XHJcbiAgICAgICAgICAgICAgICAgICAgc3VjY2Vzc1ZpcyA9ICdub25lJztcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZmFpbFZpcyA9ICdub25lJztcclxuICAgICAgICAgICAgICAgICAgICBzdWNjZXNzVmlzID0gJ25vbmUnO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdmFyIHN1Y2Nlc3NNb2RlbCA9IHRoaXMuZ2V0U3RhdGVNb2RlbCgnc3VjY2VzcycpO1xyXG4gICAgICAgICAgICAgICAgdmFyIGZhaWxNb2RlbCA9IHRoaXMuZ2V0U3RhdGVNb2RlbCgnZXJyb3InKTtcclxuICAgICAgICAgICAgICAgIHZhciBzdWNjZXNzU3R5bGUgPSBzdWNjZXNzTW9kZWwuZ2V0U3R5bGUoKTtcclxuICAgICAgICAgICAgICAgIHZhciBmYWlsU3R5bGUgPSBmYWlsTW9kZWwuZ2V0U3R5bGUoKTtcclxuICAgICAgICAgICAgICAgIHN1Y2Nlc3NTdHlsZS5kaXNwbGF5ID0gc3VjY2Vzc1ZpcztcclxuICAgICAgICAgICAgICAgIGZhaWxTdHlsZS5kaXNwbGF5ID0gZmFpbFZpcztcclxuICAgICAgICAgICAgICAgIHN1Y2Nlc3NNb2RlbC5zZXRTdHlsZShzdWNjZXNzU3R5bGUpO1xyXG4gICAgICAgICAgICAgICAgZmFpbE1vZGVsLnNldFN0eWxlKGZhaWxTdHlsZSk7XHJcbiAgICAgICAgICAgIH0sXHJcblxyXG4gICAgICAgICAgICBnZXRTdGF0ZU1vZGVsKHN0YXRlKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgc3QgPSBzdGF0ZSB8fCAnc3VjY2Vzcyc7XHJcbiAgICAgICAgICAgICAgICB2YXIgc3RhdGVOYW1lID0gJ2Zvcm0tc3RhdGUtJyArIHN0O1xyXG4gICAgICAgICAgICAgICAgdmFyIHN0YXRlTW9kZWw7XHJcbiAgICAgICAgICAgICAgICB2YXIgY29tcHMgPSB0aGlzLmdldCgnY29tcG9uZW50cycpO1xyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjb21wcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBtb2RlbCA9IGNvbXBzLm1vZGVsc1tpXTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAobW9kZWwuZ2V0KCdmb3JtLXN0YXRlLXR5cGUnKSA9PT0gc3QpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGVNb2RlbCA9IG1vZGVsO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoIXN0YXRlTW9kZWwpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgY29udGVudFN0ciA9IGZvcm1Nc2dTdWNjZXNzO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChzdCA9PT0gJ2Vycm9yJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50U3RyID0gZm9ybU1zZ0Vycm9yO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBzdGF0ZU1vZGVsID0gY29tcHMuYWRkKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJ2Zvcm0tc3RhdGUtdHlwZSc6IHN0LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAndGV4dCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlbW92YWJsZTogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvcHlhYmxlOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZHJhZ2dhYmxlOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXR0cmlidXRlczogeydkYXRhLWZvcm0tc3RhdGUnOiBzdH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6IGNvbnRlbnRTdHIsXHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gc3RhdGVNb2RlbDtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICB9LFxyXG4gICAgICAgIGV4dGVuZFZpZXc6ICdkZWZhdWx0JyxcclxuICAgICAgICB2aWV3OiB7XHJcbiAgICAgICAgICAgIGV2ZW50czoge1xyXG4gICAgICAgICAgICAgICAgc3VibWl0KGUpIHtcclxuICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG4gICAgfSk7XHJcbn1cclxuIiwiaW1wb3J0IGhlYWRpbmdJY29uIGZyb20gXCJyYXctbG9hZGVyIS4uL2ljb25zL2hlYWRpbmctc29saWQuc3ZnXCI7XHJcblxyXG5leHBvcnQgY29uc3QgSGVhZGVyQmxvY2sgPSAoYm0sIGxhYmVsKSA9PiB7XHJcbiAgICBibS5hZGQoJ2hlYWRlcicsIHtcclxuICAgICAgICBsYWJlbDogYFxyXG4gICAgICAgICAgICAke2hlYWRpbmdJY29ufVxyXG4gICAgICAgICAgICA8ZGl2PiR7bGFiZWx9PC9kaXY+XHJcbiAgICAgICAgYCxcclxuICAgICAgICBjYXRlZ29yeTogJ1R5cG9ncmFwaHknLFxyXG4gICAgICAgIGNvbnRlbnQ6IHtcclxuICAgICAgICAgICAgdHlwZTogJ2hlYWRlcicsXHJcbiAgICAgICAgICAgIGNvbnRlbnQ6ICdCb290c3RyYXAgaGVhZGluZydcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IChkb21jKSA9PiB7XHJcbiAgICBjb25zdCB0ZXh0VHlwZSA9IGRvbWMuZ2V0VHlwZSgndGV4dCcpO1xyXG4gICAgY29uc3QgdGV4dE1vZGVsID0gdGV4dFR5cGUubW9kZWw7XHJcbiAgICBjb25zdCB0ZXh0VmlldyA9IHRleHRUeXBlLnZpZXc7XHJcblxyXG4gICAgZG9tYy5hZGRUeXBlKCdoZWFkZXInLCB7XHJcbiAgICAgICAgaXNDb21wb25lbnQ6IGZ1bmN0aW9uKGVsKSB7XHJcbiAgICAgICAgICAgIGlmKGVsICYmIFsnSDEnLCdIMicsJ0gzJywnSDQnLCdINScsJ0g2J10uaW5jbHVkZXMoZWwudGFnTmFtZSkpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB7dHlwZTogJ2hlYWRlcid9O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuICAgICAgICBleHRlbmQ6ICd0ZXh0JyxcclxuICAgICAgICBtb2RlbDoge1xyXG4gICAgICAgICAgICBkZWZhdWx0czogT2JqZWN0LmFzc2lnbih7fSwgdGV4dE1vZGVsLnByb3RvdHlwZS5kZWZhdWx0cywge1xyXG4gICAgICAgICAgICAgICAgJ2N1c3RvbS1uYW1lJzogJ0hlYWRlcicsXHJcbiAgICAgICAgICAgICAgICB0YWdOYW1lOiAnaDEnLFxyXG4gICAgICAgICAgICAgICAgdHJhaXRzOiBbXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnc2VsZWN0JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9uczogW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge3ZhbHVlOiAnaDEnLCBuYW1lOiAnT25lIChsYXJnZXN0KSd9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge3ZhbHVlOiAnaDInLCBuYW1lOiAnVHdvJ30sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7dmFsdWU6ICdoMycsIG5hbWU6ICdUaHJlZSd9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge3ZhbHVlOiAnaDQnLCBuYW1lOiAnRm91cid9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge3ZhbHVlOiAnaDUnLCBuYW1lOiAnRml2ZSd9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge3ZhbHVlOiAnaDYnLCBuYW1lOiAnU2l4IChzbWFsbGVzdCknfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWw6ICdTaXplJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogJ3RhZ05hbWUnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjaGFuZ2VQcm9wOiAxXHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdjbGFzc19zZWxlY3QnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25zOiBbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7dmFsdWU6ICcnLCBuYW1lOiAnTm9uZSd9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge3ZhbHVlOiAnZGlzcGxheS0xJywgbmFtZTogJ09uZSAobGFyZ2VzdCknfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt2YWx1ZTogJ2Rpc3BsYXktMicsIG5hbWU6ICdUd28gJ30sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7dmFsdWU6ICdkaXNwbGF5LTMnLCBuYW1lOiAnVGhyZWUgJ30sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7dmFsdWU6ICdkaXNwbGF5LTQnLCBuYW1lOiAnRm91ciAoc21hbGxlc3QpJ31cclxuICAgICAgICAgICAgICAgICAgICAgICAgXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWw6ICdEaXNwbGF5IEhlYWRpbmcnXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgXS5jb25jYXQodGV4dE1vZGVsLnByb3RvdHlwZS5kZWZhdWx0cy50cmFpdHMpXHJcbiAgICAgICAgICAgIH0pLFxyXG5cclxuICAgICAgICB9LFxyXG4gICAgICAgIGV4dGVuZFZpZXc6ICd0ZXh0JyxcclxuICAgIH0pO1xyXG59XHJcbiIsImltcG9ydCBpbWFnZUljb24gZnJvbSBcInJhdy1sb2FkZXIhLi4vaWNvbnMvaW1hZ2Utc29saWQuc3ZnXCI7XHJcblxyXG5leHBvcnQgY29uc3QgSW1hZ2VCbG9jayA9IChibSwgbGFiZWwpID0+IHtcclxuICAgIGJtLmFkZCgnYnMtaW1hZ2UnLCB7XHJcbiAgICAgICAgbGFiZWw6IGBcclxuICAgICAgICAgICAgJHtpbWFnZUljb259XHJcbiAgICAgICAgICAgIDxkaXY+JHtsYWJlbH08L2Rpdj5cclxuICAgICAgICBgLFxyXG4gICAgICAgIGNhdGVnb3J5OiAnTWVkaWEnLFxyXG4gICAgICAgIGNvbnRlbnQ6IHtcclxuICAgICAgICAgICAgdHlwZTogJ2JzLWltYWdlJ1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgKGRvbUNvbXBvbmVudCkgPT4ge1xyXG4gICAgY29uc3QgaW1nX3NyY19kZWZhdWx0ID0gJ2h0dHBzOi8vZHVtbXlpbWFnZS5jb20vODAweDUwMC85OTkvMjIyJztcclxuICAgIGNvbnN0IGltYWdlVHlwZSA9IGRvbUNvbXBvbmVudC5nZXRUeXBlKCdpbWFnZScpO1xyXG4gICAgY29uc3QgbW9kZWwgPSBpbWFnZVR5cGUubW9kZWw7XHJcbiAgICBjb25zdCB2aWV3ID0gaW1hZ2VUeXBlLnZpZXc7XHJcbiAgICBjb25zdCB0eXBlID0gJ2JzLWltYWdlJztcclxuXHJcbiAgICBkb21Db21wb25lbnQuYWRkVHlwZSh0eXBlLCB7XHJcbiAgICAgICAgaXNDb21wb25lbnQ6IGZ1bmN0aW9uKGVsKSB7XHJcbiAgICAgICAgICAgIGlmKGVsICYmIGVsLnRhZ05hbWUgPT09ICdJTUcnKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4ge3R5cGU6IHR5cGV9O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuICAgICAgICBleHRlbmQ6ICdpbWFnZScsXHJcbiAgICAgICAgbW9kZWw6IHtcclxuICAgICAgICAgICAgZGVmYXVsdHM6IE9iamVjdC5hc3NpZ24oe30sIG1vZGVsLnByb3RvdHlwZS5kZWZhdWx0cywge1xyXG4gICAgICAgICAgICAgICAgJ2N1c3RvbS1uYW1lJzogJ0ltYWdlJyxcclxuICAgICAgICAgICAgICAgIHRhZ05hbWU6ICdpbWcnLFxyXG4gICAgICAgICAgICAgICAgcmVzaXphYmxlOiAxLFxyXG4gICAgICAgICAgICAgICAgYXR0cmlidXRlczoge1xyXG4gICAgICAgICAgICAgICAgICAgIHNyYzogaW1nX3NyY19kZWZhdWx0LFxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGNsYXNzZXM6IFsnaW1nLWZsdWlkJ10sXHJcbiAgICAgICAgICAgICAgICB0cmFpdHM6IFtcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICd0ZXh0JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWw6ICdTb3VyY2UgKFVSTCknLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAnc3JjJ1xyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAndGV4dCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsOiAnQWx0ZXJuYXRlIHRleHQnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAnYWx0J1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIF0uY29uY2F0KG1vZGVsLnByb3RvdHlwZS5kZWZhdWx0cy50cmFpdHMpXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgfSxcclxuICAgICAgICBleHRlbmRWaWV3OiAnaW1hZ2UnLFxyXG4gICAgfSk7XHJcbn1cclxuIiwiaW1wb3J0IGlucHV0SWNvbiBmcm9tIFwicmF3LWxvYWRlciEuLi9pY29ucy9pbnB1dC5zdmdcIjtcclxuXHJcbmV4cG9ydCBjb25zdCBJbnB1dEJsb2NrID0gKGJtLCBsYWJlbCkgPT4ge1xyXG4gICAgYm0uYWRkKCdpbnB1dCcsIHtcclxuICAgICAgICBsYWJlbDogYFxyXG4gICAgICAke2lucHV0SWNvbn1cclxuICAgICAgPGRpdj4ke2xhYmVsfTwvZGl2PmAsXHJcbiAgICAgICAgY2F0ZWdvcnk6ICdGb3JtcycsXHJcbiAgICAgICAgY29udGVudDogJzxpbnB1dCBuYW1lPVwiaW5wdXQxXCIgY2xhc3M9XCJmb3JtLWNvbnRyb2xcIi8+JyxcclxuICAgIH0pO1xyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgKGRjLCB0cmFpdHMsIGNvbmZpZyA9IHt9KSA9PiB7XHJcbiAgICBjb25zdCBkZWZhdWx0VHlwZSA9IGRjLmdldFR5cGUoJ2RlZmF1bHQnKTtcclxuICAgIGNvbnN0IGRlZmF1bHRNb2RlbCA9IGRlZmF1bHRUeXBlLm1vZGVsO1xyXG4gICAgY29uc3QgZGVmYXVsdFZpZXcgPSBkZWZhdWx0VHlwZS52aWV3O1xyXG5cclxuICAgIGRjLmFkZFR5cGUoJ2lucHV0Jywge1xyXG4gICAgICAgIGlzQ29tcG9uZW50OiBmdW5jdGlvbihlbCkge1xyXG4gICAgICAgICAgICBpZihlbC50YWdOYW1lID09PSAnSU5QVVQnKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4ge3R5cGU6ICdpbnB1dCd9O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuICAgICAgICBleHRlbmQ6ICdkZWZhdWx0JyxcclxuICAgICAgICBtb2RlbDoge1xyXG4gICAgICAgICAgICBkZWZhdWx0czoge1xyXG4gICAgICAgICAgICAgICAgLi4uZGVmYXVsdE1vZGVsLnByb3RvdHlwZS5kZWZhdWx0cyxcclxuICAgICAgICAgICAgICAgICdjdXN0b20tbmFtZSc6IGNvbmZpZy5sYWJlbHMuaW5wdXQsXHJcbiAgICAgICAgICAgICAgICB0YWdOYW1lOiAnaW5wdXQnLFxyXG4gICAgICAgICAgICAgICAgZHJhZ2dhYmxlOiAnZm9ybSwgZm9ybSAqJyxcclxuICAgICAgICAgICAgICAgIGRyb3BwYWJsZTogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICB0cmFpdHM6IFtcclxuICAgICAgICAgICAgICAgICAgICB0cmFpdHMudmFsdWUsXHJcbiAgICAgICAgICAgICAgICAgICAgdHJhaXRzLm5hbWUsXHJcbiAgICAgICAgICAgICAgICAgICAgdHJhaXRzLnBsYWNlaG9sZGVyLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsOiBjb25maWcubGFiZWxzLnRyYWl0X3R5cGUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdzZWxlY3QnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAndHlwZScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbnM6IFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt2YWx1ZTogJ3RleHQnLCBuYW1lOiBjb25maWcubGFiZWxzLnR5cGVfdGV4dH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7dmFsdWU6ICdlbWFpbCcsIG5hbWU6IGNvbmZpZy5sYWJlbHMudHlwZV9lbWFpbH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7dmFsdWU6ICdwYXNzd29yZCcsIG5hbWU6IGNvbmZpZy5sYWJlbHMudHlwZV9wYXNzd29yZH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7dmFsdWU6ICdudW1iZXInLCBuYW1lOiBjb25maWcubGFiZWxzLnR5cGVfbnVtYmVyfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt2YWx1ZTogJ2RhdGUnLCBuYW1lOiBjb25maWcubGFiZWxzLnR5cGVfZGF0ZX0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7dmFsdWU6ICdoaWRkZW4nLCBuYW1lOiBjb25maWcubGFiZWxzLnR5cGVfaGlkZGVufSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgXVxyXG4gICAgICAgICAgICAgICAgICAgIH0sIHRyYWl0cy5yZXF1aXJlZFxyXG4gICAgICAgICAgICAgICAgXSxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICB9LFxyXG4gICAgICAgIGV4dGVuZFZpZXc6ICdkZWZhdWx0JyxcclxuICAgIH0pO1xyXG59XHJcbiIsImltcG9ydCBmb3JtR3JvdXBJY29uIGZyb20gXCJyYXctbG9hZGVyIS4uL2ljb25zL2Zvcm0tZ3JvdXAuc3ZnXCI7XHJcbmltcG9ydCBpbnB1dEdyb3VwSWNvbiBmcm9tIFwicmF3LWxvYWRlciEuLi9pY29ucy9pbnB1dC1ncm91cC5zdmdcIjtcclxuXHJcbmV4cG9ydCBjb25zdCBJbnB1dEdyb3VwQmxvY2sgPSAoYm0sIGxhYmVsLCBjKSA9PiB7XHJcbiAgICBibS5hZGQoJ2Zvcm1fZ3JvdXBfaW5wdXQnLCB7XHJcbiAgICAgICAgbGFiZWw6IGBcclxuICAgICAgJHtmb3JtR3JvdXBJY29ufVxyXG4gICAgICA8ZGl2PiR7bGFiZWx9PC9kaXY+YCxcclxuICAgICAgICBjYXRlZ29yeTogJ0Zvcm1zJyxcclxuICAgICAgICBjb250ZW50OiBgXHJcbiAgICAgIDxkaXYgY2xhc3M9XCJmb3JtLWdyb3VwXCI+XHJcbiAgICAgICAgPGxhYmVsPk5hbWU8L2xhYmVsPlxyXG4gICAgICAgIDxpbnB1dCBuYW1lPVwibmFtZVwiIHBsYWNlaG9sZGVyPVwiVHlwZSBoZXJlIHlvdXIgbmFtZVwiIGNsYXNzPVwiZm9ybS1jb250cm9sXCIvPlxyXG4gICAgICA8L2Rpdj5cclxuICAgICAgYCxcclxuICAgIH0pO1xyXG5cclxuICAgIGJtLmFkZCgnaW5wdXRfZ3JvdXAnLCB7XHJcbiAgICAgICAgbGFiZWw6IGBcclxuICAgICAgJHtpbnB1dEdyb3VwSWNvbn1cclxuICAgICAgPGRpdj4ke2xhYmVsfTwvZGl2PmAsXHJcbiAgICAgICAgY2F0ZWdvcnk6ICdGb3JtcycsXHJcbiAgICAgICAgY29udGVudDogYFxyXG4gICAgICA8ZGl2IGNsYXNzPVwiaW5wdXQtZ3JvdXBcIj5cclxuICAgICAgICA8ZGl2IGNsYXNzPVwiaW5wdXQtZ3JvdXAtcHJlcGVuZFwiPlxyXG4gICAgICAgICAgPHNwYW4gY2xhc3M9XCJpbnB1dC1ncm91cC10ZXh0XCI+JDwvc3Bhbj5cclxuICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8aW5wdXQgbmFtZT1cImlucHV0MVwiIHR5cGU9XCJ0ZXh0XCIgY2xhc3M9XCJmb3JtLWNvbnRyb2xcIiBhcmlhLWxhYmVsPVwiQW1vdW50ICh0byB0aGUgbmVhcmVzdCBkb2xsYXIpXCI+XHJcbiAgICAgICAgPGRpdiBjbGFzcz1cImlucHV0LWdyb3VwLWFwcGVuZFwiPlxyXG4gICAgICAgICAgPHNwYW4gY2xhc3M9XCJpbnB1dC1ncm91cC10ZXh0XCI+LjAwPC9zcGFuPlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgICA8L2Rpdj5cclxuICAgICAgYCxcclxuICAgIH0pO1xyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgKGRjLCB0cmFpdHMsIGNvbmZpZyA9IHt9KSA9PiB7XHJcbiAgICBjb25zdCBkZWZhdWx0VHlwZSA9IGRjLmdldFR5cGUoJ2RlZmF1bHQnKTtcclxuICAgIGNvbnN0IGRlZmF1bHRNb2RlbCA9IGRlZmF1bHRUeXBlLm1vZGVsO1xyXG4gICAgY29uc3QgZGVmYXVsdFZpZXcgPSBkZWZhdWx0VHlwZS52aWV3O1xyXG5cclxuICAgIGRjLmFkZFR5cGUoJ2lucHV0X2dyb3VwJywge1xyXG4gICAgICBpc0NvbXBvbmVudDogZnVuY3Rpb24oZWwpIHtcclxuICAgICAgICAgIGlmKGVsICYmIGVsLmNsYXNzTGlzdCAmJiBlbC5jbGFzc0xpc3QuY29udGFpbnMoJ2Zvcm1fZ3JvdXBfaW5wdXQnKSkge1xyXG4gICAgICAgICAgICAgIHJldHVybiB7dHlwZTogJ2Zvcm1fZ3JvdXBfaW5wdXQnfTtcclxuICAgICAgICAgIH1cclxuICAgICAgfSxcclxuICAgICAgZXh0ZW5kOiAnZGVmYXVsdCcsXHJcbiAgICAgICAgbW9kZWw6IHtcclxuICAgICAgICAgICAgZGVmYXVsdHM6IHtcclxuICAgICAgICAgICAgICAgIC4uLmRlZmF1bHRNb2RlbC5wcm90b3R5cGUuZGVmYXVsdHMsXHJcbiAgICAgICAgICAgICAgICAnY3VzdG9tLW5hbWUnOiBjb25maWcubGFiZWxzLmlucHV0X2dyb3VwLFxyXG4gICAgICAgICAgICAgICAgdGFnTmFtZTogJ2RpdicsXHJcbiAgICAgICAgICAgICAgICB0cmFpdHM6IFtdLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZXh0ZW5kVmlldzogJ2RlZmF1bHQnLFxyXG4gICAgfSk7XHJcbn1cclxuIiwiaW1wb3J0IGlucHV0SWNvbiBmcm9tIFwicmF3LWxvYWRlciEuLi9pY29ucy9pbnB1dC5zdmdcIjtcclxuXHJcbmV4cG9ydCBjb25zdCBKc2ZJbnB1dEJsb2NrID0gKGJtLCBsYWJlbCkgPT4ge1xyXG4gICAgYm0uYWRkKCdoOmlucHV0VGV4dCcsIHtcclxuICAgICAgICBsYWJlbDogYFxyXG4gICAgICAke2lucHV0SWNvbn1cclxuICAgICAgPGRpdj4ke2xhYmVsfTwvZGl2PmAsXHJcbiAgICAgICAgY2F0ZWdvcnk6ICdqc2ZGb3JtcycsXHJcbiAgICAgICAgY29udGVudDogJzxoOmlucHV0VGV4dCBkYXRhLWdqcy10eXBlPVwianNmSW5wdXRUZXh0XCIgY2xhc3M9XCJmb3JtLWNvbnRyb2xcIj48L2g6aW5wdXRUZXh0PicsXHJcbiAgICB9KTtcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IChkYywgdHJhaXRzLCBjb25maWcgPSB7fSkgPT4ge1xyXG4gICAgY29uc3QgZGVmYXVsdFR5cGUgPSBkYy5nZXRUeXBlKCdpbnB1dCcpO1xyXG4gICAgY29uc3QgZGVmYXVsdE1vZGVsID0gZGVmYXVsdFR5cGUubW9kZWw7XHJcblxyXG4gICAgZGMuYWRkVHlwZSgnanNmSW5wdXRUZXh0Jywge1xyXG4gICAgICAgIGlzQ29tcG9uZW50OiBmdW5jdGlvbihlbCkge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIiMjIyBJbiBqc2ZJbnB1dFRleHQuSXNDb21wb25lbnQ6IGVsLnRhZ05hbWU6IFwiKTtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coZWwpO1xyXG4gICAgICAgICAgICBpZihlbC5oYXNPd25Qcm9wZXJ0eSgndGFnTmFtZScpKVxyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJyMjICcrZWwudGFnTmFtZSk7XHJcbiAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiIyMgbm8gdGFnTmFtZVwiKTtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coXCIjIyBpcyBoOmlucHV0dGV4dDogXCIgKyAoZWwgJiYgZWwuaGFzT3duUHJvcGVydHkoJ3RhZ05hbWUnKSAmJiBlbC50YWdOYW1lID09PSAnSDpJTlBVVFRFWFQnKSk7XHJcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKGVsLmNsYXNzTGlzdCk7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBpZihlbCAmJiBlbC5oYXNPd25Qcm9wZXJ0eSgndGFnTmFtZScpICYmIGVsLnRhZ05hbWUgPT09ICdIOklOUFVUVEVYVCcpIHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiIyMjIEluIGpzZklucHV0VGV4dC5Jc0NvbXBvbmVudDogcmVzdWx0IGlzIHRydWUgXCIpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7IC8vIHt0eXBlOiAnanNmSW5wdXRUZXh0J307XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY29uc29sZS5sb2coXCIjIyMgSW4ganNmSW5wdXRUZXh0LklzQ29tcG9uZW50OiByZXN1bHQgaXMgZmFsc2UgXCIpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZXh0ZW5kOiAnaW5wdXQnLFxyXG4gICAgICAgIG1vZGVsOiB7XHJcbiAgICAgICAgICAgIGRlZmF1bHRzOiB7XHJcbiAgICAgICAgICAgICAgICAuLi5kZWZhdWx0TW9kZWwucHJvdG90eXBlLmRlZmF1bHRzLFxyXG4gICAgICAgICAgICAgICAgdGFnTmFtZTogJ2g6aW5wdXRUZXh0JyxcclxuICAgICAgICAgICAgICAgICdjdXN0b20tbmFtZSc6IGNvbmZpZy5sYWJlbHMuanNmSW5wdXRUZXh0LFxyXG4gICAgICAgICAgICAgICAgZHJhZ2dhYmxlOiAnZm9ybSwgZm9ybSAqJyxcclxuICAgICAgICAgICAgICAgIGRyb3BwYWJsZTogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICB0cmFpdHM6IFtcclxuICAgICAgICAgICAgICAgICAgICB0cmFpdHMudmFsdWUsXHJcbiAgICAgICAgICAgICAgICAgICAgdHJhaXRzLm5hbWUsXHJcbiAgICAgICAgICAgICAgICAgICAgdHJhaXRzLnBsYWNlaG9sZGVyLCBcclxuICAgICAgICAgICAgICAgICAgICB0cmFpdHMucmVxdWlyZWQsXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsYWJlbDogY29uZmlnLmxhYmVscy50cmFpdF92YWx1ZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ3RleHQnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAndHlwZScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIG9wdGlvbnM6IFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgIHt2YWx1ZTogJ3RleHQnLCBuYW1lOiBjb25maWcubGFiZWxzLnR5cGVfdGV4dH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgICB7dmFsdWU6ICdlbWFpbCcsIG5hbWU6IGNvbmZpZy5sYWJlbHMudHlwZV9lbWFpbH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgICB7dmFsdWU6ICdwYXNzd29yZCcsIG5hbWU6IGNvbmZpZy5sYWJlbHMudHlwZV9wYXNzd29yZH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgICB7dmFsdWU6ICdudW1iZXInLCBuYW1lOiBjb25maWcubGFiZWxzLnR5cGVfbnVtYmVyfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgIHt2YWx1ZTogJ2RhdGUnLCBuYW1lOiBjb25maWcubGFiZWxzLnR5cGVfZGF0ZX0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgICB7dmFsdWU6ICdoaWRkZW4nLCBuYW1lOiBjb25maWcubGFiZWxzLnR5cGVfaGlkZGVufSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gXVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgfSxcclxuICAgICAgICBleHRlbmRWaWV3OiAnaW5wdXQnLFxyXG4gICAgICAgIHZpZXc6IHtcclxuICAgICAgICAgICAgdGFnTmFtZTogJ2lucHV0JyxcclxuICAgICAgICAgICAgYXR0cmlidXRlczoge1xyXG4gICAgICAgICAgICAgICAgdHlwZTogJ3RleHQnLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG59XHJcbiIsImltcG9ydCBsYWJlbEljb24gZnJvbSBcInJhdy1sb2FkZXIhLi4vaWNvbnMvbGFiZWwuc3ZnXCI7XHJcblxyXG5leHBvcnQgY29uc3QgTGFiZWxCbG9jayA9IChibSwgbGFiZWwpID0+IHtcclxuICAgIGJtLmFkZCgnbGFiZWwnLCB7XHJcbiAgICAgICAgbGFiZWw6IGBcclxuICAgICAgJHtsYWJlbEljb259XHJcbiAgICAgIDxkaXY+JHtsYWJlbH08L2Rpdj5gLFxyXG4gICAgICAgIGNhdGVnb3J5OiAnRm9ybXMnLFxyXG4gICAgICAgIGNvbnRlbnQ6ICc8bGFiZWw+TGFiZWw8L2xhYmVsPicsXHJcbiAgICB9KTtcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IChkYywgdHJhaXRzLCBjb25maWcgPSB7fSkgPT4ge1xyXG5cclxuICAgIGNvbnN0IHRleHRUeXBlID0gZGMuZ2V0VHlwZSgndGV4dCcpO1xyXG4gICAgY29uc3QgdGV4dE1vZGVsID0gdGV4dFR5cGUubW9kZWw7XHJcbiAgICBjb25zdCB0ZXh0VmlldyA9IHRleHRUeXBlLnZpZXc7XHJcblxyXG4gICAgZGMuYWRkVHlwZSgnbGFiZWwnLCB7XHJcbiAgICAgICAgaXNDb21wb25lbnQ6IGZ1bmN0aW9uKGVsKSB7XHJcbiAgICAgICAgICAgIGlmKGVsLnRhZ05hbWUgPT0gJ0xBQkVMJyl7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4ge3R5cGU6ICdsYWJlbCd9O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuICAgICAgICBleHRlbmQ6ICd0ZXh0JyxcclxuICAgICAgICBtb2RlbDoge1xyXG4gICAgICAgICAgICBkZWZhdWx0czoge1xyXG4gICAgICAgICAgICAgICAgLi4udGV4dE1vZGVsLnByb3RvdHlwZS5kZWZhdWx0cyxcclxuICAgICAgICAgICAgICAgICdjdXN0b20tbmFtZSc6IGNvbmZpZy5sYWJlbHMubGFiZWwsXHJcbiAgICAgICAgICAgICAgICB0YWdOYW1lOiAnbGFiZWwnLFxyXG4gICAgICAgICAgICAgICAgdHJhaXRzOiBbdHJhaXRzLmZvcl0sXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgfSxcclxuICAgICAgICBleHRlbmRWaWV3OiAndGV4dCcsXHJcbiAgICB9KTtcclxufVxyXG4iLCIvKlxyXG5rbm93biBpc3N1ZXM6XHJcbi0gQlMgZHJvcGRvd24gSlMgaXNuJ3QgYXR0YWNoZWQgaWYgeW91IHJlbW92ZSB0aGUgZXhpc3RpbmcgdG9nZ2xlIGFuZCBhZGQgYSBuZXcgb25lXHJcbiovXHJcblxyXG5pbXBvcnQgbGlua0ljb24gZnJvbSBcInJhdy1sb2FkZXIhLi4vaWNvbnMvbGluay1zb2xpZC5zdmdcIjtcclxuXHJcbmV4cG9ydCBjb25zdCBMaW5rQmxvY2sgPSAoYm0sIGxhYmVsKSA9PiB7XHJcbiAgICBibS5hZGQoJ2xpbmsnLCB7XHJcbiAgICAgICAgbGFiZWw6IGBcclxuICAgICAgICAgICAgJHtsaW5rSWNvbn1cclxuICAgICAgICAgICAgPGRpdj4ke2xhYmVsfTwvZGl2PlxyXG4gICAgICAgIGAsXHJcbiAgICAgICAgY2F0ZWdvcnk6ICdCYXNpYycsXHJcbiAgICAgICAgY29udGVudDoge1xyXG4gICAgICAgICAgICB0eXBlOiAnbGluaycsXHJcbiAgICAgICAgICAgIGNvbnRlbnQ6ICdMaW5rIHRleHQnXHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCAoZWRpdG9yKSA9PiB7XHJcbiAgICBjb25zdCBjb21wcyA9IGVkaXRvci5Eb21Db21wb25lbnRzO1xyXG4gICAgY29uc3QgdGV4dFR5cGUgPSBjb21wcy5nZXRUeXBlKCd0ZXh0Jyk7XHJcbiAgICBjb25zdCB0ZXh0TW9kZWwgPSB0ZXh0VHlwZS5tb2RlbDtcclxuXHJcbiAgICBjb25zdCBsaW5rVHlwZSA9IGNvbXBzLmdldFR5cGUoJ2xpbmsnKTtcclxuICAgIGNvbnN0IGxpbmtWaWV3ID0gbGlua1R5cGUudmlldztcclxuXHJcbiAgICBjb21wcy5hZGRUeXBlKCdsaW5rJywge1xyXG4gICAgICAgIGlzQ29tcG9uZW50OiBmdW5jdGlvbihlbCkge1xyXG4gICAgICAgICAgICBpZiAoZWwgJiYgZWwudGFnTmFtZSAmJiBlbC50YWdOYW1lID09PSAnQScpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB7dHlwZTogJ2xpbmsnfTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZXh0ZW5kOiAndGV4dCcsXHJcbiAgICAgICAgbW9kZWw6IHtcclxuICAgICAgICAgICAgZGVmYXVsdHM6IE9iamVjdC5hc3NpZ24oe30sIHRleHRNb2RlbC5wcm90b3R5cGUuZGVmYXVsdHMsIHtcclxuICAgICAgICAgICAgICAgICdjdXN0b20tbmFtZSc6ICdMaW5rJyxcclxuICAgICAgICAgICAgICAgIHRhZ05hbWU6ICdhJyxcclxuICAgICAgICAgICAgICAgIGRyb3BwYWJsZTogdHJ1ZSxcclxuICAgICAgICAgICAgICAgIGVkaXRhYmxlOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgdHJhaXRzOiBbXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAndGV4dCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsOiAnSHJlZicsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICdocmVmJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI6ICdodHRwczovL3d3dy5ncmFwZXNqcy5jb20nXHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdzZWxlY3QnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25zOiBbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7dmFsdWU6ICcnLCBuYW1lOiAnVGhpcyB3aW5kb3cnfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt2YWx1ZTogJ19ibGFuaycsIG5hbWU6ICdOZXcgd2luZG93J31cclxuICAgICAgICAgICAgICAgICAgICAgICAgXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWw6ICdUYXJnZXQnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAndGFyZ2V0JyxcclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ3NlbGVjdCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbnM6IFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt2YWx1ZTogJycsIG5hbWU6ICdOb25lJ30sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7dmFsdWU6ICdidXR0b24nLCBuYW1lOiAnU2VsZid9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge3ZhbHVlOiAnY29sbGFwc2UnLCBuYW1lOiAnQ29sbGFwc2UnfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt2YWx1ZTogJ2Ryb3Bkb3duJywgbmFtZTogJ0Ryb3Bkb3duJ31cclxuICAgICAgICAgICAgICAgICAgICAgICAgXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWw6ICdUb2dnbGVzJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogJ2RhdGEtdG9nZ2xlJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2hhbmdlUHJvcDogMVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIF0uY29uY2F0KHRleHRNb2RlbC5wcm90b3R5cGUuZGVmYXVsdHMudHJhaXRzKVxyXG4gICAgICAgICAgICB9KSxcclxuICAgICAgICAgICAgaW5pdDIoKSB7XHJcbiAgICAgICAgICAgICAgICAvL3RleHRNb2RlbC5wcm90b3R5cGUuaW5pdC5jYWxsKHRoaXMpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5saXN0ZW5Ubyh0aGlzLCAnY2hhbmdlOmRhdGEtdG9nZ2xlJywgdGhpcy5zZXR1cFRvZ2dsZSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmxpc3RlblRvKHRoaXMsICdjaGFuZ2U6YXR0cmlidXRlcycsIHRoaXMuc2V0dXBUb2dnbGUpOyAvLyBmb3Igd2hlbiBocmVmIGNoYW5nZXNcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgc2V0dXBUb2dnbGUoYSwgYiwgb3B0aW9ucyA9IHt9KSB7IC8vIFRPRE8gdGhpcyBzaG91bGQgYmUgaW4gdGhlIGRyb3Bkb3duIGNvbXAgYW5kIG5vdCB0aGUgbGluayBjb21wXHJcbiAgICAgICAgICAgICAgICBpZiAob3B0aW9ucy5pZ25vcmUgPT09IHRydWUgJiYgb3B0aW9ucy5mb3JjZSAhPT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdzZXR1cCB0b2dnbGUnKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGF0dHJzID0gdGhpcy5nZXRBdHRyaWJ1dGVzKCk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBocmVmID0gYXR0cnMuaHJlZjtcclxuICAgICAgICAgICAgICAgIC8vIG9sZCBhdHRyaWJ1dGVzIGFyZSBub3QgcmVtb3ZlZCBmcm9tIERPTSBldmVuIGlmIGRlbGV0ZWQuLi5cclxuICAgICAgICAgICAgICAgIGRlbGV0ZSBhdHRyc1snZGF0YS10b2dnbGUnXTtcclxuICAgICAgICAgICAgICAgIGRlbGV0ZSBhdHRyc1snYXJpYS1leHBhbmRlZCddO1xyXG4gICAgICAgICAgICAgICAgZGVsZXRlIGF0dHJzWydhcmlhLWNvbnRyb2xzJ107XHJcbiAgICAgICAgICAgICAgICBkZWxldGUgYXR0cnNbJ2FyaWEtaGFzcG9wdXAnXTtcclxuICAgICAgICAgICAgICAgIGlmIChocmVmICYmIGhyZWYubGVuZ3RoID4gMCAmJiBocmVmLm1hdGNoKC9eIy8pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ2xpbmsgaGFzIGhyZWYnKTtcclxuICAgICAgICAgICAgICAgICAgICAvLyBmaW5kIHRoZSBlbCB3aGVyZSBpZCA9PSBsaW5rIGhyZWZcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBlbHMgPSB0aGlzLmVtLmdldCgnRWRpdG9yJykuRG9tQ29tcG9uZW50cy5nZXRXcmFwcGVyKCkuZmluZChocmVmKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZWxzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ3JlZmVyZW5jZWQgZWwgZm91bmQnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZWwgPSBlbHNbMF07IC8vIHNob3VsZCBvbmx5IGJlIG9uZSBlbCB3aXRoIHRoaXMgSURcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZWxfYXR0cnMgPSBlbC5nZXRBdHRyaWJ1dGVzKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vZGVsZXRlIGVsX2F0dHJzWydhcmlhLWxhYmVsbGVkYnknXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZWxfY2xhc3NlcyA9IGVsX2F0dHJzLmNsYXNzO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZWxfY2xhc3Nlcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ2VsIGhhcyBjbGFzc2VzJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBlbF9jbGFzc2VzX2xpc3QgPSBlbF9jbGFzc2VzLnNwbGl0KCcgJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBpbmNsdWRlcyA9IFsnY29sbGFwc2UnLCAnZHJvcGRvd24tbWVudSddO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgaW50ZXJzZWN0aW9uID0gZWxfY2xhc3Nlc19saXN0LmZpbHRlcih4ID0+IGluY2x1ZGVzLmluY2x1ZGVzKHgpKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW50ZXJzZWN0aW9uLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdsaW5rIGRhdGEtdG9nZ2xlIG1hdGNoZXMgZWwgY2xhc3MnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKGludGVyc2VjdGlvblswXSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdjb2xsYXBzZSc6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyc1snZGF0YS10b2dnbGUnXSA9ICdjb2xsYXBzZSc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnNbJ2FyaWEtZXhwYW5kZWQnXSA9IGVsX2NsYXNzZXNfbGlzdC5pbmNsdWRlcygnc2hvdycpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbnRlcnNlY3Rpb25bMF0gPT09ICdjb2xsYXBzZScpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnNbJ2FyaWEtY29udHJvbHMnXSA9IGhyZWYuc3Vic3RyaW5nKDEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHRoaXMuc2V0KCdhdHRyaWJ1dGVzJywgYXR0cnMsIHtpZ25vcmU6IHRydWV9KTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgY2xhc3Nlc0NoYW5nZWQoZSkge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ2NsYXNzZXMgY2hhbmdlZCcpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuYXR0cmlidXRlcy50eXBlID09PSAnbGluaycpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5hdHRyaWJ1dGVzLmNsYXNzZXMuZmlsdGVyKGZ1bmN0aW9uIChrbGFzcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4ga2xhc3MuaWQgPT09ICdidG4nXHJcbiAgICAgICAgICAgICAgICAgICAgfSkubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNoYW5nZVR5cGUoJ2J1dHRvbicpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZXh0ZW5kVmlldzogJ2xpbmsnLFxyXG4gICAgfSk7XHJcblxyXG59XHJcbiIsImltcG9ydCBjb2x1bW5zSWNvbiBmcm9tICdyYXctbG9hZGVyIS4uL2ljb25zL2NvbHVtbnMtc29saWQuc3ZnJztcclxuXHJcbmV4cG9ydCBjb25zdCBNZWRpYU9iamVjdEJsb2NrID0gKGJtLCBsYWJlbCkgPT4ge1xyXG4gICAgYm0uYWRkKCdtZWRpYV9vYmplY3QnKS5zZXQoe1xyXG4gICAgICAgIGxhYmVsOiBgXHJcbiAgICAgICAgICAgICR7Y29sdW1uc0ljb259XHJcbiAgICAgICAgICAgIDxkaXY+JHtsYWJlbH08L2Rpdj5cclxuICAgICAgICBgLFxyXG4gICAgICAgIGNhdGVnb3J5OiAnTGF5b3V0JyxcclxuICAgICAgICBjb250ZW50OiBgPGRpdiBjbGFzcz1cIm1lZGlhXCI+XHJcbiAgICAgICAgICAgICAgICAgPGltZyBjbGFzcz1cIm1yLTNcIiBzcmM9XCJcIj5cclxuICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwibWVkaWEtYm9keVwiPlxyXG4gICAgICAgICAgICAgICAgIDxoNT5NZWRpYSBoZWFkaW5nPC9oNT5cclxuICAgICAgICAgICAgICAgICA8ZGl2PkNyYXMgc2l0IGFtZXQgbmliaCBsaWJlcm8sIGluIGdyYXZpZGEgbnVsbGEuIE51bGxhIHZlbCBtZXR1cyBzY2VsZXJpc3F1ZSBhbnRlIHNvbGxpY2l0dWRpbi4gQ3JhcyBwdXJ1cyBvZGlvLCB2ZXN0aWJ1bHVtIGluIHZ1bHB1dGF0ZSBhdCwgdGVtcHVzIHZpdmVycmEgdHVycGlzLiBGdXNjZSBjb25kaW1lbnR1bSBudW5jIGFjIG5pc2kgdnVscHV0YXRlIGZyaW5naWxsYS4gRG9uZWMgbGFjaW5pYSBjb25ndWUgZmVsaXMgaW4gZmF1Y2lidXMuPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgPC9kaXY+YFxyXG4gICAgfSk7XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCAoZG9tYykgPT4ge1xyXG4gICAgY29uc3QgZGVmYXVsdFR5cGUgPSBkb21jLmdldFR5cGUoJ2RlZmF1bHQnKTtcclxuICAgIGNvbnN0IGRlZmF1bHRNb2RlbCA9IGRlZmF1bHRUeXBlLm1vZGVsO1xyXG4gICAgY29uc3QgZGVmYXVsdFZpZXcgPSBkZWZhdWx0VHlwZS52aWV3O1xyXG5cclxuICAgIGRvbWMuYWRkVHlwZSgnbWVkaWFfb2JqZWN0Jywge1xyXG4gICAgICAgIGlzQ29tcG9uZW50OiBmdW5jdGlvbihlbCkge1xyXG4gICAgICAgICAgICBpZihlbCAmJiBlbC5jbGFzc0xpc3QgJiYgZWwuY2xhc3NMaXN0LmNvbnRhaW5zKCdtZWRpYScpKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4ge3R5cGU6ICdtZWRpYSd9O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuICAgICAgICBleHRlbmQ6ICdkZWZhdWx0JyxcclxuICAgICAgICBtb2RlbDoge1xyXG4gICAgICAgICAgICBkZWZhdWx0czogT2JqZWN0LmFzc2lnbih7fSwgZGVmYXVsdE1vZGVsLnByb3RvdHlwZS5kZWZhdWx0cywge1xyXG4gICAgICAgICAgICAgICAgJ2N1c3RvbS1uYW1lJzogJ01lZGlhIE9iamVjdCcsXHJcbiAgICAgICAgICAgICAgICB0YWdOYW1lOiAnZGl2JyxcclxuICAgICAgICAgICAgICAgIGNsYXNzZXM6IFsnbWVkaWEnXVxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZXh0ZW5kVmlldzogJ2RlZmF1bHQnLFxyXG4gICAgfSk7XHJcblxyXG4gICAgZG9tYy5hZGRUeXBlKCdtZWRpYV9ib2R5Jywge1xyXG4gICAgICAgIGlzQ29tcG9uZW50OiBmdW5jdGlvbihlbCkge1xyXG4gICAgICAgICAgICBpZihlbCAmJiBlbC5jbGFzc0xpc3QgJiYgZWwuY2xhc3NMaXN0LmNvbnRhaW5zKCdtZWRpYS1ib2R5JykpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB7dHlwZTogJ21lZGlhX2JvZHknfTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZXh0ZW5kOiAnZGVmYXVsdCcsXHJcbiAgICAgICAgbW9kZWw6IHtcclxuICAgICAgICAgICAgZGVmYXVsdHM6IE9iamVjdC5hc3NpZ24oe30sIGRlZmF1bHRNb2RlbC5wcm90b3R5cGUuZGVmYXVsdHMsIHtcclxuICAgICAgICAgICAgICAgICdjdXN0b20tbmFtZSc6ICdNZWRpYSBCb2R5JyxcclxuICAgICAgICAgICAgICAgIHRhZ05hbWU6ICdkaXYnLFxyXG4gICAgICAgICAgICAgICAgY2xhc3NlczogWydtZWRpYS1ib2R5J11cclxuICAgICAgICAgICAgfSlcclxuICAgICAgICB9LFxyXG4gICAgICAgIGV4dGVuZFZpZXc6ICdkZWZhdWx0JyxcclxuICAgIH0pO1xyXG59XHJcbiIsImltcG9ydCBwYXJhZ3JhcGhJY29uIGZyb20gXCJyYXctbG9hZGVyIS4uL2ljb25zL3BhcmFncmFwaC1zb2xpZC5zdmdcIjtcclxuXHJcbmV4cG9ydCBjb25zdCBQYXJhZ3JhcGhCbG9jayA9IChibSwgbGFiZWwpID0+IHtcclxuICAgIGJtLmFkZCgncGFyYWdyYXBoJywge1xyXG4gICAgICAgIGxhYmVsOiBgXHJcbiAgICAgICAgICAgICR7cGFyYWdyYXBoSWNvbn1cclxuICAgICAgICAgICAgPGRpdj4ke2xhYmVsfTwvZGl2PlxyXG4gICAgICAgIGAsXHJcbiAgICAgICAgY2F0ZWdvcnk6ICdUeXBvZ3JhcGh5JyxcclxuICAgICAgICBjb250ZW50OiB7XHJcbiAgICAgICAgICAgIHR5cGU6ICdwYXJhZ3JhcGgnLFxyXG4gICAgICAgICAgICBjb250ZW50OiAnVml2YW11cyBzYWdpdHRpcyBsYWN1cyB2ZWwgYXVndWUgbGFvcmVldCBydXRydW0gZmF1Y2lidXMgZG9sb3IgYXVjdG9yLiBEdWlzIG1vbGxpcywgZXN0IG5vbiBjb21tb2RvIGx1Y3R1cy4nXHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCAoZG9tYykgPT4ge1xyXG4gICAgY29uc3QgdGV4dFR5cGUgPSBkb21jLmdldFR5cGUoJ3RleHQnKTtcclxuICAgIGNvbnN0IHRleHRNb2RlbCA9IHRleHRUeXBlLm1vZGVsO1xyXG4gICAgY29uc3QgdGV4dFZpZXcgPSB0ZXh0VHlwZS52aWV3O1xyXG5cclxuICAgIGRvbWMuYWRkVHlwZSgncGFyYWdyYXBoJywge1xyXG4gICAgICAgIGlzQ29tcG9uZW50OiBmdW5jdGlvbihlbCkge1xyXG4gICAgICAgICAgICBpZihlbCAmJiBlbC50YWdOYW1lICYmIGVsLnRhZ05hbWUgPT09ICdQJykge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHt0eXBlOiAncGFyYWdyYXBoJ307XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG4gICAgICAgIGV4dGVuZDogJ3RleHQnLFxyXG4gICAgICAgIG1vZGVsOiB7XHJcbiAgICAgICAgICAgIGRlZmF1bHRzOiBPYmplY3QuYXNzaWduKHt9LCB0ZXh0TW9kZWwucHJvdG90eXBlLmRlZmF1bHRzLCB7XHJcbiAgICAgICAgICAgICAgICAnY3VzdG9tLW5hbWUnOiAnUGFyYWdyYXBoJyxcclxuICAgICAgICAgICAgICAgIHRhZ05hbWU6ICdwJyxcclxuICAgICAgICAgICAgICAgIHRyYWl0czogW1xyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2NsYXNzX3NlbGVjdCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbnM6IFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt2YWx1ZTogJycsIG5hbWU6ICdObyd9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge3ZhbHVlOiAnbGVhZCcsIG5hbWU6ICdZZXMnfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsYWJlbDogJ0xlYWQ/J1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIF0uY29uY2F0KHRleHRNb2RlbC5wcm90b3R5cGUuZGVmYXVsdHMudHJhaXRzKVxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZXh0ZW5kVmlldzogJ3RleHQnLFxyXG4gICAgfSk7XHJcbn1cclxuIiwiaW1wb3J0IHJhZGlvSWNvbiBmcm9tIFwicmF3LWxvYWRlciEuLi9pY29ucy9kb3QtY2lyY2xlLXJlZ3VsYXIuc3ZnXCI7XHJcblxyXG5leHBvcnQgY29uc3QgUmFkaW9CbG9jayA9IChibSwgbGFiZWwpID0+IHtcclxuICAgIGJtLmFkZCgncmFkaW8nLCB7XHJcbiAgICAgICAgbGFiZWw6IGBcclxuICAgICAgICAgICAgJHtyYWRpb0ljb259XHJcbiAgICAgICAgICAgIDxkaXY+JHtsYWJlbH08L2Rpdj5cclxuICAgICAgICBgLFxyXG4gICAgICAgIGNhdGVnb3J5OiAnRm9ybXMnLFxyXG4gICAgICAgIGNvbnRlbnQ6IGBcclxuICAgICAgICA8ZGl2IGNsYXNzPVwiZm9ybS1jaGVja1wiPlxyXG4gICAgICAgICAgPGlucHV0IGNsYXNzPVwiZm9ybS1jaGVjay1pbnB1dFwiIHR5cGU9XCJyYWRpb1wiIG5hbWU9XCJleGFtcGxlUmFkaW9zXCIgaWQ9XCJleGFtcGxlUmFkaW9zMVwiIHZhbHVlPVwib3B0aW9uMVwiIGNoZWNrZWQ+XHJcbiAgICAgICAgICA8bGFiZWwgY2xhc3M9XCJmb3JtLWNoZWNrLWxhYmVsXCIgZm9yPVwiZXhhbXBsZVJhZGlvczFcIj5cclxuICAgICAgICAgICAgRGVmYXVsdCByYWRpb1xyXG4gICAgICAgICAgPC9sYWJlbD5cclxuICAgICAgICA8L2Rpdj5cclxuICAgICAgYCxcclxuICAgIH0pO1xyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgKGRjLCB0cmFpdHMsIGNvbmZpZyA9IHt9KSA9PiB7XHJcbiAgICBjb25zdCBjaGVja1R5cGUgPSBkYy5nZXRUeXBlKCdjaGVja2JveCcpO1xyXG5cclxuICAgIC8vIFJBRElPXHJcbiAgICBkYy5hZGRUeXBlKCdyYWRpbycsIHtcclxuICAgICAgICBpc0NvbXBvbmVudDogZnVuY3Rpb24oZWwpIHtcclxuICAgICAgICAgICAgaWYoZWwudGFnTmFtZSA9PT0gJ0lOUFVUJyAmJiBlbC50eXBlID09PSAncmFkaW8nKXtcclxuICAgICAgICAgICAgICAgIHJldHVybiB7dHlwZTogJ3JhZGlvJ307XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG4gICAgICAgIGV4dGVuZDogJ2NoZWNrYm94JyxcclxuICAgICAgICBtb2RlbDoge1xyXG4gICAgICAgICAgICBkZWZhdWx0czoge1xyXG4gICAgICAgICAgICAgICAgLi4uY2hlY2tUeXBlLm1vZGVsLnByb3RvdHlwZS5kZWZhdWx0cyxcclxuICAgICAgICAgICAgICAgICdjdXN0b20tbmFtZSc6IGNvbmZpZy5sYWJlbHMucmFkaW8sXHJcbiAgICAgICAgICAgICAgICBhdHRyaWJ1dGVzOiB7dHlwZTogJ3JhZGlvJ30sXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgfSxcclxuICAgICAgICBleHRlbmRWaWV3OiAnY2hlY2tib3gnLFxyXG4gICAgfSk7XHJcbn1cclxuIiwiaW1wb3J0IHdpbmRvd0ljb24gZnJvbSBcInJhdy1sb2FkZXIhLi4vaWNvbnMvd2luZG93LW1heGltaXplLXNvbGlkLnN2Z1wiO1xyXG5cclxuZXhwb3J0IGNvbnN0IFJvd0Jsb2NrID0gKGJtLCBsYWJlbCkgPT4ge1xyXG4gICAgYm0uYWRkKCdyb3cnKS5zZXQoe1xyXG4gICAgICAgIGxhYmVsOiBgXHJcbiAgICAgICAgICAgICR7d2luZG93SWNvbn1cclxuICAgICAgICAgICAgPGRpdj4ke2xhYmVsfTwvZGl2PlxyXG4gICAgICAgIGAsXHJcbiAgICAgICAgY2F0ZWdvcnk6ICdMYXlvdXQnLFxyXG4gICAgICAgIGNvbnRlbnQ6IHtcclxuICAgICAgICAgICAgdHlwZTogJ3JvdycsXHJcbiAgICAgICAgICAgIGNsYXNzZXM6IFsncm93J11cclxuICAgICAgICB9XHJcbiAgICB9KTtcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IChkb21jKSA9PiB7XHJcbiAgICBjb25zdCBkZWZhdWx0VHlwZSA9IGRvbWMuZ2V0VHlwZSgnZGVmYXVsdCcpO1xyXG4gICAgY29uc3QgZGVmYXVsdE1vZGVsID0gZGVmYXVsdFR5cGUubW9kZWw7XHJcbiAgICBjb25zdCBkZWZhdWx0VmlldyA9IGRlZmF1bHRUeXBlLnZpZXc7XHJcblxyXG4gICAgZG9tYy5hZGRUeXBlKCdyb3cnLCB7XHJcbiAgICAgICAgaXNDb21wb25lbnQ6IChlbCkgPT4ge1xyXG4gICAgICAgICAgICBpZihlbCAmJiBlbC5jbGFzc0xpc3QgJiYgZWwuY2xhc3NMaXN0LmNvbnRhaW5zKCdyb3cnKSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHt0eXBlOiAncm93J307XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG4gICAgICAgIGV4dGVuZDogJ2RlZmF1bHQnLFxyXG4gICAgICAgIG1vZGVsOiB7XHJcbiAgICAgICAgICAgIGRlZmF1bHRzOiBPYmplY3QuYXNzaWduKHt9LCBkZWZhdWx0TW9kZWwucHJvdG90eXBlLmRlZmF1bHRzLCB7XHJcbiAgICAgICAgICAgICAgICAnY3VzdG9tLW5hbWUnOiAnUm93JyxcclxuICAgICAgICAgICAgICAgIHRhZ05hbWU6ICdkaXYnLFxyXG4gICAgICAgICAgICAgICAgZHJhZ2dhYmxlOiAnLmNvbnRhaW5lciwgLmNvbnRhaW5lci1mbHVpZCcsXHJcbiAgICAgICAgICAgICAgICBkcm9wcGFibGU6IHRydWUsXHJcbiAgICAgICAgICAgICAgICB0cmFpdHM6IFtcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdjbGFzc19zZWxlY3QnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25zOiBbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7dmFsdWU6ICcnLCBuYW1lOiAnWWVzJ30sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7dmFsdWU6ICduby1ndXR0ZXJzJywgbmFtZTogJ05vJ31cclxuICAgICAgICAgICAgICAgICAgICAgICAgXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWw6ICdHdXR0ZXJzPydcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBdLmNvbmNhdChkZWZhdWx0TW9kZWwucHJvdG90eXBlLmRlZmF1bHRzLnRyYWl0cylcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICB9LFxyXG4gICAgICAgIGV4dGVuZFZpZXc6ICdkZWZhdWx0J1xyXG4gICAgfSk7XHJcbn1cclxuIiwiaW1wb3J0IHNlbGVjdEljb24gZnJvbSBcInJhdy1sb2FkZXIhLi4vaWNvbnMvc2VsZWN0LWlucHV0LnN2Z1wiO1xyXG5cclxuZXhwb3J0IGNvbnN0IFNlbGVjdEJsb2NrID0gKGJtLCBsYWJlbCkgPT4ge1xyXG4gICAgYm0uYWRkKCdzZWxlY3QnLCB7XHJcbiAgICAgICAgbGFiZWw6IGBcclxuICAgICAgJHtzZWxlY3RJY29ufVxyXG4gICAgICA8ZGl2PiR7bGFiZWx9PC9kaXY+YCxcclxuICAgICAgICBjYXRlZ29yeTogJ0Zvcm1zJyxcclxuICAgICAgICBjb250ZW50OiBgPHNlbGVjdCBjbGFzcz1cImZvcm0tY29udHJvbFwiIG5hbWU9XCJzZWxlY3QxXCI+XHJcbiAgICAgICAgJHtsYWJlbCA/IGA8b3B0aW9uIHZhbHVlPVwiXCI+JHtsYWJlbH08L29wdGlvbj5gIDogJyd9XHJcbiAgICAgICAgPG9wdGlvbiB2YWx1ZT1cIjFcIj4ke2xhYmVsfSAxPC9vcHRpb24+XHJcbiAgICAgICAgPC9zZWxlY3Q+YCxcclxuICAgIH0pO1xyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgKGVkaXRvciwgZGMsIHRyYWl0cywgY29uZmlnID0ge30pID0+IHtcclxuICAgIGNvbnN0IGRlZmF1bHRUeXBlID0gZGMuZ2V0VHlwZSgnZGVmYXVsdCcpO1xyXG4gICAgY29uc3QgZGVmYXVsdE1vZGVsID0gZGVmYXVsdFR5cGUubW9kZWw7XHJcbiAgICBjb25zdCBpbnB1dFR5cGUgPSBkYy5nZXRUeXBlKCdpbnB1dCcpO1xyXG4gICAgY29uc3QgaW5wdXRNb2RlbCA9IGlucHV0VHlwZS5tb2RlbDtcclxuXHJcbiAgICBjb25zdCBwcmV2ZW50RGVmYXVsdENsaWNrID0gKCkgPT4ge1xyXG4gICAgICAgIHJldHVybiBkZWZhdWx0VHlwZS52aWV3LmV4dGVuZCh7XHJcbiAgICAgICAgICAgIGV2ZW50czoge1xyXG4gICAgICAgICAgICAgICAgJ21vdXNlZG93bic6ICdoYW5kbGVDbGljaycsXHJcbiAgICAgICAgICAgIH0sXHJcblxyXG4gICAgICAgICAgICBoYW5kbGVDbGljayhlKSB7XHJcbiAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG5cclxuICAgIC8vIFNFTEVDVFxyXG4gICAgZGMuYWRkVHlwZSgnc2VsZWN0Jywge1xyXG4gICAgICAgIGlzQ29tcG9uZW50OiBmdW5jdGlvbihlbCkge1xyXG4gICAgICAgICAgICBpZihlbC50YWdOYW1lID09PSAnU0VMRUNUJyl7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4ge3R5cGU6ICdzZWxlY3QnfTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZXh0ZW5kOiAnZGVmYXVsdCcsXHJcbiAgICAgICAgbW9kZWw6IHtcclxuICAgICAgICAgICAgZGVmYXVsdHM6IHtcclxuICAgICAgICAgICAgICAgIC4uLmlucHV0TW9kZWwucHJvdG90eXBlLmRlZmF1bHRzLFxyXG4gICAgICAgICAgICAgICAgJ2N1c3RvbS1uYW1lJzogY29uZmlnLmxhYmVscy5zZWxlY3QsXHJcbiAgICAgICAgICAgICAgICB0YWdOYW1lOiAnc2VsZWN0JyxcclxuICAgICAgICAgICAgICAgIHRyYWl0czogW1xyXG4gICAgICAgICAgICAgICAgICAgIHRyYWl0cy5uYW1lLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsOiBjb25maWcubGFiZWxzLnRyYWl0X29wdGlvbnMsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdzZWxlY3Qtb3B0aW9ucydcclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIHRyYWl0cy5yZXF1aXJlZFxyXG4gICAgICAgICAgICAgICAgXSxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICB9LFxyXG4gICAgICAgIHZpZXc6IHByZXZlbnREZWZhdWx0Q2xpY2soKSxcclxuICAgIH0pO1xyXG5cclxuICAgIGNvbnN0IHRyYWl0TWFuYWdlciA9IGVkaXRvci5UcmFpdE1hbmFnZXI7XHJcbiAgICB0cmFpdE1hbmFnZXIuYWRkVHlwZSgnc2VsZWN0LW9wdGlvbnMnLCB7XHJcbiAgICAgICAgZXZlbnRzOntcclxuICAgICAgICAgICAgJ2tleXVwJzogJ29uQ2hhbmdlJyxcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBvblZhbHVlQ2hhbmdlOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IG9wdGlvbnNTdHIgPSB0aGlzLm1vZGVsLmdldCgndmFsdWUnKS50cmltKCk7XHJcbiAgICAgICAgICAgIGNvbnN0IG9wdGlvbnMgPSBvcHRpb25zU3RyLnNwbGl0KCdcXG4nKTtcclxuICAgICAgICAgICAgY29uc3Qgb3B0Q29tcHMgPSBbXTtcclxuXHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgb3B0aW9ucy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgb3B0aW9uU3RyID0gb3B0aW9uc1tpXTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG9wdGlvbiA9IG9wdGlvblN0ci5zcGxpdChjb25maWcub3B0aW9uc1N0cmluZ1NlcGFyYXRvcik7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBvcHQgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGFnTmFtZTogJ29wdGlvbicsXHJcbiAgICAgICAgICAgICAgICAgICAgYXR0cmlidXRlczoge31cclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICBpZihvcHRpb25bMV0pIHtcclxuICAgICAgICAgICAgICAgICAgICBvcHQuY29udGVudCA9IG9wdGlvblsxXTtcclxuICAgICAgICAgICAgICAgICAgICBvcHQuYXR0cmlidXRlcy52YWx1ZSA9IG9wdGlvblswXTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgb3B0LmNvbnRlbnQgPSBvcHRpb25bMF07XHJcbiAgICAgICAgICAgICAgICAgICAgb3B0LmF0dHJpYnV0ZXMudmFsdWUgPSBvcHRpb25bMF07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBvcHRDb21wcy5wdXNoKG9wdCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGNvbnN0IGNvbXBzID0gdGhpcy50YXJnZXQuZ2V0KCdjb21wb25lbnRzJyk7XHJcbiAgICAgICAgICAgIGNvbXBzLnJlc2V0KG9wdENvbXBzKTtcclxuICAgICAgICAgICAgdGhpcy50YXJnZXQudmlldy5yZW5kZXIoKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBnZXRJbnB1dEVsOiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgaWYgKCF0aGlzLiRpbnB1dCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdGFyZ2V0ID0gdGhpcy50YXJnZXQ7XHJcbiAgICAgICAgICAgICAgICBsZXQgb3B0aW9uc1N0ciA9ICcnO1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHRhcmdldC5nZXQoJ2NvbXBvbmVudHMnKTtcclxuXHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG9wdGlvbnMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBvcHRpb24gPSBvcHRpb25zLm1vZGVsc1tpXTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBvcHRBdHRyID0gb3B0aW9uLmdldCgnYXR0cmlidXRlcycpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG9wdFZhbHVlID0gb3B0QXR0ci52YWx1ZSB8fCAnJztcclxuICAgICAgICAgICAgICAgICAgICBvcHRpb25zU3RyICs9IGAke29wdFZhbHVlfSR7Y29uZmlnLm9wdGlvbnNTdHJpbmdTZXBhcmF0b3J9JHtvcHRpb24uZ2V0KCdjb250ZW50Jyl9XFxuYDtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICB0aGlzLiRpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RleHRhcmVhJyk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLiRpbnB1dC52YWx1ZSA9IG9wdGlvbnNTdHI7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuJGlucHV0O1xyXG4gICAgICAgIH0sXHJcbiAgICB9KTtcclxufVxyXG4iLCJpbXBvcnQgZm9udEljb24gZnJvbSBcInJhdy1sb2FkZXIhLi4vaWNvbnMvZm9udC1zb2xpZC5zdmdcIjtcclxuXHJcbmV4cG9ydCBjb25zdCBUZXh0QmxvY2sgPSAoYm0sIGxhYmVsKSA9PiB7XHJcbiAgICBibS5hZGQoJ3RleHQnLCB7XHJcbiAgICAgICAgbGFiZWw6IGBcclxuICAgICAgICAgICAgJHtmb250SWNvbn1cclxuICAgICAgICAgICAgPGRpdj4ke2xhYmVsfTwvZGl2PlxyXG4gICAgICAgIGAsXHJcbiAgICAgICAgY2F0ZWdvcnk6ICdUeXBvZ3JhcGh5JyxcclxuICAgICAgICBjb250ZW50OiB7XHJcbiAgICAgICAgICAgIHR5cGU6J3RleHQnLFxyXG4gICAgICAgICAgICBjb250ZW50OiAnSW5zZXJ0IHlvdXIgdGV4dCBoZXJlJ1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgKGRvbWMpID0+IHtcclxuICAgIGNvbnN0IGRlZmF1bHRUeXBlID0gZG9tYy5nZXRUeXBlKCdkZWZhdWx0Jyk7XHJcbiAgICBjb25zdCBkZWZhdWx0TW9kZWwgPSBkZWZhdWx0VHlwZS5tb2RlbDtcclxuICAgIGNvbnN0IHRleHRUeXBlID0gZG9tYy5nZXRUeXBlKCd0ZXh0Jyk7XHJcbiAgICBjb25zdCB0ZXh0VmlldyA9IHRleHRUeXBlLnZpZXc7XHJcblxyXG4gICAgZG9tYy5hZGRUeXBlKCd0ZXh0Jywge1xyXG4gICAgICAgIC8qaXNDb21wb25lbnQoZWwpIHtcclxuICAgICAgICAgIGlmKGVsICYmIGVsLmRhdGFzZXQgJiYgZWwuZGF0YXNldC5ic1RleHQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHt0eXBlOiAndGV4dCd9O1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0qL1xyXG4gICAgICAgIGV4dGVuZDogJ2RlZmF1bHQnLFxyXG4gICAgICAgIG1vZGVsOiB7XHJcbiAgICAgICAgICAgIGRlZmF1bHRzOiBPYmplY3QuYXNzaWduKHt9LCBkZWZhdWx0TW9kZWwucHJvdG90eXBlLmRlZmF1bHRzLCB7XHJcbiAgICAgICAgICAgICAgICAnY3VzdG9tLW5hbWUnOiAnVGV4dCcsXHJcbiAgICAgICAgICAgICAgICB0YWdOYW1lOiAnZGl2JyxcclxuICAgICAgICAgICAgICAgIGRyb3BwYWJsZTogdHJ1ZSxcclxuICAgICAgICAgICAgICAgIGVkaXRhYmxlOiB0cnVlXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgfSxcclxuICAgICAgICBleHRlbmRWaWV3OiAndGV4dCcsXHJcbiAgICB9KTtcclxufVxyXG4iLCJpbXBvcnQgdGV4dGFyZWFJY29uIGZyb20gXCJyYXctbG9hZGVyIS4uL2ljb25zL3RleHRhcmVhLnN2Z1wiO1xyXG5cclxuZXhwb3J0IGNvbnN0IFRleHRhcmVhQmxvY2sgPSAoYm0sIGxhYmVsKSA9PiB7XHJcbiAgICBibS5hZGQoJ3RleHRhcmVhJywge1xyXG4gICAgICAgIGxhYmVsOiBgXHJcbiAgICAgICR7dGV4dGFyZWFJY29ufVxyXG4gICAgICA8ZGl2PiR7bGFiZWx9PC9kaXY+YCxcclxuICAgICAgICBjYXRlZ29yeTogJ0Zvcm1zJyxcclxuICAgICAgICBjb250ZW50OiAnPHRleHRhcmVhIG5hbWU9XCJ0ZXh0YXJlYTFcIiBjbGFzcz1cImZvcm0tY29udHJvbFwiPjwvdGV4dGFyZWE+JyxcclxuICAgIH0pO1xyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgKGRjLCB0cmFpdHMsIGNvbmZpZyA9IHt9KSA9PiB7XHJcbiAgICBjb25zdCBkZWZhdWx0VHlwZSA9IGRjLmdldFR5cGUoJ2RlZmF1bHQnKTtcclxuICAgIGNvbnN0IGRlZmF1bHRWaWV3ID0gZGVmYXVsdFR5cGUudmlldztcclxuICAgIGNvbnN0IGlucHV0VHlwZSA9IGRjLmdldFR5cGUoJ2lucHV0Jyk7XHJcbiAgICBjb25zdCBpbnB1dE1vZGVsID0gaW5wdXRUeXBlLm1vZGVsO1xyXG5cclxuICAgIC8vIFRFWFRBUkVBXHJcbiAgICBkYy5hZGRUeXBlKCd0ZXh0YXJlYScsIHtcclxuICAgICAgICBpc0NvbXBvbmVudDogZnVuY3Rpb24oZWwpIHtcclxuICAgICAgICAgICAgaWYoZWwudGFnTmFtZSA9PT0gJ1RFWFRBUkVBJyl7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4ge3R5cGU6ICd0ZXh0YXJlYSd9O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuICAgICAgICBleHRlbmQ6ICdpbnB1dCcsXHJcbiAgICAgICAgbW9kZWw6IHtcclxuICAgICAgICAgICAgZGVmYXVsdHM6IHtcclxuICAgICAgICAgICAgICAgIC4uLmlucHV0TW9kZWwucHJvdG90eXBlLmRlZmF1bHRzLFxyXG4gICAgICAgICAgICAgICAgJ2N1c3RvbS1uYW1lJzogY29uZmlnLmxhYmVscy50ZXh0YXJlYSxcclxuICAgICAgICAgICAgICAgIHRhZ05hbWU6ICd0ZXh0YXJlYScsXHJcbiAgICAgICAgICAgICAgICB0cmFpdHM6IFtcclxuICAgICAgICAgICAgICAgICAgICB0cmFpdHMubmFtZSxcclxuICAgICAgICAgICAgICAgICAgICB0cmFpdHMucGxhY2Vob2xkZXIsXHJcbiAgICAgICAgICAgICAgICAgICAgdHJhaXRzLnJlcXVpcmVkXHJcbiAgICAgICAgICAgICAgICBdXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgfSxcclxuICAgICAgICBleHRlbmRWaWV3OiAnZGVmYXVsdCcsXHJcbiAgICB9KTtcclxufVxyXG4iLCJpbXBvcnQgY29uc3RhbnRzIGZyb20gJy4vY29uc3RhbnRzJztcclxuaW1wb3J0IHsgZWxIYXNDbGFzcyB9IGZyb20gJy4uLy4uL3V0aWxzJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IChkYywgY29uZmlnID0ge30pID0+IHtcclxuICBjb25zdCBkZWZhdWx0VHlwZSA9IGRjLmdldFR5cGUoJ2RlZmF1bHQnKTtcclxuICBjb25zdCBkZWZhdWx0TW9kZWwgPSBkZWZhdWx0VHlwZS5tb2RlbDtcclxuICBjb25zdCBkZWZhdWx0VmlldyA9IGRlZmF1bHRUeXBlLnZpZXc7XHJcbiAgY29uc3QgeyB0YWJOYW1lLCBuYXZpZ2F0aW9uU2VsZWN0b3IgfSA9IGNvbnN0YW50cztcclxuICBjb25zdCBjbGFzc0lkID0gY29uZmlnLmNsYXNzVGFiO1xyXG4gIGNvbnN0IHR5cGUgPSB0YWJOYW1lO1xyXG5cclxuICBkYy5hZGRUeXBlKHR5cGUsIHtcclxuICAgIGlzQ29tcG9uZW50OiAoZWwpID0+IHtcclxuICAgICAgaWYgKGVsSGFzQ2xhc3MoZWwsIGNsYXNzSWQpKSByZXR1cm4geyB0eXBlIH07XHJcbiAgICB9LFxyXG4gICAgZXh0ZW5kOiAnZGVmYXVsdCcsXHJcbiAgICBtb2RlbDoge1xyXG4gICAgICBkZWZhdWx0czoge1xyXG4gICAgICAgIC4uLmRlZmF1bHRNb2RlbC5wcm90b3R5cGUuZGVmYXVsdHMsXHJcbiAgICAgICAgbmFtZTogJ1RhYicsXHJcbiAgICAgICAgdGFnTmFtZTogJ2xpJyxcclxuICAgICAgICBjb3B5YWJsZTogdHJ1ZSxcclxuICAgICAgICBkcmFnZ2FibGU6IG5hdmlnYXRpb25TZWxlY3RvcixcclxuXHJcbiAgICAgIH0sXHJcbiAgICAgIGluaXQoKSB7XHJcbiAgICAgICAgdGhpcy5nZXQoJ2NsYXNzZXMnKS5wbHVjaygnbmFtZScpLmluZGV4T2YoY2xhc3NJZCkgPCAwICYmIHRoaXMuYWRkQ2xhc3MoY2xhc3NJZCk7XHJcbiAgICAgIH1cclxuICAgIH0sXHJcbiAgICBleHRlbmRWaWV3OiAnZGVmYXVsdCcsXHJcbiAgICB2aWV3OiB7XHJcbiAgICAgIGluaXQoKSB7XHJcbiAgICAgICAgY29uc3QgY29tcHMgPSB0aGlzLm1vZGVsLmNvbXBvbmVudHMoKTtcclxuICAgICAgICAvLyBBZGQgYSBiYXNpYyB0ZW1wbGF0ZSBpZiBpdCdzIG5vdCB5ZXQgaW5pdGlhbGl6ZWRcclxuICAgICAgICBpZiAoIWNvbXBzLmxlbmd0aCkge1xyXG4gICAgICAgICAgY29tcHMuYWRkKGBcclxuICAgICAgICAgICAgICA8YSBjbGFzcz1cIm5hdi1saW5rIGFjdGl2ZVwiIGlkPVwidGFiLTFcIiBkYXRhLXRvZ2dsZT1cInRhYlwiIGhyZWY9XCIjdGFiLXBhbmUtMVwiIHJvbGU9XCJ0YWJcIiBhcmlhLWNvbnRyb2xzPVwidGFiXCIgYXJpYS1zZWxlY3RlZD1cInRydWVcIj5UYWI8L2E+XHJcbiAgICAgICAgICBgKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0sXHJcbiAgICB9LFxyXG4gIH0pO1xyXG59XHJcbiIsImltcG9ydCBjb25zdGFudHMgZnJvbSAnLi9jb25zdGFudHMnO1xyXG5pbXBvcnQgeyBlbEhhc0NsYXNzIH0gZnJvbSAnLi4vLi4vdXRpbHMnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgKGRjLCBjb25maWcgPSB7fSkgPT4ge1xyXG4gIGNvbnN0IGRlZmF1bHRUeXBlID0gZGMuZ2V0VHlwZSgnZGVmYXVsdCcpO1xyXG4gIGNvbnN0IGRlZmF1bHRNb2RlbCA9IGRlZmF1bHRUeXBlLm1vZGVsO1xyXG4gIGNvbnN0IGRlZmF1bHRWaWV3ID0gZGVmYXVsdFR5cGUudmlldztcclxuICBjb25zdCB7IHRhYlBhbmVOYW1lLCB0YWJQYW5lc1NlbGVjdG9yIH0gPSBjb25zdGFudHM7XHJcbiAgY29uc3QgY2xhc3NJZCA9IGNvbmZpZy5jbGFzc1RhYlBhbmU7XHJcbiAgY29uc3QgdHlwZSA9IHRhYlBhbmVOYW1lO1xyXG5cclxuICBkYy5hZGRUeXBlKHR5cGUsIHtcclxuICAgIGlzQ29tcG9uZW50OiAoZWwpID0+IHtcclxuICAgICAgaWYgKGVsSGFzQ2xhc3MoZWwsIGNsYXNzSWQpKSByZXR1cm4geyB0eXBlIH07XHJcbiAgICB9LFxyXG4gICAgZXh0ZW5kOiAnZGVmYXVsdCcsXHJcbiAgICBtb2RlbDoge1xyXG4gICAgICBkZWZhdWx0czoge1xyXG4gICAgICAgIC4uLmRlZmF1bHRNb2RlbC5wcm90b3R5cGUuZGVmYXVsdHMsXHJcbiAgICAgICAgbmFtZTogJ1RhYiBQYW5lJyxcclxuICAgICAgICBjb3B5YWJsZTogdHJ1ZSxcclxuICAgICAgICBkcmFnZ2FibGU6IHRhYlBhbmVzU2VsZWN0b3IsXHJcblxyXG4gICAgICAgIHRyYWl0czogW1xyXG4gICAgICAgICAgJ2lkJyxcclxuICAgICAgICAgIHtcclxuICAgICAgICAgICAgdHlwZTogJ2NsYXNzX3NlbGVjdCcsXHJcbiAgICAgICAgICAgIG9wdGlvbnM6IFtcclxuICAgICAgICAgICAgICB7dmFsdWU6ICdmYWRlJywgbmFtZTogJ0ZhZGUnfSxcclxuICAgICAgICAgICAgICB7dmFsdWU6ICcnLCBuYW1lOiAnTm9uZSd9LFxyXG4gICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICBsYWJlbDogJ0FuaW1hdGlvbicsXHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAge1xyXG4gICAgICAgICAgICB0eXBlOiAnY2xhc3Nfc2VsZWN0JyxcclxuICAgICAgICAgICAgb3B0aW9uczogW1xyXG4gICAgICAgICAgICAgIHt2YWx1ZTogJycsIG5hbWU6ICdJbmFjdGl2ZSd9LFxyXG4gICAgICAgICAgICAgIHt2YWx1ZTogJ2FjdGl2ZScsIG5hbWU6ICdBY3RpdmUnfSxcclxuICAgICAgICAgICAgXSxcclxuICAgICAgICAgICAgbGFiZWw6ICdJcyBBY3RpdmUnLFxyXG4gICAgICAgICAgfSxcclxuICAgICAgICBdLFxyXG4gICAgICB9LFxyXG4gICAgICBpbml0KCkge1xyXG4gICAgICAgIHRoaXMuZ2V0KCdjbGFzc2VzJykucGx1Y2soJ25hbWUnKS5pbmRleE9mKGNsYXNzSWQpIDwgMCAmJiB0aGlzLmFkZENsYXNzKGNsYXNzSWQpO1xyXG4gICAgICB9XHJcbiAgICB9LFxyXG4gICAgZXh0ZW5kVmlldzogJ2RlZmF1bHQnXHJcbiAgfSk7XHJcbn1cclxuIiwiaW1wb3J0IGNvbnN0YW50cyBmcm9tICcuL2NvbnN0YW50cyc7XHJcbmltcG9ydCB7IGVsSGFzQ2xhc3MgfSBmcm9tICcuLi8uLi91dGlscyc7XHJcbmltcG9ydCBlbGxpcHNpc0ljb24gZnJvbSBcInJhdy1sb2FkZXIhLi4vLi4vaWNvbnMvZWxsaXBzaXMtaC1zb2xpZC5zdmdcIjtcclxuaW1wb3J0IGNpcmNsZUljb24gZnJvbSBcInJhdy1sb2FkZXIhLi4vLi4vaWNvbnMvY2lyY2xlLXNvbGlkLnN2Z1wiO1xyXG5pbXBvcnQgd2luZG93SWNvbiBmcm9tIFwicmF3LWxvYWRlciEuLi8uLi9pY29ucy93aW5kb3ctbWF4aW1pemUtc29saWQuc3ZnXCI7XHJcblxyXG5leHBvcnQgY29uc3QgVGFic0Jsb2NrID0gKGJtLCBjKSA9PiB7XHJcbiAgICBibS5hZGQoJ3RhYnMnLCB7XHJcbiAgICAgICAgbGFiZWw6IGBcclxuICAgICAgICAgICAgJHtlbGxpcHNpc0ljb259XHJcbiAgICAgICAgICAgIDxkaXY+JHtjLmxhYmVscy50YWJzfTwvZGl2PlxyXG4gICAgICAgIGAsXHJcbiAgICAgICAgY2F0ZWdvcnk6ICdDb21wb25lbnRzJyxcclxuICAgICAgICBjb250ZW50OiBgXHJcbiAgICAgICAgICAgIDx1bCBjbGFzcz1cIm5hdiBuYXYtdGFic1wiIHJvbGU9XCJ0YWJsaXN0XCI+XHJcbiAgICAgICAgICAgICAgPGxpIGNsYXNzPVwibmF2LWl0ZW1cIj5cclxuICAgICAgICAgICAgICAgIDxhIGNsYXNzPVwibmF2LWxpbmsgYWN0aXZlXCIgaWQ9XCJob21lLXRhYlwiIGRhdGEtdG9nZ2xlPVwidGFiXCIgaHJlZj1cIiNob21lXCIgcm9sZT1cInRhYlwiIGFyaWEtY29udHJvbHM9XCJob21lXCIgYXJpYS1zZWxlY3RlZD1cInRydWVcIj5UYWIgMTwvYT5cclxuICAgICAgICAgICAgICA8L2xpPlxyXG4gICAgICAgICAgICAgIDxsaSBjbGFzcz1cIm5hdi1pdGVtXCI+XHJcbiAgICAgICAgICAgICAgICA8YSBjbGFzcz1cIm5hdi1saW5rXCIgaWQ9XCJwcm9maWxlLXRhYlwiIGRhdGEtdG9nZ2xlPVwidGFiXCIgaHJlZj1cIiNwcm9maWxlXCIgcm9sZT1cInRhYlwiIGFyaWEtY29udHJvbHM9XCJwcm9maWxlXCIgYXJpYS1zZWxlY3RlZD1cImZhbHNlXCI+VGFiIDI8L2E+XHJcbiAgICAgICAgICAgICAgPC9saT5cclxuICAgICAgICAgICAgICA8bGkgY2xhc3M9XCJuYXYtaXRlbVwiPlxyXG4gICAgICAgICAgICAgICAgPGEgY2xhc3M9XCJuYXYtbGlua1wiIGlkPVwiY29udGFjdC10YWJcIiBkYXRhLXRvZ2dsZT1cInRhYlwiIGhyZWY9XCIjY29udGFjdFwiIHJvbGU9XCJ0YWJcIiBhcmlhLWNvbnRyb2xzPVwiY29udGFjdFwiIGFyaWEtc2VsZWN0ZWQ9XCJmYWxzZVwiPlRhYiAzPC9hPlxyXG4gICAgICAgICAgICAgIDwvbGk+XHJcbiAgICAgICAgICAgIDwvdWw+XHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJ0YWItY29udGVudFwiPlxyXG4gICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJ0YWItcGFuZSBmYWRlIHNob3cgYWN0aXZlXCIgaWQ9XCJob21lXCIgcm9sZT1cInRhYnBhbmVsXCIgYXJpYS1sYWJlbGxlZGJ5PVwiaG9tZS10YWJcIj48L2Rpdj5cclxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwidGFiLXBhbmUgZmFkZVwiIGlkPVwicHJvZmlsZVwiIHJvbGU9XCJ0YWJwYW5lbFwiIGFyaWEtbGFiZWxsZWRieT1cInByb2ZpbGUtdGFiXCI+PC9kaXY+XHJcbiAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInRhYi1wYW5lIGZhZGVcIiBpZD1cImNvbnRhY3RcIiByb2xlPVwidGFicGFuZWxcIiBhcmlhLWxhYmVsbGVkYnk9XCJjb250YWN0LXRhYlwiPjwvZGl2PlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICBgXHJcbiAgICB9KTtcclxuICAgIGJtLmFkZCgndGFicy10YWInLCB7XHJcbiAgICAgICAgbGFiZWw6IGBcclxuICAgICAgICAgICAgJHtjaXJjbGVJY29ufVxyXG4gICAgICAgICAgICA8ZGl2PiR7Yy5sYWJlbHMudGFifTwvZGl2PlxyXG4gICAgICAgIGAsXHJcbiAgICAgICAgY2F0ZWdvcnk6ICdDb21wb25lbnRzJyxcclxuICAgICAgICBjb250ZW50OiB7XHJcbiAgICAgICAgICAgIHR5cGU6ICd0YWJzLXRhYicsXHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcbiAgICBibS5hZGQoJ3RhYnMtdGFiLXBhbmUnLCB7XHJcbiAgICAgICAgbGFiZWw6IGBcclxuICAgICAgICAgICAgJHt3aW5kb3dJY29ufVxyXG4gICAgICAgICAgICA8ZGl2PiR7Yy5sYWJlbHMudGFiUGFuZX08L2Rpdj5cclxuICAgICAgICBgLFxyXG4gICAgICAgIGNhdGVnb3J5OiAnQ29tcG9uZW50cycsXHJcbiAgICAgICAgY29udGVudDoge1xyXG4gICAgICAgICAgICB0eXBlOiAndGFicy10YWItcGFuZScsXHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCAoZGMsIGNvbmZpZyA9IHt9KSA9PiB7XHJcbiAgICBjb25zdCBkZWZhdWx0VHlwZSA9IGRjLmdldFR5cGUoJ2RlZmF1bHQnKTtcclxuICAgIGNvbnN0IGRlZmF1bHRNb2RlbCA9IGRlZmF1bHRUeXBlLm1vZGVsO1xyXG4gICAgY29uc3QgZGVmYXVsdFZpZXcgPSBkZWZhdWx0VHlwZS52aWV3O1xyXG4gICAgY29uc3QgeyBuYXZpZ2F0aW9uTmFtZSwgdGFiU2VsZWN0b3IgfSA9IGNvbnN0YW50cztcclxuICAgIGNvbnN0IGNsYXNzSWQgPSBjb25maWcuY2xhc3NOYXZpZ2F0aW9uO1xyXG4gICAgY29uc3QgdHlwZSA9IG5hdmlnYXRpb25OYW1lO1xyXG5cclxuICAgIGRjLmFkZFR5cGUodHlwZSwge1xyXG4gICAgICAgIGlzQ29tcG9uZW50OiAoZWwpID0+IHtcclxuICAgICAgICAgICAgaWYgKGVsSGFzQ2xhc3MoZWwsIGNsYXNzSWQpKSByZXR1cm4geyB0eXBlIH07XHJcbiAgICAgICAgfSxcclxuICAgICAgICBleHRlbmQ6ICdkZWZhdWx0JyxcclxuICAgICAgICBtb2RlbDoge1xyXG4gICAgICAgICAgICBkZWZhdWx0czoge1xyXG4gICAgICAgICAgICAgICAgLi4uZGVmYXVsdE1vZGVsLnByb3RvdHlwZS5kZWZhdWx0cyxcclxuICAgICAgICAgICAgICAgIG5hbWU6ICdUYWJzIE5hdmlnYXRpb24nLFxyXG4gICAgICAgICAgICAgICAgY29weWFibGU6IDAsXHJcbiAgICAgICAgICAgICAgICBkcmFnZ2FibGU6IHRydWUsXHJcbiAgICAgICAgICAgICAgICBkcm9wcGFibGU6IHRhYlNlbGVjdG9yLFxyXG5cclxuICAgICAgICAgICAgICAgIHRyYWl0czogW1xyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2NsYXNzX3NlbGVjdCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbnM6IFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt2YWx1ZTogJ25hdi10YWJzJywgbmFtZTogJ1RhYnMnfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt2YWx1ZTogJ25hdi1waWxscycsIG5hbWU6ICdQaWxscyd9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsYWJlbDogJ1R5cGUnLFxyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnY2xhc3Nfc2VsZWN0JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9uczogW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge3ZhbHVlOiAnJywgbmFtZTogJ0xlZnQnfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt2YWx1ZTogJ25hdi1maWxsJywgbmFtZTogJ0ZpbGwnfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt2YWx1ZTogJ25hdi1qdXN0aWZpZWQnLCBuYW1lOiAnSnVzdGlmeSd9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsYWJlbDogJ0xheW91dCcsXHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgIH0sXHJcblxyXG4gICAgICAgICAgICBpbml0KCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5nZXQoJ2NsYXNzZXMnKS5wbHVjaygnbmFtZScpLmluZGV4T2YoY2xhc3NJZCkgPCAwICYmIHRoaXMuYWRkQ2xhc3MoY2xhc3NJZCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG4gICAgICAgIGV4dGVuZFZpZXc6ICdkZWZhdWx0JyxcclxuICAgICAgICB2aWV3OiB7XHJcbiAgICAgICAgICAgIGluaXQoKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBwcm9wcyA9IFtcclxuICAgICAgICAgICAgICAgICAgICAndHlwZScsXHJcbiAgICAgICAgICAgICAgICAgICAgJ2xheW91dCcsXHJcbiAgICAgICAgICAgICAgICBdO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgcmVhY3RUbyA9IHByb3BzLm1hcChwcm9wID0+IGBjaGFuZ2U6JHtwcm9wfWApLmpvaW4oJyAnKTtcclxuICAgICAgICAgICAgICAgIHRoaXMubGlzdGVuVG8odGhpcy5tb2RlbCwgcmVhY3RUbywgdGhpcy5yZW5kZXIpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgY29tcHMgPSB0aGlzLm1vZGVsLmNvbXBvbmVudHMoKTtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBBZGQgYSBiYXNpYyB0ZW1wbGF0ZSBpZiBpdCdzIG5vdCB5ZXQgaW5pdGlhbGl6ZWRcclxuICAgICAgICAgICAgICAgIGlmICghY29tcHMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29tcHMuYWRkKGBcclxuICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPVwibmF2IG5hdi10YWJzXCIgcm9sZT1cInRhYmxpc3RcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9XCJuYXYtaXRlbVwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9XCJuYXYtbGluayBhY3RpdmVcIiBpZD1cImhvbWUtdGFiXCIgZGF0YS10b2dnbGU9XCJ0YWJcIiBocmVmPVwiI2hvbWVcIiByb2xlPVwidGFiXCIgYXJpYS1jb250cm9scz1cImhvbWVcIiBhcmlhLXNlbGVjdGVkPVwidHJ1ZVwiPlRhYiAxPC9hPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPVwibmF2LWl0ZW1cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPVwibmF2LWxpbmtcIiBpZD1cInByb2ZpbGUtdGFiXCIgZGF0YS10b2dnbGU9XCJ0YWJcIiBocmVmPVwiI3Byb2ZpbGVcIiByb2xlPVwidGFiXCIgYXJpYS1jb250cm9scz1cInByb2ZpbGVcIiBhcmlhLXNlbGVjdGVkPVwiZmFsc2VcIj5UYWIgMjwvYT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz1cIm5hdi1pdGVtXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz1cIm5hdi1saW5rXCIgaWQ9XCJjb250YWN0LXRhYlwiIGRhdGEtdG9nZ2xlPVwidGFiXCIgaHJlZj1cIiNjb250YWN0XCIgcm9sZT1cInRhYlwiIGFyaWEtY29udHJvbHM9XCJjb250YWN0XCIgYXJpYS1zZWxlY3RlZD1cImZhbHNlXCI+VGFiIDM8L2E+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC91bD5cclxuICAgICAgICAgICAgICAgICAgICBgKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICB9LFxyXG4gICAgfSk7XHJcbn1cclxuIiwiaW1wb3J0IGNvbnN0YW50cyBmcm9tICcuL2NvbnN0YW50cyc7XHJcbmltcG9ydCB7IGVsSGFzQ2xhc3MgfSBmcm9tICcuLi8uLi91dGlscyc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCAoZGMsIGNvbmZpZyA9IHt9KSA9PiB7XHJcbiAgICBjb25zdCBkZWZhdWx0VHlwZSA9IGRjLmdldFR5cGUoJ2RlZmF1bHQnKTtcclxuICAgIGNvbnN0IGRlZmF1bHRNb2RlbCA9IGRlZmF1bHRUeXBlLm1vZGVsO1xyXG4gICAgY29uc3QgZGVmYXVsdFZpZXcgPSBkZWZhdWx0VHlwZS52aWV3O1xyXG4gICAgY29uc3QgeyB0YWJQYW5lc05hbWUsIHRhYlBhbmVTZWxlY3RvciB9ID0gY29uc3RhbnRzO1xyXG4gICAgY29uc3QgY2xhc3NJZCA9IGNvbmZpZy5jbGFzc1RhYlBhbmVzO1xyXG4gICAgY29uc3QgdHlwZSA9IHRhYlBhbmVzTmFtZTtcclxuXHJcbiAgICBkYy5hZGRUeXBlKHR5cGUsIHtcclxuICAgICAgICBpc0NvbXBvbmVudDogKGVsKSA9PiB7XHJcbiAgICAgICAgICAgIGlmIChlbEhhc0NsYXNzKGVsLCBjbGFzc0lkKSkgcmV0dXJuIHsgdHlwZSB9O1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZXh0ZW5kOiAnZGVmYXVsdCcsXHJcbiAgICAgICAgbW9kZWw6IHtcclxuICAgICAgICAgICAgZGVmYXVsdHM6IHtcclxuICAgICAgICAgICAgICAgIC4uLmRlZmF1bHRNb2RlbC5wcm90b3R5cGUuZGVmYXVsdHMsXHJcbiAgICAgICAgICAgICAgICBuYW1lOiAnVGFicyBQYW5lcycsXHJcbiAgICAgICAgICAgICAgICBjb3B5YWJsZTogMCxcclxuICAgICAgICAgICAgICAgIGRyYWdnYWJsZTogdHJ1ZSxcclxuICAgICAgICAgICAgICAgIGRyb3BwYWJsZTogdGFiUGFuZVNlbGVjdG9yLFxyXG4gICAgICAgICAgICB9LFxyXG5cclxuICAgICAgICAgICAgaW5pdCgpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZ2V0KCdjbGFzc2VzJykucGx1Y2soJ25hbWUnKS5pbmRleE9mKGNsYXNzSWQpIDwgMCAmJiB0aGlzLmFkZENsYXNzKGNsYXNzSWQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuICAgICAgICBleHRlbmRWaWV3OiAnZGVmYXVsdCcsXHJcbiAgICAgICAgdmlldzoge1xyXG4gICAgICAgICAgICBpbml0KCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgY29tcHMgPSB0aGlzLm1vZGVsLmNvbXBvbmVudHMoKTtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBBZGQgYSBiYXNpYyB0ZW1wbGF0ZSBpZiBpdCdzIG5vdCB5ZXQgaW5pdGlhbGl6ZWRcclxuICAgICAgICAgICAgICAgIGlmICghY29tcHMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29tcHMuYWRkKGBcclxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInRhYi1jb250ZW50XCIgaWQ9XCJteVRhYkNvbnRlbnRcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwidGFiLXBhbmUgZmFkZSBzaG93IGFjdGl2ZVwiIGlkPVwiaG9tZVwiIHJvbGU9XCJ0YWJwYW5lbFwiIGFyaWEtbGFiZWxsZWRieT1cImhvbWUtdGFiXCI+VGFiIHBhbmUgMTwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJ0YWItcGFuZSBmYWRlXCIgaWQ9XCJwcm9maWxlXCIgcm9sZT1cInRhYnBhbmVsXCIgYXJpYS1sYWJlbGxlZGJ5PVwicHJvZmlsZS10YWJcIj5UYWIgcGFuZSAyPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInRhYi1wYW5lIGZhZGVcIiBpZD1cImNvbnRhY3RcIiByb2xlPVwidGFicGFuZWxcIiBhcmlhLWxhYmVsbGVkYnk9XCJjb250YWN0LXRhYlwiPlRhYiBwYW5lIDM8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgYCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgfSxcclxuICAgIH0pO1xyXG59XHJcbiIsImNvbnN0IHByZWZpeCA9ICd0YWJzLSc7XHJcbmNvbnN0IGNvbnRhaW5lck5hbWUgPSBgJHtwcmVmaXh9Y29udGFpbmVyYDtcclxuY29uc3QgbmF2aWdhdGlvbk5hbWUgPSBgJHtwcmVmaXh9bmF2aWdhdGlvbmA7XHJcbmNvbnN0IHRhYlBhbmVzTmFtZSA9IGAke3ByZWZpeH1wYW5lc2A7XHJcbmNvbnN0IHRhYk5hbWUgPSBgJHtwcmVmaXh9dGFiYDtcclxuY29uc3QgdGFiUGFuZU5hbWUgPSBgJHtwcmVmaXh9dGFiLXBhbmVgO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQge1xyXG4gIG5hdmlnYXRpb25OYW1lLFxyXG4gIHRhYlBhbmVzTmFtZSxcclxuICB0YWJOYW1lLFxyXG4gIHRhYlBhbmVOYW1lLFxyXG5cclxuICAvLyBTZWxlY3RvcnNcclxuICBuYXZpZ2F0aW9uU2VsZWN0b3I6IGBbZGF0YS1nanMtdHlwZT1cIiR7bmF2aWdhdGlvbk5hbWV9XCJdYCxcclxuICB0YWJQYW5lc1NlbGVjdG9yOiBgW2RhdGEtZ2pzLXR5cGU9XCIke3RhYlBhbmVzTmFtZX1cIl1gLFxyXG4gIHRhYlNlbGVjdG9yOiBgW2RhdGEtZ2pzLXR5cGU9XCIke3RhYk5hbWV9XCJdYCxcclxuICB0YWJQYW5lU2VsZWN0b3I6IGBbZGF0YS1nanMtdHlwZT1cIiR7dGFiUGFuZU5hbWV9XCJdYCxcclxuXHJcbiAgLy8gSURzXHJcbiAgY29udGFpbmVySWQ6IGBkYXRhLSR7Y29udGFpbmVyTmFtZX1gLFxyXG4gIG5hdmlnYXRpb25JZDogYGRhdGEtJHtuYXZpZ2F0aW9uTmFtZX1gLFxyXG4gIHRhYlBhbmVzSWQ6IGBkYXRhLSR7dGFiUGFuZXNOYW1lfWAsXHJcbiAgdGFiSWQ6IGBkYXRhLSR7dGFiTmFtZX1gLFxyXG4gIHRhYlBhbmVJZDogYGRhdGEtJHt0YWJQYW5lTmFtZX1gLFxyXG59XHJcbiIsImV4cG9ydCBkZWZhdWx0IChkb21Db21wb25lbnQpID0+IHtcclxuICAgIGNvbnN0IHNyY19kZWZhdWx0ID0gJ2h0dHBzOi8vZG93bmxvYWQuYmxlbmRlci5vcmcvcGVhY2gvYmlnYnVja2J1bm55X21vdmllcy9CaWdCdWNrQnVubnlfMzIweDE4MC5tcDQnO1xyXG4gICAgY29uc3QgZGVmYXVsdFR5cGUgPSBkb21Db21wb25lbnQuZ2V0VHlwZSgnZGVmYXVsdCcpO1xyXG4gICAgY29uc3QgbW9kZWwgPSBkZWZhdWx0VHlwZS5tb2RlbDtcclxuICAgIGNvbnN0IHZpZXcgPSBkZWZhdWx0VHlwZS52aWV3O1xyXG4gICAgY29uc3QgdHlwZSA9ICdicy12aWRlbyc7XHJcblxyXG4gICAgZG9tQ29tcG9uZW50LmFkZFR5cGUodHlwZSwge1xyXG4gICAgICAgIGlzQ29tcG9uZW50OiBmdW5jdGlvbihlbCkge1xyXG4gICAgICAgICAgICBpZihlbCAmJiBlbC5jbGFzc05hbWUgPT09ICdlbWJlZC1yZXNwb25zaXZlJykge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHt0eXBlOiB0eXBlfTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZXh0ZW5kOiAnZGVmYXVsdCcsXHJcbiAgICAgICAgbW9kZWw6IHtcclxuICAgICAgICAgICAgZGVmYXVsdHM6IE9iamVjdC5hc3NpZ24oe30sIG1vZGVsLnByb3RvdHlwZS5kZWZhdWx0cywge1xyXG4gICAgICAgICAgICAgICAgJ2N1c3RvbS1uYW1lJzogJ0VtYmVkJyxcclxuICAgICAgICAgICAgICAgIHRhZ05hbWU6ICdkaXYnLFxyXG4gICAgICAgICAgICAgICAgcmVzaXphYmxlOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgIGRyb3BwYWJsZTogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICBjbGFzc2VzOiBbJ2VtYmVkLXJlc3BvbnNpdmUnLCAnZW1iZWQtcmVzcG9uc2l2ZS0xNmJ5OSddLFxyXG4gICAgICAgICAgICAgICAgdHJhaXRzOiBbXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnY2xhc3Nfc2VsZWN0JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9uczogW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge3ZhbHVlOiAnZW1iZWQtcmVzcG9uc2l2ZS0yMWJ5OScsIG5hbWU6ICcyMTo5J30sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7dmFsdWU6ICdlbWJlZC1yZXNwb25zaXZlLTE2Ynk5JywgbmFtZTogJzE2OjknfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt2YWx1ZTogJ2VtYmVkLXJlc3BvbnNpdmUtNGJ5MycsIG5hbWU6ICc0OjMnfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt2YWx1ZTogJ2VtYmVkLXJlc3BvbnNpdmUtMWJ5MScsIG5hbWU6ICcxOjEnfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWw6ICdBc3BlY3QgUmF0aW8nLFxyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBdLmNvbmNhdChtb2RlbC5wcm90b3R5cGUuZGVmYXVsdHMudHJhaXRzKVxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZXh0ZW5kVmlldzogJ2RlZmF1bHQnLFxyXG4gICAgICAgIHZpZXc6IHtcclxuICAgICAgICAgICAgaW5pdCgpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHByb3BzID0gW1xyXG4gICAgICAgICAgICAgICAgICAgICdBc3BlY3QgUmF0aW8nLFxyXG4gICAgICAgICAgICAgICAgXTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHJlYWN0VG8gPSBwcm9wcy5tYXAocHJvcCA9PiBgY2hhbmdlOiR7cHJvcH1gKS5qb2luKCcgJyk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmxpc3RlblRvKHRoaXMubW9kZWwsIHJlYWN0VG8sIHRoaXMucmVuZGVyKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGNvbXBzID0gdGhpcy5tb2RlbC5jb21wb25lbnRzKCk7XHJcbiAgICAgICAgICAgICAgICAvLyBBZGQgYSBiYXNpYyB0ZW1wbGF0ZSBpZiBpdCdzIG5vdCB5ZXQgaW5pdGlhbGl6ZWRcclxuICAgICAgICAgICAgICAgIGlmICghY29tcHMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29tcHMuYWRkKGA8aWZyYW1lIGNsYXNzPVwiZW1iZWQtcmVzcG9uc2l2ZS1pdGVtXCIgc3JjPVwiJHtzcmNfZGVmYXVsdH1cIj48L2lmcmFtZT5gKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICB9LFxyXG4gICAgfSk7XHJcbn1cclxuIiwiaW1wb3J0IHZpZGVvSWNvbiBmcm9tIFwicmF3LWxvYWRlciEuLi8uLi9pY29ucy95b3V0dWJlLWJyYW5kcy5zdmdcIjtcclxuXHJcbmV4cG9ydCBjb25zdCBWaWRlb0Jsb2NrID0gKGJtLCBsYWJlbCkgPT4ge1xyXG4gICAgYm0uYWRkKCdicy12aWRlbycsIHtcclxuICAgICAgICBsYWJlbDogYFxyXG4gICAgICAgICAgICAke3ZpZGVvSWNvbn1cclxuICAgICAgICAgICAgPGRpdj4ke2xhYmVsfTwvZGl2PlxyXG4gICAgICAgIGAsXHJcbiAgICAgICAgY2F0ZWdvcnk6ICdNZWRpYScsXHJcbiAgICAgICAgY29udGVudDoge1xyXG4gICAgICAgICAgICB0eXBlOiAnYnMtdmlkZW8nXHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCAoZG9tQ29tcG9uZW50KSA9PiB7XHJcbiAgICBjb25zdCB2aWRlb1R5cGUgPSBkb21Db21wb25lbnQuZ2V0VHlwZSgndmlkZW8nKTtcclxuICAgIGNvbnN0IG1vZGVsID0gdmlkZW9UeXBlLm1vZGVsO1xyXG4gICAgY29uc3QgdmlldyA9IHZpZGVvVHlwZS52aWV3O1xyXG4gICAgY29uc3QgdHlwZSA9ICdicy1lbWJlZC1yZXNwb25zaXZlJztcclxuXHJcbiAgICBkb21Db21wb25lbnQuYWRkVHlwZSh0eXBlLCB7XHJcbiAgICAgICAgaXNDb21wb25lbnQ6IGZ1bmN0aW9uKGVsKSB7XHJcbiAgICAgICAgICAgIGlmKGVsICYmIGVsLmNsYXNzTmFtZSA9PT0gJ2VtYmVkLXJlc3BvbnNpdmUtaXRlbScpIHtcclxuICAgICAgICAgICAgICAgIHZhciByZXN1bHQgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcHJvdmlkZXI6ICdzbycsXHJcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogdHlwZVxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIHZhciBpc1l0UHJvdiA9IC95b3V0dWJlXFwuY29tXFwvZW1iZWQvLnRlc3QoZWwuc3JjKTtcclxuICAgICAgICAgICAgICAgIHZhciBpc1l0bmNQcm92ID0gL3lvdXR1YmUtbm9jb29raWVcXC5jb21cXC9lbWJlZC8udGVzdChlbC5zcmMpO1xyXG4gICAgICAgICAgICAgICAgdmFyIGlzVmlQcm92ID0gL3BsYXllclxcLnZpbWVvXFwuY29tXFwvdmlkZW8vLnRlc3QoZWwuc3JjKTtcclxuICAgICAgICAgICAgICAgIHZhciBpc0V4dFByb3YgPSBpc1l0UHJvdiB8fCBpc1l0bmNQcm92IHx8IGlzVmlQcm92O1xyXG4gICAgICAgICAgICAgICAgaWYgKGVsLnRhZ05hbWUgPT0gJ1ZJREVPJyB8fCAoZWwudGFnTmFtZSA9PSAnSUZSQU1FJyAmJiBpc0V4dFByb3YpKSB7XHJcbiAgICAgICAgICAgICAgICAgIGlmIChlbC5zcmMpIHJlc3VsdC5zcmMgPSBlbC5zcmM7XHJcbiAgICAgICAgICAgICAgICAgIGlmIChpc0V4dFByb3YpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoaXNZdFByb3YpIHJlc3VsdC5wcm92aWRlciA9ICd5dCc7XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoaXNZdG5jUHJvdikgcmVzdWx0LnByb3ZpZGVyID0gJ3l0bmMnO1xyXG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKGlzVmlQcm92KSByZXN1bHQucHJvdmlkZXIgPSAndmknO1xyXG4gICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG5cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZXh0ZW5kOiAndmlkZW8nLFxyXG4gICAgICAgIG1vZGVsOntcclxuICAgICAgICAgICAgZGVmYXVsdHM6IE9iamVjdC5hc3NpZ24oe30sIG1vZGVsLnByb3RvdHlwZS5kZWZhdWx0cywge1xyXG4gICAgICAgICAgICAgICAgJ2N1c3RvbS1uYW1lJzogJ1ZpZGVvJyxcclxuICAgICAgICAgICAgICAgIHJlc2l6YWJsZTogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICBkcm9wcGFibGU6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgZHJhZ2dhYmxlOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgIGNvcHlhYmxlOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgIHByb3ZpZGVyOiAnc28nLFxyXG4gICAgICAgICAgICAgICAgY2xhc3NlczogWydlbWJlZC1yZXNwb25zaXZlLWl0ZW0nXSxcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICB9LFxyXG4gICAgICAgIGV4dGVuZFZpZXc6ICd2aWRlbycsXHJcbiAgICB9KTtcclxufVxyXG4iLCJleHBvcnQgZGVmYXVsdCAoZWRpdG9yLCBjb25maWcgPSB7fSkgPT4ge1xyXG4gIGNvbnN0IGMgPSBjb25maWc7XHJcbiAgY29uc3QgZGV2aWNlTWFuYWdlciA9IGVkaXRvci5EZXZpY2VNYW5hZ2VyO1xyXG4gIGlmKGMuZ3JpZERldmljZXMpIHtcclxuICAgIGRldmljZU1hbmFnZXIuYWRkKCdFeHRyYSBTbWFsbCcsICc1NzVweCcpO1xyXG4gICAgZGV2aWNlTWFuYWdlci5hZGQoJ1NtYWxsJywgJzc2N3B4Jyk7XHJcbiAgICBkZXZpY2VNYW5hZ2VyLmFkZCgnTWVkaXVtJywgJzk5MXB4Jyk7XHJcbiAgICBkZXZpY2VNYW5hZ2VyLmFkZCgnTGFyZ2UnLCAnMTE5OXB4Jyk7XHJcbiAgICBkZXZpY2VNYW5hZ2VyLmFkZCgnRXh0cmEgTGFyZ2UnKTtcclxuXHJcblxyXG4gICAgaWYoYy5ncmlkRGV2aWNlc1BhbmVsKSB7XHJcbiAgICAgIGNvbnN0IHBhbmVscyA9IGVkaXRvci5QYW5lbHM7XHJcbiAgICAgIGNvbnN0IGNvbW1hbmRzID0gZWRpdG9yLkNvbW1hbmRzO1xyXG4gICAgICB2YXIgcGFuZWxEZXZpY2VzID0gcGFuZWxzLmFkZFBhbmVsKHtpZDogJ2RldmljZXMtYnV0dG9ucyd9KTtcclxuICAgICAgdmFyIGRldmljZUJ0bnMgPSBwYW5lbERldmljZXMuZ2V0KCdidXR0b25zJyk7XHJcbiAgICAgIGRldmljZUJ0bnMuYWRkKFt7XHJcbiAgICAgICAgaWQ6ICdkZXZpY2VYbCcsXHJcbiAgICAgICAgY29tbWFuZDogJ3NldC1kZXZpY2UteGwnLFxyXG4gICAgICAgIGNsYXNzTmFtZTogJ2ZhIGZhLWRlc2t0b3AnLFxyXG4gICAgICAgIHRleHQ6ICdYTCcsXHJcbiAgICAgICAgYXR0cmlidXRlczogeyd0aXRsZSc6ICdFeHRyYSBMYXJnZSd9LFxyXG4gICAgICAgIGFjdGl2ZTogMVxyXG4gICAgICB9LHtcclxuICAgICAgICBpZDogJ2RldmljZUxnJyxcclxuICAgICAgICBjb21tYW5kOiAnc2V0LWRldmljZS1sZycsXHJcbiAgICAgICAgY2xhc3NOYW1lOiAnZmEgZmEtZGVza3RvcCcsXHJcbiAgICAgICAgYXR0cmlidXRlczogeyd0aXRsZSc6ICdMYXJnZSd9XHJcbiAgICAgIH0se1xyXG4gICAgICAgIGlkOiAnZGV2aWNlTWQnLFxyXG4gICAgICAgIGNvbW1hbmQ6ICdzZXQtZGV2aWNlLW1kJyxcclxuICAgICAgICBjbGFzc05hbWU6ICdmYSBmYS10YWJsZXQnLFxyXG4gICAgICAgIGF0dHJpYnV0ZXM6IHsndGl0bGUnOiAnTWVkaXVtJ31cclxuICAgICAgfSx7XHJcbiAgICAgICAgaWQ6ICdkZXZpY2VTbScsXHJcbiAgICAgICAgY29tbWFuZDogJ3NldC1kZXZpY2Utc20nLFxyXG4gICAgICAgIGNsYXNzTmFtZTogJ2ZhIGZhLW1vYmlsZScsXHJcbiAgICAgICAgYXR0cmlidXRlczogeyd0aXRsZSc6ICdTbWFsbCd9XHJcbiAgICAgIH0se1xyXG4gICAgICAgIGlkOiAnZGV2aWNlWHMnLFxyXG4gICAgICAgIGNvbW1hbmQ6ICdzZXQtZGV2aWNlLXhzJyxcclxuICAgICAgICBjbGFzc05hbWU6ICdmYSBmYS1tb2JpbGUnLFxyXG4gICAgICAgIGF0dHJpYnV0ZXM6IHsndGl0bGUnOiAnRXh0cmEgU21hbGwnfVxyXG4gICAgICB9XSk7XHJcblxyXG4gICAgICBjb21tYW5kcy5hZGQoJ3NldC1kZXZpY2UteHMnLCB7XHJcbiAgICAgICAgcnVuOiBmdW5jdGlvbihlZGl0b3IpIHtcclxuICAgICAgICAgIGVkaXRvci5zZXREZXZpY2UoJ0V4dHJhIFNtYWxsJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgICAgY29tbWFuZHMuYWRkKCdzZXQtZGV2aWNlLXNtJywge1xyXG4gICAgICAgIHJ1bjogZnVuY3Rpb24oZWRpdG9yKSB7XHJcbiAgICAgICAgICBlZGl0b3Iuc2V0RGV2aWNlKCdTbWFsbCcpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICAgIGNvbW1hbmRzLmFkZCgnc2V0LWRldmljZS1tZCcsIHtcclxuICAgICAgICBydW46IGZ1bmN0aW9uKGVkaXRvcikge1xyXG4gICAgICAgICAgZWRpdG9yLnNldERldmljZSgnTWVkaXVtJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgICAgY29tbWFuZHMuYWRkKCdzZXQtZGV2aWNlLWxnJywge1xyXG4gICAgICAgIHJ1bjogZnVuY3Rpb24oZWRpdG9yKSB7XHJcbiAgICAgICAgICBlZGl0b3Iuc2V0RGV2aWNlKCdMYXJnZScpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICAgIGNvbW1hbmRzLmFkZCgnc2V0LWRldmljZS14bCcsIHtcclxuICAgICAgICBydW46IGZ1bmN0aW9uKGVkaXRvcikge1xyXG4gICAgICAgICAgZWRpdG9yLnNldERldmljZSgnRXh0cmEgTGFyZ2UnKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgfVxyXG59XHJcbiIsImV4cG9ydCBkZWZhdWx0IChlZGl0b3IsIGNvbmZpZyA9IHt9KSA9PiB7XHJcblxyXG4gICAgY29uc3QgdG0gPSBlZGl0b3IuVHJhaXRNYW5hZ2VyO1xyXG5cclxuICAgIC8vIFNlbGVjdCB0cmFpdCB0aGF0IG1hcHMgYSBjbGFzcyBsaXN0IHRvIHRoZSBzZWxlY3Qgb3B0aW9ucy5cclxuICAgIC8vIFRoZSBkZWZhdWx0IHNlbGVjdCBvcHRpb24gaXMgc2V0IGlmIHRoZSBpbnB1dCBoYXMgYSBjbGFzcywgYW5kIGNsYXNzIGxpc3QgaXMgbW9kaWZpZWQgd2hlbiBzZWxlY3QgdmFsdWUgY2hhbmdlcy5cclxuICAgIHRtLmFkZFR5cGUoJ2NsYXNzX3NlbGVjdCcsIHtcclxuICAgICAgICBldmVudHM6IHtcclxuICAgICAgICAgICAgJ2NoYW5nZSc6ICdvbkNoYW5nZScgIC8vIHRyaWdnZXIgcGFyZW50IG9uQ2hhbmdlIG1ldGhvZCBvbiBpbnB1dCBjaGFuZ2VcclxuICAgICAgICB9LFxyXG4gICAgICAgIGNyZWF0ZUlucHV0KHt0cmFpdH0pIHtcclxuICAgICAgICAgICAgY29uc3QgbWQgPSB0aGlzLm1vZGVsO1xyXG4gICAgICAgICAgICBjb25zdCBvcHRzID0gbWQuZ2V0KCdvcHRpb25zJykgfHwgW107XHJcbiAgICAgICAgICAgIGNvbnN0IGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2VsZWN0Jyk7XHJcbiAgICAgICAgICAgIGNvbnN0IHRhcmdldF92aWV3X2VsID0gdGhpcy50YXJnZXQudmlldy5lbDtcclxuXHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgb3B0cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgb3B0aW9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnb3B0aW9uJyk7XHJcbiAgICAgICAgICAgICAgICBsZXQgdmFsdWUgPSBvcHRzW2ldLnZhbHVlO1xyXG4gICAgICAgICAgICAgICAgaWYgKHZhbHVlID09PSAnJykge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlID0gJ0dKU19OT19DTEFTUyc7XHJcbiAgICAgICAgICAgICAgICB9IC8vICdHSlNfTk9fQ0xBU1MnIHJlcHJlc2VudHMgbm8gY2xhc3MtLWVtcHR5IHN0cmluZyBkb2VzIG5vdCB0cmlnZ2VyIHZhbHVlIGNoYW5nZVxyXG4gICAgICAgICAgICAgICAgb3B0aW9uLnRleHQgPSBvcHRzW2ldLm5hbWU7XHJcbiAgICAgICAgICAgICAgICBvcHRpb24udmFsdWUgPSB2YWx1ZTtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBDb252ZXJ0IHRoZSBUb2tlbiBMaXN0IHRvIGFuIEFycmF5XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjc3MgPSBBcnJheS5mcm9tKHRhcmdldF92aWV3X2VsLmNsYXNzTGlzdCk7XHJcblxyXG4gICAgICAgICAgICAgICAgY29uc3QgdmFsdWVfYSA9IHZhbHVlLnNwbGl0KCcgJyk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBpbnRlcnNlY3Rpb24gPSBjc3MuZmlsdGVyKHggPT4gdmFsdWVfYS5pbmNsdWRlcyh4KSk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYoaW50ZXJzZWN0aW9uLmxlbmd0aCA9PT0gdmFsdWVfYS5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgICAgICBvcHRpb24uc2V0QXR0cmlidXRlKCdzZWxlY3RlZCcsICdzZWxlY3RlZCcpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlucHV0LmFwcGVuZChvcHRpb24pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBpbnB1dDtcclxuICAgICAgICB9LFxyXG4gICAgICAgIG9uVXBkYXRlKHtlbElucHV0LCBjb21wb25lbnR9KSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGNsYXNzZXMgPSBjb21wb25lbnQuZ2V0Q2xhc3NlcygpO1xyXG4gICAgICAgICAgICBjb25zdCBvcHRzID0gdGhpcy5tb2RlbC5nZXQoJ29wdGlvbnMnKSB8fCBbXTtcclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBvcHRzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgdmFsdWUgPSBvcHRzW2ldLnZhbHVlO1xyXG4gICAgICAgICAgICAgICAgaWYgKHZhbHVlICYmIGNsYXNzZXMuaW5jbHVkZXModmFsdWUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZWxJbnB1dC52YWx1ZSA9IHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbElucHV0LnZhbHVlID0gXCJHSlNfTk9fQ0xBU1NcIjtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBvbkV2ZW50KHtlbElucHV0LCBjb21wb25lbnQsIGV2ZW50fSkge1xyXG4gICAgICAgICAgICBjb25zdCBjbGFzc2VzID0gdGhpcy5tb2RlbC5nZXQoJ29wdGlvbnMnKS5tYXAob3B0ID0+IG9wdC52YWx1ZSk7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY2xhc3Nlcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgaWYgKGNsYXNzZXNbaV0ubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNsYXNzZXNfaV9hID0gY2xhc3Nlc1tpXS5zcGxpdCgnICcpO1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgY2xhc3Nlc19pX2EubGVuZ3RoOyBqKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNsYXNzZXNfaV9hW2pdLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbXBvbmVudC5yZW1vdmVDbGFzcyhjbGFzc2VzX2lfYVtqXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY29uc3QgdmFsdWUgPSB0aGlzLm1vZGVsLmdldCgndmFsdWUnKTtcclxuXHJcbiAgICAgICAgICAgIC8vIFRoaXMgcGllY2Ugb2YgY29kZSByZW1vdmVzIHRoZSBlbXB0eSBhdHRyaWJ1dGUgbmFtZSBmcm9tIGF0dHJpYnV0ZXMgbGlzdFxyXG4gICAgICAgICAgICBjb25zdCBlbEF0dHJpYnV0ZXMgPSBjb21wb25lbnQuYXR0cmlidXRlcy5hdHRyaWJ1dGVzO1xyXG4gICAgICAgICAgICBkZWxldGUgZWxBdHRyaWJ1dGVzW1wiXCJdO1xyXG5cclxuICAgICAgICAgICAgaWYgKHZhbHVlLmxlbmd0aCA+IDAgJiYgdmFsdWUgIT09ICdHSlNfTk9fQ0xBU1MnKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB2YWx1ZV9hID0gdmFsdWUuc3BsaXQoJyAnKTtcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdmFsdWVfYS5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbXBvbmVudC5hZGRDbGFzcyh2YWx1ZV9hW2ldKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjb21wb25lbnQuZW0udHJpZ2dlcignY29tcG9uZW50OnRvZ2dsZWQnKTtcclxuICAgICAgICB9LFxyXG4gICAgfSk7XHJcblxyXG4gICAgY29uc3QgdGV4dFRyYWl0ID0gdG0uZ2V0VHlwZSgndGV4dCcpO1xyXG5cclxuICAgIHRtLmFkZFR5cGUoJ2NvbnRlbnQnLCB7XHJcbiAgICAgICAgZXZlbnRzOiB7XHJcbiAgICAgICAgICAgICdrZXl1cCc6ICdvbkNoYW5nZScsXHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgb25WYWx1ZUNoYW5nZTogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBjb25zdCBtZCA9IHRoaXMubW9kZWw7XHJcbiAgICAgICAgICAgIGNvbnN0IHRhcmdldCA9IG1kLnRhcmdldDtcclxuICAgICAgICAgICAgdGFyZ2V0LnNldCgnY29udGVudCcsIG1kLmdldCgndmFsdWUnKSk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgZ2V0SW5wdXRFbDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBpZiAoIXRoaXMuaW5wdXRFbCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5pbnB1dEVsID0gdGV4dFRyYWl0LnByb3RvdHlwZS5nZXRJbnB1dEVsLmJpbmQodGhpcykoKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuaW5wdXRFbC52YWx1ZSA9IHRoaXMudGFyZ2V0LmdldCgnY29udGVudCcpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmlucHV0RWw7XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgdG0uYWRkVHlwZSgnY29udGVudCcsIHtcclxuICAgICAgICBldmVudHM6IHtcclxuICAgICAgICAgICAgJ2tleXVwJzogJ29uQ2hhbmdlJyxcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBvblZhbHVlQ2hhbmdlOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IG1kID0gdGhpcy5tb2RlbDtcclxuICAgICAgICAgICAgY29uc3QgdGFyZ2V0ID0gbWQudGFyZ2V0O1xyXG4gICAgICAgICAgICB0YXJnZXQuc2V0KCdjb250ZW50JywgbWQuZ2V0KCd2YWx1ZScpKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBnZXRJbnB1dEVsOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGlmICghdGhpcy5pbnB1dEVsKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmlucHV0RWwgPSB0ZXh0VHJhaXQucHJvdG90eXBlLmdldElucHV0RWwuYmluZCh0aGlzKSgpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5pbnB1dEVsLnZhbHVlID0gdGhpcy50YXJnZXQuZ2V0KCdjb250ZW50Jyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuaW5wdXRFbDtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuXHJcbn1cclxuIiwiY29uc3QgZWxIYXNDbGFzcyA9IChlbCwgdG9GaW5kKSA9PiB7XHJcbiAgbGV0IGNscyA9IGVsLmNsYXNzTmFtZTtcclxuICBjbHMgPSBjbHMgJiYgY2xzLnRvU3RyaW5nKCk7XHJcbiAgaWYgKGNscyAmJiBjbHMuc3BsaXQoJyAnKS5pbmRleE9mKHRvRmluZCkgPj0gMCkgcmV0dXJuIDE7XHJcbn07XHJcblxyXG5jb25zdCBjYXBpdGFsaXplID0gKHBocmFzZSkgPT4ge1xyXG4gIHJldHVybiBwaHJhc2VcclxuICAgICAgLnRvTG93ZXJDYXNlKClcclxuICAgICAgLnNwbGl0KCcgJylcclxuICAgICAgLm1hcCh3b3JkID0+IHdvcmQuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyB3b3JkLnNsaWNlKDEpKVxyXG4gICAgICAuam9pbignICcpO1xyXG59O1xyXG5cclxuZXhwb3J0IHtcclxuICBlbEhhc0NsYXNzLFxyXG4gIGNhcGl0YWxpemUsXHJcbn1cclxuIiwiZXhwb3J0IGRlZmF1bHQgXCI8c3ZnIGNsYXNzPVxcXCJnanMtYmxvY2stc3ZnXFxcIiB2aWV3Qm94PVxcXCIwIDAgMjQgMjRcXFwiIHhtbG5zPVxcXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1xcXCI+XFxyXFxuICAgIDxwYXRoIGNsYXNzPVxcXCJnanMtYmxvY2stc3ZnLXBhdGhcXFwiIGQ9XFxcIk0yMiw5IEMyMiw4LjQgMjEuNSw4IDIwLjc1LDggTDMuMjUsOCBDMi41LDggMiw4LjQgMiw5IEwyLDE1IEMyLDE1LjYgMi41LDE2IDMuMjUsMTYgTDIwLjc1LDE2IEMyMS41LDE2IDIyLDE1LjYgMjIsMTUgTDIyLDkgWiBNMjEsMTUgTDMsMTUgTDMsOSBMMjEsOSBMMjEsMTUgWlxcXCIgZmlsbC1ydWxlPVxcXCJub256ZXJvXFxcIj48L3BhdGg+XFxyXFxuICAgIDxyZWN0IGNsYXNzPVxcXCJnanMtYmxvY2stc3ZnLXBhdGhcXFwiIHg9XFxcIjRcXFwiIHk9XFxcIjExLjVcXFwiIHdpZHRoPVxcXCIxNlxcXCIgaGVpZ2h0PVxcXCIxXFxcIj48L3JlY3Q+XFxyXFxuPC9zdmc+XFxyXFxuXCI7IiwiZXhwb3J0IGRlZmF1bHQgXCI8c3ZnIGFyaWEtaGlkZGVuPVxcXCJ0cnVlXFxcIiB3aWR0aD1cXFwiMjRcXFwiIGhlaWdodD1cXFwiNTBcXFwiIGZvY3VzYWJsZT1cXFwiZmFsc2VcXFwiIGRhdGEtcHJlZml4PVxcXCJmYXJcXFwiIGRhdGEtaWNvbj1cXFwiY2FyZXQtc3F1YXJlLWRvd25cXFwiIGNsYXNzPVxcXCJzdmctaW5saW5lLS1mYSBmYS1jYXJldC1zcXVhcmUtZG93biBmYS13LTE0XFxcIiByb2xlPVxcXCJpbWdcXFwiIHhtbG5zPVxcXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1xcXCIgdmlld0JveD1cXFwiMCAwIDQ0OCA1MTJcXFwiPjxwYXRoIGZpbGw9XFxcImN1cnJlbnRDb2xvclxcXCIgZD1cXFwiTTEyNS4xIDIwOGgxOTcuOGMxMC43IDAgMTYuMSAxMyA4LjUgMjAuNWwtOTguOSA5OC4zYy00LjcgNC43LTEyLjIgNC43LTE2LjkgMGwtOTguOS05OC4zYy03LjctNy41LTIuMy0yMC41IDguNC0yMC41ek00NDggODB2MzUyYzAgMjYuNS0yMS41IDQ4LTQ4IDQ4SDQ4Yy0yNi41IDAtNDgtMjEuNS00OC00OFY4MGMwLTI2LjUgMjEuNS00OCA0OC00OGgzNTJjMjYuNSAwIDQ4IDIxLjUgNDggNDh6bS00OCAzNDZWODZjMC0zLjMtMi43LTYtNi02SDU0Yy0zLjMgMC02IDIuNy02IDZ2MzQwYzAgMy4zIDIuNyA2IDYgNmgzNDBjMy4zIDAgNi0yLjcgNi02elxcXCI+PC9wYXRoPjwvc3ZnPlxcclxcblwiOyIsImV4cG9ydCBkZWZhdWx0IFwiPHN2ZyBhcmlhLWhpZGRlbj1cXFwidHJ1ZVxcXCIgd2lkdGg9XFxcIjI0XFxcIiBoZWlnaHQ9XFxcIjUwXFxcIiBmb2N1c2FibGU9XFxcImZhbHNlXFxcIiBkYXRhLXByZWZpeD1cXFwiZmFzXFxcIiBkYXRhLWljb249XFxcImNlcnRpZmljYXRlXFxcIiBjbGFzcz1cXFwic3ZnLWlubGluZS0tZmEgZmEtY2VydGlmaWNhdGUgZmEtdy0xNlxcXCIgcm9sZT1cXFwiaW1nXFxcIiB4bWxucz1cXFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcXFwiIHZpZXdCb3g9XFxcIjAgMCA1MTIgNTEyXFxcIj48cGF0aCBmaWxsPVxcXCJjdXJyZW50Q29sb3JcXFwiIGQ9XFxcIk00NTguNjIyIDI1NS45Mmw0NS45ODUtNDUuMDA1YzEzLjcwOC0xMi45NzcgNy4zMTYtMzYuMDM5LTEwLjY2NC00MC4zMzlsLTYyLjY1LTE1Ljk5IDE3LjY2MS02Mi4wMTVjNC45OTEtMTcuODM4LTExLjgyOS0zNC42NjMtMjkuNjYxLTI5LjY3MWwtNjEuOTk0IDE3LjY2Ny0xNS45ODQtNjIuNjcxQzMzNy4wODUuMTk3IDMxMy43NjUtNi4yNzYgMzAwLjk5IDcuMjI4TDI1NiA1My41NyAyMTEuMDExIDcuMjI5Yy0xMi42My0xMy4zNTEtMzYuMDQ3LTcuMjM0LTQwLjMyNSAxMC42NjhsLTE1Ljk4NCA2Mi42NzEtNjEuOTk1LTE3LjY2N0M3NC44NyA1Ny45MDcgNTguMDU2IDc0LjczOCA2My4wNDYgOTIuNTcybDE3LjY2MSA2Mi4wMTUtNjIuNjUgMTUuOTlDLjA2OSAxNzQuODc4LTYuMzEgMTk3Ljk0NCA3LjM5MiAyMTAuOTE1bDQ1Ljk4NSA0NS4wMDUtNDUuOTg1IDQ1LjAwNGMtMTMuNzA4IDEyLjk3Ny03LjMxNiAzNi4wMzkgMTAuNjY0IDQwLjMzOWw2Mi42NSAxNS45OS0xNy42NjEgNjIuMDE1Yy00Ljk5MSAxNy44MzggMTEuODI5IDM0LjY2MyAyOS42NjEgMjkuNjcxbDYxLjk5NC0xNy42NjcgMTUuOTg0IDYyLjY3MWM0LjQzOSAxOC41NzUgMjcuNjk2IDI0LjAxOCA0MC4zMjUgMTAuNjY4TDI1NiA0NTguNjFsNDQuOTg5IDQ2LjAwMWMxMi41IDEzLjQ4OCAzNS45ODcgNy40ODYgNDAuMzI1LTEwLjY2OGwxNS45ODQtNjIuNjcxIDYxLjk5NCAxNy42NjdjMTcuODM2IDQuOTk0IDM0LjY1MS0xMS44MzcgMjkuNjYxLTI5LjY3MWwtMTcuNjYxLTYyLjAxNSA2Mi42NS0xNS45OWMxNy45ODctNC4zMDIgMjQuMzY2LTI3LjM2NyAxMC42NjQtNDAuMzM5bC00NS45ODQtNDUuMDA0elxcXCI+PC9wYXRoPjwvc3ZnPlxcclxcblwiOyIsImV4cG9ydCBkZWZhdWx0IFwiPHN2ZyBhcmlhLWhpZGRlbj1cXFwidHJ1ZVxcXCIgd2lkdGg9XFxcIjI0XFxcIiBoZWlnaHQ9XFxcIjUwXFxcIiBmb2N1c2FibGU9XFxcImZhbHNlXFxcIiBkYXRhLXByZWZpeD1cXFwiZmFzXFxcIiBkYXRhLWljb249XFxcImNoZWNrLXNxdWFyZVxcXCIgY2xhc3M9XFxcInN2Zy1pbmxpbmUtLWZhIGZhLWNoZWNrLXNxdWFyZSBmYS13LTE0XFxcIiByb2xlPVxcXCJpbWdcXFwiIHhtbG5zPVxcXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1xcXCIgdmlld0JveD1cXFwiMCAwIDQ0OCA1MTJcXFwiPjxwYXRoIGZpbGw9XFxcImN1cnJlbnRDb2xvclxcXCIgZD1cXFwiTTQwMCA0ODBINDhjLTI2LjUxIDAtNDgtMjEuNDktNDgtNDhWODBjMC0yNi41MSAyMS40OS00OCA0OC00OGgzNTJjMjYuNTEgMCA0OCAyMS40OSA0OCA0OHYzNTJjMCAyNi41MS0yMS40OSA0OC00OCA0OHptLTIwNC42ODYtOTguMDU5bDE4NC0xODRjNi4yNDgtNi4yNDggNi4yNDgtMTYuMzc5IDAtMjIuNjI3bC0yMi42MjctMjIuNjI3Yy02LjI0OC02LjI0OC0xNi4zNzktNi4yNDktMjIuNjI4IDBMMTg0IDMwMi43NDVsLTcwLjA1OS03MC4wNTljLTYuMjQ4LTYuMjQ4LTE2LjM3OS02LjI0OC0yMi42MjggMGwtMjIuNjI3IDIyLjYyN2MtNi4yNDggNi4yNDgtNi4yNDggMTYuMzc5IDAgMjIuNjI3bDEwNCAxMDRjNi4yNDkgNi4yNSAxNi4zNzkgNi4yNSAyMi42MjguMDAxelxcXCI+PC9wYXRoPjwvc3ZnPlxcclxcblwiOyIsImV4cG9ydCBkZWZhdWx0IFwiPHN2ZyBhcmlhLWhpZGRlbj1cXFwidHJ1ZVxcXCIgd2lkdGg9XFxcIjI0XFxcIiBoZWlnaHQ9XFxcIjUwXFxcIiBmb2N1c2FibGU9XFxcImZhbHNlXFxcIiBkYXRhLXByZWZpeD1cXFwiZmFzXFxcIiBkYXRhLWljb249XFxcImNpcmNsZVxcXCIgY2xhc3M9XFxcInN2Zy1pbmxpbmUtLWZhIGZhLWNpcmNsZSBmYS13LTE2XFxcIiByb2xlPVxcXCJpbWdcXFwiIHhtbG5zPVxcXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1xcXCIgdmlld0JveD1cXFwiMCAwIDUxMiA1MTJcXFwiPjxwYXRoIGZpbGw9XFxcImN1cnJlbnRDb2xvclxcXCIgZD1cXFwiTTI1NiA4QzExOSA4IDggMTE5IDggMjU2czExMSAyNDggMjQ4IDI0OCAyNDgtMTExIDI0OC0yNDhTMzkzIDggMjU2IDh6XFxcIj48L3BhdGg+PC9zdmc+XFxyXFxuXCI7IiwiZXhwb3J0IGRlZmF1bHQgXCI8c3ZnIGFyaWEtaGlkZGVuPVxcXCJ0cnVlXFxcIiB3aWR0aD1cXFwiMjRcXFwiIGhlaWdodD1cXFwiNTBcXFwiIGZvY3VzYWJsZT1cXFwiZmFsc2VcXFwiIGRhdGEtcHJlZml4PVxcXCJmYXNcXFwiIGRhdGEtaWNvbj1cXFwiY29sdW1uc1xcXCIgY2xhc3M9XFxcInN2Zy1pbmxpbmUtLWZhIGZhLWNvbHVtbnMgZmEtdy0xNlxcXCIgcm9sZT1cXFwiaW1nXFxcIiB4bWxucz1cXFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcXFwiIHZpZXdCb3g9XFxcIjAgMCA1MTIgNTEyXFxcIj48cGF0aCBmaWxsPVxcXCJjdXJyZW50Q29sb3JcXFwiIGQ9XFxcIk00NjQgMzJINDhDMjEuNDkgMzIgMCA1My40OSAwIDgwdjM1MmMwIDI2LjUxIDIxLjQ5IDQ4IDQ4IDQ4aDQxNmMyNi41MSAwIDQ4LTIxLjQ5IDQ4LTQ4VjgwYzAtMjYuNTEtMjEuNDktNDgtNDgtNDh6TTIyNCA0MTZINjRWMTYwaDE2MHYyNTZ6bTIyNCAwSDI4OFYxNjBoMTYwdjI1NnpcXFwiPjwvcGF0aD48L3N2Zz5cXHJcXG5cIjsiLCJleHBvcnQgZGVmYXVsdCBcIjxzdmcgYXJpYS1oaWRkZW49XFxcInRydWVcXFwiIHdpZHRoPVxcXCIyNFxcXCIgaGVpZ2h0PVxcXCI1MFxcXCIgZm9jdXNhYmxlPVxcXCJmYWxzZVxcXCIgZGF0YS1wcmVmaXg9XFxcImZhc1xcXCIgZGF0YS1pY29uPVxcXCJjb21wcmVzc1xcXCIgY2xhc3M9XFxcInN2Zy1pbmxpbmUtLWZhIGZhLWNvbXByZXNzIGZhLXctMTRcXFwiIHJvbGU9XFxcImltZ1xcXCIgeG1sbnM9XFxcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXFxcIiB2aWV3Qm94PVxcXCIwIDAgNDQ4IDUxMlxcXCI+PHBhdGggZmlsbD1cXFwiY3VycmVudENvbG9yXFxcIiBkPVxcXCJNNDM2IDE5MkgzMTJjLTEzLjMgMC0yNC0xMC43LTI0LTI0VjQ0YzAtNi42IDUuNC0xMiAxMi0xMmg0MGM2LjYgMCAxMiA1LjQgMTIgMTJ2ODRoODRjNi42IDAgMTIgNS40IDEyIDEydjQwYzAgNi42LTUuNCAxMi0xMiAxMnptLTI3Ni0yNFY0NGMwLTYuNi01LjQtMTItMTItMTJoLTQwYy02LjYgMC0xMiA1LjQtMTIgMTJ2ODRIMTJjLTYuNiAwLTEyIDUuNC0xMiAxMnY0MGMwIDYuNiA1LjQgMTIgMTIgMTJoMTI0YzEzLjMgMCAyNC0xMC43IDI0LTI0em0wIDMwMFYzNDRjMC0xMy4zLTEwLjctMjQtMjQtMjRIMTJjLTYuNiAwLTEyIDUuNC0xMiAxMnY0MGMwIDYuNiA1LjQgMTIgMTIgMTJoODR2ODRjMCA2LjYgNS40IDEyIDEyIDEyaDQwYzYuNiAwIDEyLTUuNCAxMi0xMnptMTkyIDB2LTg0aDg0YzYuNiAwIDEyLTUuNCAxMi0xMnYtNDBjMC02LjYtNS40LTEyLTEyLTEySDMxMmMtMTMuMyAwLTI0IDEwLjctMjQgMjR2MTI0YzAgNi42IDUuNCAxMiAxMiAxMmg0MGM2LjYgMCAxMi01LjQgMTItMTJ6XFxcIj48L3BhdGg+PC9zdmc+XFxyXFxuXCI7IiwiZXhwb3J0IGRlZmF1bHQgXCI8c3ZnIGFyaWEtaGlkZGVuPVxcXCJ0cnVlXFxcIiB3aWR0aD1cXFwiMjRcXFwiIGhlaWdodD1cXFwiNTBcXFwiIGZvY3VzYWJsZT1cXFwiZmFsc2VcXFwiIGRhdGEtcHJlZml4PVxcXCJmYXNcXFwiIGRhdGEtaWNvbj1cXFwiY3JlZGl0LWNhcmRcXFwiIGNsYXNzPVxcXCJzdmctaW5saW5lLS1mYSBmYS1jcmVkaXQtY2FyZCBmYS13LTE4XFxcIiByb2xlPVxcXCJpbWdcXFwiIHhtbG5zPVxcXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1xcXCIgdmlld0JveD1cXFwiMCAwIDU3NiA1MTJcXFwiPjxwYXRoIGZpbGw9XFxcImN1cnJlbnRDb2xvclxcXCIgZD1cXFwiTTAgNDMyYzAgMjYuNSAyMS41IDQ4IDQ4IDQ4aDQ4MGMyNi41IDAgNDgtMjEuNSA0OC00OFYyNTZIMHYxNzZ6bTE5Mi02OGMwLTYuNiA1LjQtMTIgMTItMTJoMTM2YzYuNiAwIDEyIDUuNCAxMiAxMnY0MGMwIDYuNi01LjQgMTItMTIgMTJIMjA0Yy02LjYgMC0xMi01LjQtMTItMTJ2LTQwem0tMTI4IDBjMC02LjYgNS40LTEyIDEyLTEyaDcyYzYuNiAwIDEyIDUuNCAxMiAxMnY0MGMwIDYuNi01LjQgMTItMTIgMTJINzZjLTYuNiAwLTEyLTUuNC0xMi0xMnYtNDB6TTU3NiA4MHY0OEgwVjgwYzAtMjYuNSAyMS41LTQ4IDQ4LTQ4aDQ4MGMyNi41IDAgNDggMjEuNSA0OCA0OHpcXFwiPjwvcGF0aD48L3N2Zz5cXHJcXG5cIjsiLCJleHBvcnQgZGVmYXVsdCBcIjxzdmcgYXJpYS1oaWRkZW49XFxcInRydWVcXFwiIHdpZHRoPVxcXCIyNFxcXCIgaGVpZ2h0PVxcXCI1MFxcXCIgZm9jdXNhYmxlPVxcXCJmYWxzZVxcXCIgZGF0YS1wcmVmaXg9XFxcImZhclxcXCIgZGF0YS1pY29uPVxcXCJkb3QtY2lyY2xlXFxcIiBjbGFzcz1cXFwic3ZnLWlubGluZS0tZmEgZmEtZG90LWNpcmNsZSBmYS13LTE2XFxcIiByb2xlPVxcXCJpbWdcXFwiIHhtbG5zPVxcXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1xcXCIgdmlld0JveD1cXFwiMCAwIDUxMiA1MTJcXFwiPjxwYXRoIGZpbGw9XFxcImN1cnJlbnRDb2xvclxcXCIgZD1cXFwiTTI1NiA1NmMxMTAuNTMyIDAgMjAwIDg5LjQ1MSAyMDAgMjAwIDAgMTEwLjUzMi04OS40NTEgMjAwLTIwMCAyMDAtMTEwLjUzMiAwLTIwMC04OS40NTEtMjAwLTIwMCAwLTExMC41MzIgODkuNDUxLTIwMCAyMDAtMjAwbTAtNDhDMTE5LjAzMyA4IDggMTE5LjAzMyA4IDI1NnMxMTEuMDMzIDI0OCAyNDggMjQ4IDI0OC0xMTEuMDMzIDI0OC0yNDhTMzkyLjk2NyA4IDI1NiA4em0wIDE2OGMtNDQuMTgzIDAtODAgMzUuODE3LTgwIDgwczM1LjgxNyA4MCA4MCA4MCA4MC0zNS44MTcgODAtODAtMzUuODE3LTgwLTgwLTgwelxcXCI+PC9wYXRoPjwvc3ZnPlxcclxcblwiOyIsImV4cG9ydCBkZWZhdWx0IFwiPHN2ZyBhcmlhLWhpZGRlbj1cXFwidHJ1ZVxcXCIgd2lkdGg9XFxcIjI0XFxcIiBoZWlnaHQ9XFxcIjUwXFxcIiBmb2N1c2FibGU9XFxcImZhbHNlXFxcIiBkYXRhLXByZWZpeD1cXFwiZmFzXFxcIiBkYXRhLWljb249XFxcImVsbGlwc2lzLWhcXFwiIGNsYXNzPVxcXCJzdmctaW5saW5lLS1mYSBmYS1lbGxpcHNpcy1oIGZhLXctMTZcXFwiIHJvbGU9XFxcImltZ1xcXCIgeG1sbnM9XFxcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXFxcIiB2aWV3Qm94PVxcXCIwIDAgNTEyIDUxMlxcXCI+PHBhdGggZmlsbD1cXFwiY3VycmVudENvbG9yXFxcIiBkPVxcXCJNMzI4IDI1NmMwIDM5LjgtMzIuMiA3Mi03MiA3MnMtNzItMzIuMi03Mi03MiAzMi4yLTcyIDcyLTcyIDcyIDMyLjIgNzIgNzJ6bTEwNC03MmMtMzkuOCAwLTcyIDMyLjItNzIgNzJzMzIuMiA3MiA3MiA3MiA3Mi0zMi4yIDcyLTcyLTMyLjItNzItNzItNzJ6bS0zNTIgMGMtMzkuOCAwLTcyIDMyLjItNzIgNzJzMzIuMiA3MiA3MiA3MiA3Mi0zMi4yIDcyLTcyLTMyLjItNzItNzItNzJ6XFxcIj48L3BhdGg+PC9zdmc+XFxyXFxuXCI7IiwiZXhwb3J0IGRlZmF1bHQgXCI8c3ZnIGFyaWEtaGlkZGVuPVxcXCJ0cnVlXFxcIiB3aWR0aD1cXFwiMjRcXFwiIGhlaWdodD1cXFwiNTBcXFwiIGZvY3VzYWJsZT1cXFwiZmFsc2VcXFwiIGRhdGEtcHJlZml4PVxcXCJmYXNcXFwiIGRhdGEtaWNvbj1cXFwiZXF1YWxzXFxcIiBjbGFzcz1cXFwic3ZnLWlubGluZS0tZmEgZmEtZXF1YWxzIGZhLXctMTRcXFwiIHJvbGU9XFxcImltZ1xcXCIgeG1sbnM9XFxcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXFxcIiB2aWV3Qm94PVxcXCIwIDAgNDQ4IDUxMlxcXCI+PHBhdGggZmlsbD1cXFwiY3VycmVudENvbG9yXFxcIiBkPVxcXCJNNDE2IDMwNEgzMmMtMTcuNjcgMC0zMiAxNC4zMy0zMiAzMnYzMmMwIDE3LjY3IDE0LjMzIDMyIDMyIDMyaDM4NGMxNy42NyAwIDMyLTE0LjMzIDMyLTMydi0zMmMwLTE3LjY3LTE0LjMzLTMyLTMyLTMyem0wLTE5MkgzMmMtMTcuNjcgMC0zMiAxNC4zMy0zMiAzMnYzMmMwIDE3LjY3IDE0LjMzIDMyIDMyIDMyaDM4NGMxNy42NyAwIDMyLTE0LjMzIDMyLTMydi0zMmMwLTE3LjY3LTE0LjMzLTMyLTMyLTMyelxcXCI+PC9wYXRoPjwvc3ZnPlxcclxcblwiOyIsImV4cG9ydCBkZWZhdWx0IFwiPHN2ZyBhcmlhLWhpZGRlbj1cXFwidHJ1ZVxcXCIgd2lkdGg9XFxcIjI0XFxcIiBoZWlnaHQ9XFxcIjUwXFxcIiBmb2N1c2FibGU9XFxcImZhbHNlXFxcIiBkYXRhLXByZWZpeD1cXFwiZmFzXFxcIiBkYXRhLWljb249XFxcImV4Y2xhbWF0aW9uLXRyaWFuZ2xlXFxcIiBjbGFzcz1cXFwic3ZnLWlubGluZS0tZmEgZmEtZXhjbGFtYXRpb24tdHJpYW5nbGUgZmEtdy0xOFxcXCIgcm9sZT1cXFwiaW1nXFxcIiB4bWxucz1cXFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcXFwiIHZpZXdCb3g9XFxcIjAgMCA1NzYgNTEyXFxcIj48cGF0aCBmaWxsPVxcXCJjdXJyZW50Q29sb3JcXFwiIGQ9XFxcIk01NjkuNTE3IDQ0MC4wMTNDNTg3Ljk3NSA0NzIuMDA3IDU2NC44MDYgNTEyIDUyNy45NCA1MTJINDguMDU0Yy0zNi45MzcgMC01OS45OTktNDAuMDU1LTQxLjU3Ny03MS45ODdMMjQ2LjQyMyAyMy45ODVjMTguNDY3LTMyLjAwOSA2NC43Mi0zMS45NTEgODMuMTU0IDBsMjM5Ljk0IDQxNi4wMjh6TTI4OCAzNTRjLTI1LjQwNSAwLTQ2IDIwLjU5NS00NiA0NnMyMC41OTUgNDYgNDYgNDYgNDYtMjAuNTk1IDQ2LTQ2LTIwLjU5NS00Ni00Ni00NnptLTQzLjY3My0xNjUuMzQ2bDcuNDE4IDEzNmMuMzQ3IDYuMzY0IDUuNjA5IDExLjM0NiAxMS45ODIgMTEuMzQ2aDQ4LjU0NmM2LjM3MyAwIDExLjYzNS00Ljk4MiAxMS45ODItMTEuMzQ2bDcuNDE4LTEzNmMuMzc1LTYuODc0LTUuMDk4LTEyLjY1NC0xMS45ODItMTIuNjU0aC02My4zODNjLTYuODg0IDAtMTIuMzU2IDUuNzgtMTEuOTgxIDEyLjY1NHpcXFwiPjwvcGF0aD48L3N2Zz5cXHJcXG5cIjsiLCJleHBvcnQgZGVmYXVsdCBcIjxzdmcgY2xhc3M9XFxcImdqcy1ibG9jay1zdmdcXFwiIHZpZXdCb3g9XFxcIjAgMCAyNCAyNFxcXCIgeG1sbnM9XFxcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXFxcIj5cXHJcXG4gICAgPHBhdGggY2xhc3M9XFxcImdqcy1ibG9jay1zdmctcGF0aFxcXCIgZD1cXFwiTTIyLDkgQzIyLDguNCAyMS41LDggMjAuNzUsOCBMMy4yNSw4IEMyLjUsOCAyLDguNCAyLDkgTDIsMTUgQzIsMTUuNiAyLjUsMTYgMy4yNSwxNiBMMjAuNzUsMTYgQzIxLjUsMTYgMjIsMTUuNiAyMiwxNSBMMjIsOSBaIE0yMSwxNSBMMywxNSBMMyw5IEwyMSw5IEwyMSwxNSBaXFxcIj48L3BhdGg+XFxyXFxuICAgIDxwb2x5Z29uIGNsYXNzPVxcXCJnanMtYmxvY2stc3ZnLXBhdGhcXFwiIHBvaW50cz1cXFwiNCAxMCA1IDEwIDUgMTQgNCAxNFxcXCI+PC9wb2x5Z29uPlxcclxcbjwvc3ZnPlxcclxcblwiOyIsImV4cG9ydCBkZWZhdWx0IFwiPHN2ZyBhcmlhLWhpZGRlbj1cXFwidHJ1ZVxcXCIgd2lkdGg9XFxcIjI0XFxcIiBoZWlnaHQ9XFxcIjUwXFxcIiBmb2N1c2FibGU9XFxcImZhbHNlXFxcIiBkYXRhLXByZWZpeD1cXFwiZmFzXFxcIiBkYXRhLWljb249XFxcImZvbnRcXFwiIGNsYXNzPVxcXCJzdmctaW5saW5lLS1mYSBmYS1mb250IGZhLXctMTRcXFwiIHJvbGU9XFxcImltZ1xcXCIgeG1sbnM9XFxcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXFxcIiB2aWV3Qm94PVxcXCIwIDAgNDQ4IDUxMlxcXCI+PHBhdGggZmlsbD1cXFwiY3VycmVudENvbG9yXFxcIiBkPVxcXCJNNDMyIDQxNmgtMjMuNDFMMjc3Ljg4IDUzLjY5QTMyIDMyIDAgMCAwIDI0Ny41OCAzMmgtNDcuMTZhMzIgMzIgMCAwIDAtMzAuMyAyMS42OUwzOS40MSA0MTZIMTZhMTYgMTYgMCAwIDAtMTYgMTZ2MzJhMTYgMTYgMCAwIDAgMTYgMTZoMTI4YTE2IDE2IDAgMCAwIDE2LTE2di0zMmExNiAxNiAwIDAgMC0xNi0xNmgtMTkuNThsMjMuMy02NGgxNTIuNTZsMjMuMyA2NEgzMDRhMTYgMTYgMCAwIDAtMTYgMTZ2MzJhMTYgMTYgMCAwIDAgMTYgMTZoMTI4YTE2IDE2IDAgMCAwIDE2LTE2di0zMmExNiAxNiAwIDAgMC0xNi0xNnpNMTc2Ljg1IDI3MkwyMjQgMTQyLjUxIDI3MS4xNSAyNzJ6XFxcIj48L3BhdGg+PC9zdmc+XFxyXFxuXCI7IiwiZXhwb3J0IGRlZmF1bHQgXCI8c3ZnIGNsYXNzPVxcXCJnanMtYmxvY2stc3ZnXFxcIiB2aWV3Qm94PVxcXCIwIDAgMjQgMjRcXFwiIHhtbG5zPVxcXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1xcXCI+XFxyXFxuICAgIDxwYXRoIGNsYXNzPVxcXCJnanMtYmxvY2stc3ZnLXBhdGhcXFwiIGQ9XFxcIk0yMiw5IEMyMiw4LjQgMjEuNSw4IDIwLjc1LDggTDMuMjUsOCBDMi41LDggMiw4LjQgMiw5IEwyLDE1IEMyLDE1LjYgMi41LDE2IDMuMjUsMTYgTDIwLjc1LDE2IEMyMS41LDE2IDIyLDE1LjYgMjIsMTUgTDIyLDkgWiBNMjEsMTUgTDMsMTUgTDMsOSBMMjEsOSBMMjEsMTUgWlxcXCI+PC9wYXRoPlxcclxcbiAgICA8cG9seWdvbiBjbGFzcz1cXFwiZ2pzLWJsb2NrLXN2Zy1wYXRoXFxcIiBwb2ludHM9XFxcIjQgMTAgNSAxMCA1IDE0IDQgMTRcXFwiPjwvcG9seWdvbj5cXHJcXG48L3N2Zz5cXHJcXG5cIjsiLCJleHBvcnQgZGVmYXVsdCBcIjxzdmcgY2xhc3M9XFxcImdqcy1ibG9jay1zdmdcXFwiIHZpZXdCb3g9XFxcIjAgMCAyNCAyNFxcXCIgeG1sbnM9XFxcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXFxcIj5cXHJcXG4gICAgPHBhdGggY2xhc3M9XFxcImdqcy1ibG9jay1zdmctcGF0aFxcXCIgZD1cXFwiTTIyLDUuNSBDMjIsNS4yIDIxLjUsNSAyMC43NSw1IEwzLjI1LDUgQzIuNSw1IDIsNS4yIDIsNS41IEwyLDguNSBDMiw4LjggMi41LDkgMy4yNSw5IEwyMC43NSw5IEMyMS41LDkgMjIsOC44IDIyLDguNSBMMjIsNS41IFogTTIxLDggTDMsOCBMMyw2IEwyMSw2IEwyMSw4IFpcXFwiIGZpbGwtcnVsZT1cXFwibm9uemVyb1xcXCI+PC9wYXRoPlxcclxcbiAgICA8cGF0aCBjbGFzcz1cXFwiZ2pzLWJsb2NrLXN2Zy1wYXRoXFxcIiBkPVxcXCJNMjIsMTAuNSBDMjIsMTAuMiAyMS41LDEwIDIwLjc1LDEwIEwzLjI1LDEwIEMyLjUsMTAgMiwxMC4yIDIsMTAuNSBMMiwxMy41IEMyLDEzLjggMi41LDE0IDMuMjUsMTQgTDIwLjc1LDE0IEMyMS41LDE0IDIyLDEzLjggMjIsMTMuNSBMMjIsMTAuNSBaIE0yMSwxMyBMMywxMyBMMywxMSBMMjEsMTEgTDIxLDEzIFpcXFwiIGZpbGwtcnVsZT1cXFwibm9uemVyb1xcXCI+PC9wYXRoPlxcclxcbiAgICA8cmVjdCBjbGFzcz1cXFwiZ2pzLWJsb2NrLXN2Zy1wYXRoXFxcIiB4PVxcXCIyXFxcIiB5PVxcXCIxNVxcXCIgd2lkdGg9XFxcIjEwXFxcIiBoZWlnaHQ9XFxcIjNcXFwiIHJ4PVxcXCIwLjVcXFwiPjwvcmVjdD5cXHJcXG48L3N2Zz5cXHJcXG5cIjsiLCJleHBvcnQgZGVmYXVsdCBcIjxzdmcgYXJpYS1oaWRkZW49XFxcInRydWVcXFwiIHdpZHRoPVxcXCIyNFxcXCIgaGVpZ2h0PVxcXCI1MFxcXCIgZm9jdXNhYmxlPVxcXCJmYWxzZVxcXCIgZGF0YS1wcmVmaXg9XFxcImZhc1xcXCIgZGF0YS1pY29uPVxcXCJoZWFkaW5nXFxcIiBjbGFzcz1cXFwic3ZnLWlubGluZS0tZmEgZmEtaGVhZGluZyBmYS13LTE2XFxcIiByb2xlPVxcXCJpbWdcXFwiIHhtbG5zPVxcXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1xcXCIgdmlld0JveD1cXFwiMCAwIDUxMiA1MTJcXFwiPjxwYXRoIGZpbGw9XFxcImN1cnJlbnRDb2xvclxcXCIgZD1cXFwiTTQ0OCA5NnYzMjBoMzJhMTYgMTYgMCAwIDEgMTYgMTZ2MzJhMTYgMTYgMCAwIDEtMTYgMTZIMzIwYTE2IDE2IDAgMCAxLTE2LTE2di0zMmExNiAxNiAwIDAgMSAxNi0xNmgzMlYyODhIMTYwdjEyOGgzMmExNiAxNiAwIDAgMSAxNiAxNnYzMmExNiAxNiAwIDAgMS0xNiAxNkgzMmExNiAxNiAwIDAgMS0xNi0xNnYtMzJhMTYgMTYgMCAwIDEgMTYtMTZoMzJWOTZIMzJhMTYgMTYgMCAwIDEtMTYtMTZWNDhhMTYgMTYgMCAwIDEgMTYtMTZoMTYwYTE2IDE2IDAgMCAxIDE2IDE2djMyYTE2IDE2IDAgMCAxLTE2IDE2aC0zMnYxMjhoMTkyVjk2aC0zMmExNiAxNiAwIDAgMS0xNi0xNlY0OGExNiAxNiAwIDAgMSAxNi0xNmgxNjBhMTYgMTYgMCAwIDEgMTYgMTZ2MzJhMTYgMTYgMCAwIDEtMTYgMTZ6XFxcIj48L3BhdGg+PC9zdmc+XFxyXFxuXCI7IiwiZXhwb3J0IGRlZmF1bHQgXCI8c3ZnIGFyaWEtaGlkZGVuPVxcXCJ0cnVlXFxcIiB3aWR0aD1cXFwiMjRcXFwiIGhlaWdodD1cXFwiNTBcXFwiIGZvY3VzYWJsZT1cXFwiZmFsc2VcXFwiIGRhdGEtcHJlZml4PVxcXCJmYXNcXFwiIGRhdGEtaWNvbj1cXFwiaW1hZ2VcXFwiIGNsYXNzPVxcXCJzdmctaW5saW5lLS1mYSBmYS1pbWFnZSBmYS13LTE2XFxcIiByb2xlPVxcXCJpbWdcXFwiIHhtbG5zPVxcXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1xcXCIgdmlld0JveD1cXFwiMCAwIDUxMiA1MTJcXFwiPjxwYXRoIGZpbGw9XFxcImN1cnJlbnRDb2xvclxcXCIgZD1cXFwiTTQ2NCA0NDhINDhjLTI2LjUxIDAtNDgtMjEuNDktNDgtNDhWMTEyYzAtMjYuNTEgMjEuNDktNDggNDgtNDhoNDE2YzI2LjUxIDAgNDggMjEuNDkgNDggNDh2Mjg4YzAgMjYuNTEtMjEuNDkgNDgtNDggNDh6TTExMiAxMjBjLTMwLjkyOCAwLTU2IDI1LjA3Mi01NiA1NnMyNS4wNzIgNTYgNTYgNTYgNTYtMjUuMDcyIDU2LTU2LTI1LjA3Mi01Ni01Ni01NnpNNjQgMzg0aDM4NFYyNzJsLTg3LjUxNS04Ny41MTVjLTQuNjg2LTQuNjg2LTEyLjI4NC00LjY4Ni0xNi45NzEgMEwyMDggMzIwbC01NS41MTUtNTUuNTE1Yy00LjY4Ni00LjY4Ni0xMi4yODQtNC42ODYtMTYuOTcxIDBMNjQgMzM2djQ4elxcXCI+PC9wYXRoPjwvc3ZnPlxcclxcblwiOyIsImV4cG9ydCBkZWZhdWx0IFwiPHN2ZyBjbGFzcz1cXFwiZ2pzLWJsb2NrLXN2Z1xcXCIgdmlld0JveD1cXFwiMCAwIDI0IDI0XFxcIiB4bWxucz1cXFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcXFwiPlxcclxcbiAgICA8cGF0aCBjbGFzcz1cXFwiZ2pzLWJsb2NrLXN2Zy1wYXRoXFxcIiBkPVxcXCJNMjIsOSBDMjIsOC40IDIxLjUsOCAyMC43NSw4IEwzLjI1LDggQzIuNSw4IDIsOC40IDIsOSBMMiwxNSBDMiwxNS42IDIuNSwxNiAzLjI1LDE2IEwyMC43NSwxNiBDMjEuNSwxNiAyMiwxNS42IDIyLDE1IEwyMiw5IFogTTIxLDE1IEwzLDE1IEwzLDkgTDIxLDkgTDIxLDE1IFpcXFwiPjwvcGF0aD5cXHJcXG4gICAgPHBvbHlnb24gY2xhc3M9XFxcImdqcy1ibG9jay1zdmctcGF0aFxcXCIgcG9pbnRzPVxcXCI0IDEwIDUgMTAgNSAxNCA0IDE0XFxcIj48L3BvbHlnb24+XFxyXFxuPC9zdmc+XFxyXFxuXCI7IiwiZXhwb3J0IGRlZmF1bHQgXCI8c3ZnIGNsYXNzPVxcXCJnanMtYmxvY2stc3ZnXFxcIiB2aWV3Qm94PVxcXCIwIDAgMjQgMjRcXFwiIHhtbG5zPVxcXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1xcXCI+XFxyXFxuICAgIDxwYXRoIGNsYXNzPVxcXCJnanMtYmxvY2stc3ZnLXBhdGhcXFwiIGQ9XFxcIk0yMiw5IEMyMiw4LjQgMjEuNSw4IDIwLjc1LDggTDMuMjUsOCBDMi41LDggMiw4LjQgMiw5IEwyLDE1IEMyLDE1LjYgMi41LDE2IDMuMjUsMTYgTDIwLjc1LDE2IEMyMS41LDE2IDIyLDE1LjYgMjIsMTUgTDIyLDkgWiBNMjEsMTUgTDMsMTUgTDMsOSBMMjEsOSBMMjEsMTUgWlxcXCI+PC9wYXRoPlxcclxcbiAgICA8cG9seWdvbiBjbGFzcz1cXFwiZ2pzLWJsb2NrLXN2Zy1wYXRoXFxcIiBwb2ludHM9XFxcIjQgMTAgNSAxMCA1IDE0IDQgMTRcXFwiPjwvcG9seWdvbj5cXHJcXG48L3N2Zz5cXHJcXG5cIjsiLCJleHBvcnQgZGVmYXVsdCBcIjxzdmcgY2xhc3M9XFxcImdqcy1ibG9jay1zdmdcXFwiIHZpZXdCb3g9XFxcIjAgMCAyNCAyNFxcXCIgeG1sbnM9XFxcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXFxcIj5cXHJcXG4gICAgPHBhdGggY2xhc3M9XFxcImdqcy1ibG9jay1zdmctcGF0aFxcXCIgZD1cXFwiTTIyLDExLjg3NSBDMjIsMTEuMzUgMjEuNSwxMSAyMC43NSwxMSBMMy4yNSwxMSBDMi41LDExIDIsMTEuMzUgMiwxMS44NzUgTDIsMTcuMTI1IEMyLDE3LjY1IDIuNSwxOCAzLjI1LDE4IEwyMC43NSwxOCBDMjEuNSwxOCAyMiwxNy42NSAyMiwxNy4xMjUgTDIyLDExLjg3NSBaIE0yMSwxNyBMMywxNyBMMywxMiBMMjEsMTIgTDIxLDE3IFpcXFwiIGZpbGwtcnVsZT1cXFwibm9uemVyb1xcXCI+PC9wYXRoPlxcclxcbiAgICA8cmVjdCBjbGFzcz1cXFwiZ2pzLWJsb2NrLXN2Zy1wYXRoXFxcIiB4PVxcXCIyXFxcIiB5PVxcXCI1XFxcIiB3aWR0aD1cXFwiMTRcXFwiIGhlaWdodD1cXFwiNVxcXCIgcng9XFxcIjAuNVxcXCI+PC9yZWN0PlxcclxcbiAgICA8cG9seWdvbiBjbGFzcz1cXFwiZ2pzLWJsb2NrLXN2Zy1wYXRoXFxcIiBmaWxsLXJ1bGU9XFxcIm5vbnplcm9cXFwiIHBvaW50cz1cXFwiNCAxMyA1IDEzIDUgMTYgNCAxNlxcXCI+PC9wb2x5Z29uPlxcclxcbjwvc3ZnPlxcclxcblwiOyIsImV4cG9ydCBkZWZhdWx0IFwiPHN2ZyBhcmlhLWhpZGRlbj1cXFwidHJ1ZVxcXCIgd2lkdGg9XFxcIjI0XFxcIiBoZWlnaHQ9XFxcIjUwXFxcIiBmb2N1c2FibGU9XFxcImZhbHNlXFxcIiBkYXRhLXByZWZpeD1cXFwiZmFzXFxcIiBkYXRhLWljb249XFxcImxpbmtcXFwiIGNsYXNzPVxcXCJzdmctaW5saW5lLS1mYSBmYS1saW5rIGZhLXctMTZcXFwiIHJvbGU9XFxcImltZ1xcXCIgeG1sbnM9XFxcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXFxcIiB2aWV3Qm94PVxcXCIwIDAgNTEyIDUxMlxcXCI+PHBhdGggZmlsbD1cXFwiY3VycmVudENvbG9yXFxcIiBkPVxcXCJNMzI2LjYxMiAxODUuMzkxYzU5Ljc0NyA1OS44MDkgNTguOTI3IDE1NS42OTguMzYgMjE0LjU5LS4xMS4xMi0uMjQuMjUtLjM2LjM3bC02Ny4yIDY3LjJjLTU5LjI3IDU5LjI3LTE1NS42OTkgNTkuMjYyLTIxNC45NiAwLTU5LjI3LTU5LjI2LTU5LjI3LTE1NS43IDAtMjE0Ljk2bDM3LjEwNi0zNy4xMDZjOS44NC05Ljg0IDI2Ljc4Ni0zLjMgMjcuMjk0IDEwLjYwNi42NDggMTcuNzIyIDMuODI2IDM1LjUyNyA5LjY5IDUyLjcyMSAxLjk4NiA1LjgyMi41NjcgMTIuMjYyLTMuNzgzIDE2LjYxMmwtMTMuMDg3IDEzLjA4N2MtMjguMDI2IDI4LjAyNi0yOC45MDUgNzMuNjYtMS4xNTUgMTAxLjk2IDI4LjAyNCAyOC41NzkgNzQuMDg2IDI4Ljc0OSAxMDIuMzI1LjUxbDY3LjItNjcuMTljMjguMTkxLTI4LjE5MSAyOC4wNzMtNzMuNzU3IDAtMTAxLjgzLTMuNzAxLTMuNjk0LTcuNDI5LTYuNTY0LTEwLjM0MS04LjU2OWExNi4wMzcgMTYuMDM3IDAgMCAxLTYuOTQ3LTEyLjYwNmMtLjM5Ni0xMC41NjcgMy4zNDgtMjEuNDU2IDExLjY5OC0yOS44MDZsMjEuMDU0LTIxLjA1NWM1LjUyMS01LjUyMSAxNC4xODItNi4xOTkgMjAuNTg0LTEuNzMxYTE1Mi40ODIgMTUyLjQ4MiAwIDAgMSAyMC41MjIgMTcuMTk3ek00NjcuNTQ3IDQ0LjQ0OWMtNTkuMjYxLTU5LjI2Mi0xNTUuNjktNTkuMjctMjE0Ljk2IDBsLTY3LjIgNjcuMmMtLjEyLjEyLS4yNS4yNS0uMzYuMzctNTguNTY2IDU4Ljg5Mi01OS4zODcgMTU0Ljc4MS4zNiAyMTQuNTlhMTUyLjQ1NCAxNTIuNDU0IDAgMCAwIDIwLjUyMSAxNy4xOTZjNi40MDIgNC40NjggMTUuMDY0IDMuNzg5IDIwLjU4NC0xLjczMWwyMS4wNTQtMjEuMDU1YzguMzUtOC4zNSAxMi4wOTQtMTkuMjM5IDExLjY5OC0yOS44MDZhMTYuMDM3IDE2LjAzNyAwIDAgMC02Ljk0Ny0xMi42MDZjLTIuOTEyLTIuMDA1LTYuNjQtNC44NzUtMTAuMzQxLTguNTY5LTI4LjA3My0yOC4wNzMtMjguMTkxLTczLjYzOSAwLTEwMS44M2w2Ny4yLTY3LjE5YzI4LjIzOS0yOC4yMzkgNzQuMy0yOC4wNjkgMTAyLjMyNS41MSAyNy43NSAyOC4zIDI2Ljg3MiA3My45MzQtMS4xNTUgMTAxLjk2bC0xMy4wODcgMTMuMDg3Yy00LjM1IDQuMzUtNS43NjkgMTAuNzktMy43ODMgMTYuNjEyIDUuODY0IDE3LjE5NCA5LjA0MiAzNC45OTkgOS42OSA1Mi43MjEuNTA5IDEzLjkwNiAxNy40NTQgMjAuNDQ2IDI3LjI5NCAxMC42MDZsMzcuMTA2LTM3LjEwNmM1OS4yNzEtNTkuMjU5IDU5LjI3MS0xNTUuNjk5LjAwMS0yMTQuOTU5elxcXCI+PC9wYXRoPjwvc3ZnPlxcclxcblwiOyIsImV4cG9ydCBkZWZhdWx0IFwiPHN2ZyBhcmlhLWhpZGRlbj1cXFwidHJ1ZVxcXCIgd2lkdGg9XFxcIjI0XFxcIiBoZWlnaHQ9XFxcIjUwXFxcIiBmb2N1c2FibGU9XFxcImZhbHNlXFxcIiBkYXRhLXByZWZpeD1cXFwiZmFzXFxcIiBkYXRhLWljb249XFxcInBhcmFncmFwaFxcXCIgY2xhc3M9XFxcInN2Zy1pbmxpbmUtLWZhIGZhLXBhcmFncmFwaCBmYS13LTE0XFxcIiByb2xlPVxcXCJpbWdcXFwiIHhtbG5zPVxcXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1xcXCIgdmlld0JveD1cXFwiMCAwIDQ0OCA1MTJcXFwiPjxwYXRoIGZpbGw9XFxcImN1cnJlbnRDb2xvclxcXCIgZD1cXFwiTTQ0OCA0OHYzMmExNiAxNiAwIDAgMS0xNiAxNmgtNDh2MzY4YTE2IDE2IDAgMCAxLTE2IDE2aC0zMmExNiAxNiAwIDAgMS0xNi0xNlY5NmgtMzJ2MzY4YTE2IDE2IDAgMCAxLTE2IDE2aC0zMmExNiAxNiAwIDAgMS0xNi0xNlYzNTJoLTMyYTE2MCAxNjAgMCAwIDEgMC0zMjBoMjQwYTE2IDE2IDAgMCAxIDE2IDE2elxcXCI+PC9wYXRoPjwvc3ZnPlxcclxcblwiOyIsImV4cG9ydCBkZWZhdWx0IFwiPHN2ZyBjbGFzcz1cXFwiZ2pzLWJsb2NrLXN2Z1xcXCIgdmlld0JveD1cXFwiMCAwIDI0IDI0XFxcIiB4bWxucz1cXFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcXFwiPlxcclxcbiAgICA8cGF0aCBjbGFzcz1cXFwiZ2pzLWJsb2NrLXN2Zy1wYXRoXFxcIiBkPVxcXCJNMjIsOSBDMjIsOC40IDIxLjUsOCAyMC43NSw4IEwzLjI1LDggQzIuNSw4IDIsOC40IDIsOSBMMiwxNSBDMiwxNS42IDIuNSwxNiAzLjI1LDE2IEwyMC43NSwxNiBDMjEuNSwxNiAyMiwxNS42IDIyLDE1IEwyMiw5IFogTTIxLDE1IEwzLDE1IEwzLDkgTDIxLDkgTDIxLDE1IFpcXFwiIGZpbGwtcnVsZT1cXFwibm9uemVyb1xcXCI+PC9wYXRoPlxcclxcbiAgICA8cG9seWdvbiBjbGFzcz1cXFwiZ2pzLWJsb2NrLXN2Zy1wYXRoXFxcIiB0cmFuc2Zvcm09XFxcInRyYW5zbGF0ZSgxOC41MDAwMDAsIDEyLjAwMDAwMCkgc2NhbGUoMSwgLTEpIHRyYW5zbGF0ZSgtMTguNTAwMDAwLCAtMTIuMDAwMDAwKSBcXFwiIHBvaW50cz1cXFwiMTguNSAxMSAyMCAxMyAxNyAxM1xcXCI+PC9wb2x5Z29uPlxcclxcbiAgICA8cmVjdCBjbGFzcz1cXFwiZ2pzLWJsb2NrLXN2Zy1wYXRoXFxcIiB4PVxcXCI0XFxcIiB5PVxcXCIxMS41XFxcIiB3aWR0aD1cXFwiMTFcXFwiIGhlaWdodD1cXFwiMVxcXCI+PC9yZWN0Plxcclxcbjwvc3ZnPlxcclxcblwiOyIsImV4cG9ydCBkZWZhdWx0IFwiPHN2ZyBjbGFzcz1cXFwiZ2pzLWJsb2NrLXN2Z1xcXCIgdmlld0JveD1cXFwiMCAwIDI0IDI0XFxcIiB4bWxucz1cXFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcXFwiPlxcclxcbiAgICA8cGF0aCBjbGFzcz1cXFwiZ2pzLWJsb2NrLXN2Zy1wYXRoXFxcIiBkPVxcXCJNMjIsNy41IEMyMiw2LjYgMjEuNSw2IDIwLjc1LDYgTDMuMjUsNiBDMi41LDYgMiw2LjYgMiw3LjUgTDIsMTYuNSBDMiwxNy40IDIuNSwxOCAzLjI1LDE4IEwyMC43NSwxOCBDMjEuNSwxOCAyMiwxNy40IDIyLDE2LjUgTDIyLDcuNSBaIE0yMSwxNyBMMywxNyBMMyw3IEwyMSw3IEwyMSwxNyBaXFxcIj48L3BhdGg+XFxyXFxuICAgIDxwb2x5Z29uIGNsYXNzPVxcXCJnanMtYmxvY2stc3ZnLXBhdGhcXFwiIHBvaW50cz1cXFwiNCA4IDUgOCA1IDEyIDQgMTJcXFwiPjwvcG9seWdvbj5cXHJcXG4gICAgPHBvbHlnb24gY2xhc3M9XFxcImdqcy1ibG9jay1zdmctcGF0aFxcXCIgcG9pbnRzPVxcXCIxOSA3IDIwIDcgMjAgMTcgMTkgMTdcXFwiPjwvcG9seWdvbj5cXHJcXG4gICAgPHBvbHlnb24gY2xhc3M9XFxcImdqcy1ibG9jay1zdmctcGF0aFxcXCIgcG9pbnRzPVxcXCIyMCA4IDIxIDggMjEgOSAyMCA5XFxcIj48L3BvbHlnb24+XFxyXFxuICAgIDxwb2x5Z29uIGNsYXNzPVxcXCJnanMtYmxvY2stc3ZnLXBhdGhcXFwiIHBvaW50cz1cXFwiMjAgMTUgMjEgMTUgMjEgMTYgMjAgMTZcXFwiPjwvcG9seWdvbj5cXHJcXG48L3N2Zz5cXHJcXG5cIjsiLCJleHBvcnQgZGVmYXVsdCBcIjxzdmcgYXJpYS1oaWRkZW49XFxcInRydWVcXFwiIHdpZHRoPVxcXCIyNFxcXCIgaGVpZ2h0PVxcXCI1MFxcXCIgZm9jdXNhYmxlPVxcXCJmYWxzZVxcXCIgZGF0YS1wcmVmaXg9XFxcImZhc1xcXCIgZGF0YS1pY29uPVxcXCJ3aW5kb3ctbWF4aW1pemVcXFwiIGNsYXNzPVxcXCJzdmctaW5saW5lLS1mYSBmYS13aW5kb3ctbWF4aW1pemUgZmEtdy0xNlxcXCIgcm9sZT1cXFwiaW1nXFxcIiB4bWxucz1cXFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcXFwiIHZpZXdCb3g9XFxcIjAgMCA1MTIgNTEyXFxcIj48cGF0aCBmaWxsPVxcXCJjdXJyZW50Q29sb3JcXFwiIGQ9XFxcIk00NjQgMzJINDhDMjEuNSAzMiAwIDUzLjUgMCA4MHYzNTJjMCAyNi41IDIxLjUgNDggNDggNDhoNDE2YzI2LjUgMCA0OC0yMS41IDQ4LTQ4VjgwYzAtMjYuNS0yMS41LTQ4LTQ4LTQ4em0tMTYgMTYwSDY0di04NGMwLTYuNiA1LjQtMTIgMTItMTJoMzYwYzYuNiAwIDEyIDUuNCAxMiAxMnY4NHpcXFwiPjwvcGF0aD48L3N2Zz5cXHJcXG5cIjsiLCJleHBvcnQgZGVmYXVsdCBcIjxzdmcgYXJpYS1oaWRkZW49XFxcInRydWVcXFwiIHdpZHRoPVxcXCIyNFxcXCIgaGVpZ2h0PVxcXCI1MFxcXCIgZm9jdXNhYmxlPVxcXCJmYWxzZVxcXCIgZGF0YS1wcmVmaXg9XFxcImZhYlxcXCIgZGF0YS1pY29uPVxcXCJ5b3V0dWJlXFxcIiBjbGFzcz1cXFwic3ZnLWlubGluZS0tZmEgZmEteW91dHViZSBmYS13LTE4XFxcIiByb2xlPVxcXCJpbWdcXFwiIHhtbG5zPVxcXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1xcXCIgdmlld0JveD1cXFwiMCAwIDU3NiA1MTJcXFwiPjxwYXRoIGZpbGw9XFxcImN1cnJlbnRDb2xvclxcXCIgZD1cXFwiTTU0OS42NTUgMTI0LjA4M2MtNi4yODEtMjMuNjUtMjQuNzg3LTQyLjI3Ni00OC4yODQtNDguNTk3QzQ1OC43ODEgNjQgMjg4IDY0IDI4OCA2NFMxMTcuMjIgNjQgNzQuNjI5IDc1LjQ4NmMtMjMuNDk3IDYuMzIyLTQyLjAwMyAyNC45NDctNDguMjg0IDQ4LjU5Ny0xMS40MTIgNDIuODY3LTExLjQxMiAxMzIuMzA1LTExLjQxMiAxMzIuMzA1czAgODkuNDM4IDExLjQxMiAxMzIuMzA1YzYuMjgxIDIzLjY1IDI0Ljc4NyA0MS41IDQ4LjI4NCA0Ny44MjFDMTE3LjIyIDQ0OCAyODggNDQ4IDI4OCA0NDhzMTcwLjc4IDAgMjEzLjM3MS0xMS40ODZjMjMuNDk3LTYuMzIxIDQyLjAwMy0yNC4xNzEgNDguMjg0LTQ3LjgyMSAxMS40MTItNDIuODY3IDExLjQxMi0xMzIuMzA1IDExLjQxMi0xMzIuMzA1czAtODkuNDM4LTExLjQxMi0xMzIuMzA1em0tMzE3LjUxIDIxMy41MDhWMTc1LjE4NWwxNDIuNzM5IDgxLjIwNS0xNDIuNzM5IDgxLjIwMXpcXFwiPjwvcGF0aD48L3N2Zz5cXHJcXG5cIjsiLCJtb2R1bGUuZXhwb3J0cyA9IGdyYXBlc2pzOyIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0Ly8gbm8gbW9kdWxlLmlkIG5lZWRlZFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0obW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4iLCIvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuX193ZWJwYWNrX3JlcXVpcmVfXy5uID0gKG1vZHVsZSkgPT4ge1xuXHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cblx0XHQoKSA9PiAobW9kdWxlWydkZWZhdWx0J10pIDpcblx0XHQoKSA9PiAobW9kdWxlKTtcblx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgeyBhOiBnZXR0ZXIgfSk7XG5cdHJldHVybiBnZXR0ZXI7XG59OyIsIi8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uZCA9IChleHBvcnRzLCBkZWZpbml0aW9uKSA9PiB7XG5cdGZvcih2YXIga2V5IGluIGRlZmluaXRpb24pIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG5cdFx0fVxuXHR9XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSkiLCIvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSAoZXhwb3J0cykgPT4ge1xuXHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblx0fVxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xufTsiLCJpbXBvcnQgZ3JhcGVzanMgZnJvbSAnZ3JhcGVzanMnO1xyXG5pbXBvcnQgbG9hZENvbW1hbmRzIGZyb20gJy4vY29tbWFuZHMnO1xyXG5pbXBvcnQgbG9hZFRyYWl0cyBmcm9tICcuL3RyYWl0cyc7XHJcbmltcG9ydCBsb2FkQ29tcG9uZW50cyBmcm9tICcuL2NvbXBvbmVudHMnO1xyXG5pbXBvcnQgbG9hZERldmljZXMgZnJvbSAnLi9kZXZpY2VzJztcclxuXHJcbmNvbnN0IGxvYWRDc3MgPSBlZGl0b3IgPT4ge1xyXG4gIGVkaXRvci5Db25maWcuY2FudmFzQ3NzICs9IGBcclxuICAgIC8qIExheW91dCAqL1xyXG5cclxuICAgIC5nanMtZGFzaGVkIC5jb250YWluZXIsIC5nanMtZGFzaGVkIC5jb250YWluZXItZmx1aWQsXHJcbiAgICAuZ2pzLWRhc2hlZCAucm93LFxyXG4gICAgLmdqcy1kYXNoZWQgLmNvbCwgLmdqcy1kYXNoZWQgW2NsYXNzXj1cImNvbC1cIl0ge1xyXG4gICAgICBtaW4taGVpZ2h0OiAxLjVyZW0gIWltcG9ydGFudDtcclxuICAgIH1cclxuICAgIC5nanMtZGFzaGVkIC53LTEwMCB7XHJcbiAgICAgIG1pbi1oZWlnaHQ6IC4yNXJlbSAhaW1wb3J0YW50O1xyXG4gICAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDAsMCwwLDAuMSk7XHJcbiAgICB9XHJcbiAgICAuZ2pzLWRhc2hlZCBpbWcge1xyXG4gICAgICBtaW4td2lkdGg6IDI1cHg7XHJcbiAgICAgIG1pbi1oZWlnaHQ6IDI1cHg7XHJcbiAgICAgIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMCwwLDAsMC41KTtcclxuICAgIH1cclxuXHJcbiAgICAvKiBDb21wb25lbnRzICovXHJcblxyXG4gICAgLmdqcy1kYXNoZWQgLmJ0bi1ncm91cCxcclxuICAgIC5nanMtZGFzaGVkIC5idG4tdG9vbGJhciB7XHJcbiAgICAgIHBhZGRpbmctcmlnaHQ6IDEuNXJlbSAhaW1wb3J0YW50O1xyXG4gICAgICBtaW4taGVpZ2h0OiAxLjVyZW0gIWltcG9ydGFudDtcclxuICAgIH1cclxuICAgIC5nanMtZGFzaGVkIC5jYXJkLFxyXG4gICAgLmdqcy1kYXNoZWQgLmNhcmQtZ3JvdXAsIC5nanMtZGFzaGVkIC5jYXJkLWRlY2ssIC5nanMtZGFzaGVkIC5jYXJkLWNvbHVtbnMge1xyXG4gICAgICBtaW4taGVpZ2h0OiAxLjVyZW0gIWltcG9ydGFudDtcclxuICAgIH1cclxuICAgIC5nanMtZGFzaGVkIC5jb2xsYXBzZSB7XHJcbiAgICAgIGRpc3BsYXk6IGJsb2NrICFpbXBvcnRhbnQ7XHJcbiAgICAgIG1pbi1oZWlnaHQ6IDEuNXJlbSAhaW1wb3J0YW50O1xyXG4gICAgfVxyXG4gICAgLmdqcy1kYXNoZWQgLmRyb3Bkb3duIHtcclxuICAgICAgZGlzcGxheTogYmxvY2sgIWltcG9ydGFudDtcclxuICAgICAgbWluLWhlaWdodDogMS41cmVtICFpbXBvcnRhbnQ7XHJcbiAgICB9XHJcbiAgICAuZ2pzLWRhc2hlZCAuZHJvcGRvd24tbWVudSB7XHJcbiAgICAgIG1pbi1oZWlnaHQ6IDEuNXJlbSAhaW1wb3J0YW50O1xyXG4gICAgICBkaXNwbGF5OiBibG9jayAhaW1wb3J0YW50O1xyXG4gICAgfVxyXG4gIGBcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGdyYXBlc2pzLnBsdWdpbnMuYWRkKCdncmFwZXNqcy1ibG9ja3MtYm9vdHN0cmFwNScsIChlZGl0b3IsIG9wdHMgPSB7fSkgPT4ge1xyXG5cclxuICB3aW5kb3cuZWRpdG9yID0gZWRpdG9yO1xyXG5cclxuICBjb25zdCBvcHRzX2Jsb2NrcyA9IG9wdHMuYmxvY2tzIHx8IHt9O1xyXG4gIGNvbnN0IG9wdHNfbGFiZWxzID0gb3B0cy5sYWJlbHMgfHwge307XHJcbiAgY29uc3Qgb3B0c19jYXRlZ29yaWVzID0gb3B0cy5ibG9ja0NhdGVnb3JpZXMgfHwge307XHJcbiAgZGVsZXRlIG9wdHNbJ2Jsb2NrcyddO1xyXG4gIGRlbGV0ZSBvcHRzWydsYWJlbHMnXTtcclxuICBkZWxldGUgb3B0c1snYmxvY2tDYXRlZ29yaWVzJ107XHJcblxyXG4gIGNvbnN0IGRlZmF1bHRfYmxvY2tzID0ge1xyXG4gICAgZGVmYXVsdDogdHJ1ZSxcclxuICAgIHRleHQ6IHRydWUsXHJcbiAgICBsaW5rOiB0cnVlLFxyXG4gICAgaW1hZ2U6IHRydWUsXHJcbiAgICAvLyBMQVlPVVRcclxuICAgIGNvbnRhaW5lcjogdHJ1ZSxcclxuICAgIHJvdzogdHJ1ZSxcclxuICAgIGNvbHVtbjogdHJ1ZSxcclxuICAgIGNvbHVtbl9icmVhazogdHJ1ZSxcclxuICAgIG1lZGlhX29iamVjdDogdHJ1ZSxcclxuICAgIC8vIENPTVBPTkVOVFNcclxuICAgIGFsZXJ0OiB0cnVlLFxyXG4gICAgdGFiczogdHJ1ZSxcclxuICAgIGJhZGdlOiB0cnVlLFxyXG4gICAgYnV0dG9uOiB0cnVlLFxyXG4gICAgYnV0dG9uX2dyb3VwOiB0cnVlLFxyXG4gICAgYnV0dG9uX3Rvb2xiYXI6IHRydWUsXHJcbiAgICBjYXJkOiB0cnVlLFxyXG4gICAgY2FyZF9jb250YWluZXI6IHRydWUsXHJcbiAgICBjb2xsYXBzZTogdHJ1ZSxcclxuICAgIGRyb3Bkb3duOiB0cnVlLFxyXG4gICAgdmlkZW86IHRydWUsXHJcbiAgICAvLyBUWVBPR1JBUEhZXHJcbiAgICBoZWFkZXI6IHRydWUsXHJcbiAgICBwYXJhZ3JhcGg6IHRydWUsXHJcbiAgICAvLyBCQVNJQ1xyXG4gICAgbGlzdDogdHJ1ZSxcclxuICAgIC8vIEZPUk1TXHJcbiAgICBmb3JtOiB0cnVlLFxyXG4gICAgaW5wdXQ6IHRydWUsXHJcbiAgICBmb3JtX2dyb3VwX2lucHV0OiB0cnVlLFxyXG4gICAgaW5wdXRfZ3JvdXA6IHRydWUsXHJcbiAgICB0ZXh0YXJlYTogdHJ1ZSxcclxuICAgIHNlbGVjdDogdHJ1ZSxcclxuICAgIGxhYmVsOiB0cnVlLFxyXG4gICAgY2hlY2tib3g6IHRydWUsXHJcbiAgICByYWRpbzogdHJ1ZSxcclxuXHJcbiAgICBqc2ZJbnB1dFRleHQ6IHRydWUsXHJcbiAgfTtcclxuXHJcbiAgY29uc3QgZGVmYXVsdF9sYWJlbHMgPSB7XHJcbiAgICAvLyBMQVlPVVRcclxuICAgIGNvbnRhaW5lcjogJ0NvbnRhaW5lcicsXHJcbiAgICByb3c6ICdSb3cnLFxyXG4gICAgY29sdW1uOiAnQ29sdW1uJyxcclxuICAgIGNvbHVtbl9icmVhazogJ0NvbHVtbiBCcmVhaycsXHJcbiAgICBtZWRpYV9vYmplY3Q6ICdNZWRpYSBPYmplY3QnLFxyXG5cclxuICAgIC8vIENPTVBPTkVOVFNcclxuICAgIGFsZXJ0OiAnQWxlcnQnLFxyXG4gICAgdGFiczogJ1RhYnMnLFxyXG4gICAgdGFiOiAnVGFiJyxcclxuICAgIHRhYlBhbmU6ICdUYWIgUGFuZScsXHJcbiAgICBiYWRnZTogJ0JhZGdlJyxcclxuICAgIGJ1dHRvbjogJ0J1dHRvbicsXHJcbiAgICBidXR0b25fZ3JvdXA6ICdCdXR0b24gR3JvdXAnLFxyXG4gICAgYnV0dG9uX3Rvb2xiYXI6ICdCdXR0b24gVG9vbGJhcicsXHJcbiAgICBjYXJkOiAnQ2FyZCcsXHJcbiAgICBjYXJkX2NvbnRhaW5lcjogJ0NhcmQgQ29udGFpbmVyJyxcclxuICAgIGNvbGxhcHNlOiAnQ29sbGFwc2UnLFxyXG4gICAgZHJvcGRvd246ICdEcm9wZG93bicsXHJcbiAgICBkcm9wZG93bl9tZW51OiAnRHJvcGRvd24gTWVudScsXHJcbiAgICBkcm9wZG93bl9pdGVtOiAnRHJvcGRvd24gSXRlbScsXHJcblxyXG4gICAgLy8gTUVESUFcclxuICAgIGltYWdlOiAnSW1hZ2UnLFxyXG4gICAgdmlkZW86ICdWaWRlbycsXHJcblxyXG4gICAgLy8gVFlQT0dSQVBIWVxyXG4gICAgdGV4dDogJ1RleHQnLFxyXG5cclxuICAgIC8vIEJBU0lDXHJcbiAgICBoZWFkZXI6ICdIZWFkZXInLFxyXG4gICAgcGFyYWdyYXBoOiAnUGFyYWdyYXBoJyxcclxuICAgIGxpbms6ICdMaW5rJyxcclxuICAgIGxpc3Q6ICdTaW1wbGUgTGlzdCcsXHJcblxyXG4gICAgLy8gRk9STVNcclxuICAgIGZvcm06ICdGb3JtJyxcclxuICAgIGlucHV0OiAnSW5wdXQnLFxyXG4gICAgZmlsZV9pbnB1dDogJ0ZpbGUnLFxyXG4gICAgZm9ybV9ncm91cF9pbnB1dDogJ0Zvcm0gR3JvdXAnLFxyXG4gICAgaW5wdXRfZ3JvdXA6ICdJbnB1dCBncm91cCcsXHJcbiAgICB0ZXh0YXJlYTogJ1RleHRhcmVhJyxcclxuICAgIHNlbGVjdDogJ1NlbGVjdCcsXHJcbiAgICBzZWxlY3Rfb3B0aW9uOiAnLSBTZWxlY3Qgb3B0aW9uIC0nLFxyXG4gICAgb3B0aW9uOiAnT3B0aW9uJyxcclxuICAgIGxhYmVsOiAnTGFiZWwnLFxyXG4gICAgY2hlY2tib3g6ICdDaGVja2JveCcsXHJcbiAgICByYWRpbzogJ1JhZGlvJyxcclxuICAgIHRyYWl0X21ldGhvZDogJ01ldGhvZCcsXHJcbiAgICB0cmFpdF9lbmN0eXBlOiAnRW5jb2RpbmcgVHlwZScsXHJcbiAgICB0cmFpdF9tdWx0aXBsZTogJ011bHRpcGxlJyxcclxuICAgIHRyYWl0X2FjdGlvbjogJ0FjdGlvbicsXHJcbiAgICB0cmFpdF9zdGF0ZTogJ1N0YXRlJyxcclxuICAgIHRyYWl0X2lkOiAnSUQnLFxyXG4gICAgdHJhaXRfZm9yOiAnRm9yJyxcclxuICAgIHRyYWl0X25hbWU6ICdOYW1lJyxcclxuICAgIHRyYWl0X3BsYWNlaG9sZGVyOiAnUGxhY2Vob2xkZXInLFxyXG4gICAgdHJhaXRfdmFsdWU6ICdWYWx1ZScsXHJcbiAgICB0cmFpdF9yZXF1aXJlZDogJ1JlcXVpcmVkJyxcclxuICAgIHRyYWl0X3R5cGU6ICdUeXBlJyxcclxuICAgIHRyYWl0X29wdGlvbnM6ICdPcHRpb25zJyxcclxuICAgIHRyYWl0X2NoZWNrZWQ6ICdDaGVja2VkJyxcclxuICAgIHR5cGVfdGV4dDogJ1RleHQnLFxyXG4gICAgdHlwZV9lbWFpbDogJ0VtYWlsJyxcclxuICAgIHR5cGVfcGFzc3dvcmQ6ICdQYXNzd29yZCcsXHJcbiAgICB0eXBlX251bWJlcjogJ051bWJlcicsXHJcbiAgICB0eXBlX2RhdGU6ICdEYXRlJyxcclxuICAgIHR5cGVfaGlkZGVuOiAnSGlkZGVuJyxcclxuICAgIHR5cGVfc3VibWl0OiAnU3VibWl0JyxcclxuICAgIHR5cGVfcmVzZXQ6ICdSZXNldCcsXHJcbiAgICB0eXBlX2J1dHRvbjogJ0J1dHRvbicsXHJcblxyXG4gICAganNmSW5wdXRUZXh0OiAnSlNGIElucHV0IFRleHQnLFxyXG4gIH07XHJcblxyXG4gIGNvbnN0IGRlZmF1bHRfY2F0ZWdvcmllcyA9IHtcclxuICAgICdsYXlvdXQnOiB0cnVlLFxyXG4gICAgJ21lZGlhJzogdHJ1ZSxcclxuICAgICdjb21wb25lbnRzJzogdHJ1ZSxcclxuICAgICd0eXBvZ3JhcGh5JzogdHJ1ZSxcclxuICAgICdiYXNpYyc6IHRydWUsXHJcbiAgICAnZm9ybXMnOiB0cnVlLFxyXG5cclxuICAgICdqc2ZGb3Jtcyc6IHRydWUsXHJcbiAgfTtcclxuXHJcbiAgbGV0IG9wdGlvbnMgPSB7IC4uLntcclxuICAgIGJsb2NrczogT2JqZWN0LmFzc2lnbihkZWZhdWx0X2Jsb2Nrcywgb3B0c19ibG9ja3MpLFxyXG4gICAgbGFiZWxzOiBPYmplY3QuYXNzaWduKGRlZmF1bHRfbGFiZWxzLCBvcHRzX2xhYmVscyksXHJcbiAgICBibG9ja0NhdGVnb3JpZXM6IE9iamVjdC5hc3NpZ24oZGVmYXVsdF9jYXRlZ29yaWVzLCBvcHRzX2NhdGVnb3JpZXMpLFxyXG4gICAgb3B0aW9uc1N0cmluZ1NlcGFyYXRvcjogJzo6JyxcclxuICAgIGdyaWREZXZpY2VzOiB0cnVlLFxyXG4gICAgZ3JpZERldmljZXNQYW5lbDogZmFsc2UsXHJcbiAgICBjbGFzc05hdmlnYXRpb246ICduYXYnLFxyXG4gICAgY2xhc3NUYWJQYW5lczogJ3RhYi1jb250ZW50JyxcclxuICAgIGNsYXNzVGFiUGFuZTogJ3RhYi1wYW5lJyxcclxuICAgIGNsYXNzVGFiOiAnbmF2LWl0ZW0nLFxyXG4gIH0sICAuLi5vcHRzIH07XHJcblxyXG4gIGNvbnNvbGUubG9nKFwiKioqKioqKiogb3B0aW9ucyBhcmVcIik7XHJcbiAgY29uc29sZS5sb2cob3B0aW9ucyk7XHJcblxyXG4gIC8vIEFkZCBjb21wb25lbnRzXHJcbiAgbG9hZENvbW1hbmRzKGVkaXRvciwgb3B0aW9ucyk7XHJcbiAgbG9hZFRyYWl0cyhlZGl0b3IsIG9wdGlvbnMpO1xyXG4gIGxvYWRDb21wb25lbnRzKGVkaXRvciwgb3B0aW9ucyk7XHJcbiAgbG9hZERldmljZXMoZWRpdG9yLCBvcHRpb25zKTtcclxuICBsb2FkQ3NzKGVkaXRvciwgb3B0aW9ucyk7XHJcbn0pOyJdLCJuYW1lcyI6WyJlZGl0b3IiLCJjb25maWciLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJ1bmRlZmluZWQiLCJjb21tYW5kcyIsIkNvbW1hbmRzIiwiQ29sbGFwc2UiLCJDb2xsYXBzZUJsb2NrIiwiRHJvcGRvd24iLCJEcm9wRG93bkJsb2NrIiwiVGFic05hdmlnYXRpb24iLCJUYWJzQmxvY2siLCJUYWJzUGFuZXMiLCJUYWIiLCJUYWJQYW5lIiwiRm9ybSIsIkZvcm1CbG9jayIsIklucHV0IiwiSW5wdXRCbG9jayIsIklucHV0R3JvdXAiLCJJbnB1dEdyb3VwQmxvY2siLCJUZXh0YXJlYSIsIlRleHRhcmVhQmxvY2siLCJTZWxlY3QiLCJTZWxlY3RCbG9jayIsIkNoZWNrYm94IiwiQ2hlY2tib3hCbG9jayIsIlJhZGlvIiwiUmFkaW9CbG9jayIsIkJ1dHRvbiIsIkJ1dHRvbkJsb2NrIiwiQnV0dG9uR3JvdXAiLCJCdXR0b25Hcm91cEJsb2NrIiwiQnV0dG9uVG9vbGJhciIsIkJ1dHRvblRvb2xiYXJCbG9jayIsIkxhYmVsIiwiTGFiZWxCbG9jayIsIkxpbmsiLCJMaW5rQmxvY2siLCJGaWxlSW5wdXQiLCJGaWxlSW5wdXRCbG9jayIsIkltYWdlIiwiSW1hZ2VCbG9jayIsIlZpZGVvIiwiVmlkZW9CbG9jayIsIkVtYmVkIiwiUGFyYWdyYXBoIiwiUGFyYWdyYXBoQmxvY2siLCJIZWFkZXIiLCJIZWFkZXJCbG9jayIsIkNhcmQiLCJDYXJkQmxvY2siLCJCYWRnZSIsIkJhZGdlQmxvY2siLCJBbGVydCIsIkFsZXJ0QmxvY2siLCJNZWRpYU9iamVjdCIsIk1lZGlhT2JqZWN0QmxvY2siLCJDb2x1bW5CcmVhayIsIkNvbHVtbkJyZWFrQmxvY2siLCJDb2x1bW4iLCJDb2x1bW5CbG9jayIsIlJvdyIsIlJvd0Jsb2NrIiwiQ29udGFpbmVyIiwiQ29udGFpbmVyQmxvY2siLCJUZXh0IiwiVGV4dEJsb2NrIiwiRGVmYXVsdCIsIkpzZklucHV0IiwiSnNmSW5wdXRCbG9jayIsImMiLCJkb21jIiwiRG9tQ29tcG9uZW50cyIsImJsb2NrcyIsImJtIiwiQmxvY2tNYW5hZ2VyIiwiY2F0cyIsImJsb2NrQ2F0ZWdvcmllcyIsInRyYWl0cyIsImlkIiwibmFtZSIsImxhYmVsIiwibGFiZWxzIiwidHJhaXRfaWQiLCJ0cmFpdF9mb3IiLCJ0cmFpdF9uYW1lIiwicGxhY2Vob2xkZXIiLCJ0cmFpdF9wbGFjZWhvbGRlciIsInZhbHVlIiwidHJhaXRfdmFsdWUiLCJyZXF1aXJlZCIsInR5cGUiLCJ0cmFpdF9yZXF1aXJlZCIsImNoZWNrZWQiLCJ0cmFpdF9jaGVja2VkIiwiY2hhbmdlUHJvcCIsIm1lZGlhIiwiaW1hZ2UiLCJ2aWRlbyIsImJhc2ljIiwidGV4dCIsImxpbmsiLCJsYXlvdXQiLCJjb250YWluZXIiLCJyb3ciLCJjb2x1bW4iLCJjb2x1bW5fYnJlYWsiLCJtZWRpYV9vYmplY3QiLCJjb21wb25lbnRzIiwiYWxlcnQiLCJ0YWJzIiwiYmFkZ2UiLCJjYXJkIiwiY29sbGFwc2UiLCJkcm9wZG93biIsInR5cG9ncmFwaHkiLCJoZWFkZXIiLCJwYXJhZ3JhcGgiLCJmb3JtcyIsImZvcm0iLCJpbnB1dCIsImZpbGVfaW5wdXQiLCJmb3JtX2dyb3VwX2lucHV0IiwidGV4dGFyZWEiLCJzZWxlY3QiLCJjaGVja2JveCIsInJhZGlvIiwiYnV0dG9uIiwiYnV0dG9uX2dyb3VwIiwiYnV0dG9uX3Rvb2xiYXIiLCJqc2ZGb3JtcyIsImpzZklucHV0VGV4dCIsImNvbnRleHRzIiwiZXhjbGFtYXRpb25JY29uIiwiY2FwaXRhbGl6ZSIsImFkZCIsImNvbmNhdCIsImNhdGVnb3J5IiwiY29udGVudCIsInRleHRUeXBlIiwiZ2V0VHlwZSIsInRleHRNb2RlbCIsIm1vZGVsIiwidGV4dFZpZXciLCJ2aWV3IiwiYWRkVHlwZSIsImlzQ29tcG9uZW50IiwiZWwiLCJjbGFzc0xpc3QiLCJjb250YWlucyIsImV4dGVuZCIsImRlZmF1bHRzIiwiT2JqZWN0IiwiYXNzaWduIiwicHJvdG90eXBlIiwidGFnTmFtZSIsImNsYXNzZXMiLCJvcHRpb25zIiwiX3RvQ29uc3VtYWJsZUFycmF5IiwibWFwIiwidiIsImV4dGVuZFZpZXciLCJjZXJ0aWZpY2F0ZUljb24iLCJzaXplcyIsImJ1dHRvbkljb24iLCJkYyIsImRlZmF1bHRUeXBlIiwiZGVmYXVsdE1vZGVsIiwiZGVmYXVsdFZpZXciLCJfb2JqZWN0U3ByZWFkIiwiZHJvcHBhYmxlIiwiYXR0cmlidXRlcyIsInJvbGUiLCJrZXlzIiwiayIsImFmdGVyQ2hhbmdlIiwiZSIsImZpbHRlciIsImtsYXNzIiwiY2hhbmdlVHlwZSIsImV2ZW50cyIsImluaXQiLCJsaXN0ZW5UbyIsInVwZGF0ZUNvbnRlbnQiLCJpbm5lckhUTUwiLCJnZXQiLCJoYW5kbGVDbGljayIsInByZXZlbnREZWZhdWx0IiwiY2FyZEljb24iLCJjYXJkX2NvbnRhaW5lciIsImNvbXBzIiwiaW1hZ2VUeXBlIiwiaW1hZ2VNb2RlbCIsImltYWdlVmlldyIsImluaXQyIiwiY2FyZEltYWdlVG9wIiwiY2FyZEhlYWRlciIsImNhcmRJbWFnZSIsImNhcmRJbWFnZU92ZXJsYXkiLCJjYXJkQm9keSIsImNhcmRGb290ZXIiLCJjYXJkSW1hZ2VCb3R0b20iLCJjb21wYXJhdG9yIiwic2V0IiwiY3JlYXRlQ2FyZENvbXBvbmVudCIsInByb3AiLCJzdGF0ZSIsInJlcGxhY2UiLCJjaGlsZHJlbiIsImV4aXN0aW5nIiwiY29tcCIsImNvbXBfY2hpbGRyZW4iLCJzdHlsZSIsImhyZWYiLCJvcmRlciIsImRlc3Ryb3kiLCJjc3MiLCJBcnJheSIsImZyb20iLCJpbmNsdWRlcyIsImludGVyc2VjdGlvbiIsIngiLCJjaGVja0ljb24iLCJpbnB1dFR5cGUiLCJpbnB1dE1vZGVsIiwiY29weWFibGUiLCJoYW5kbGVDaGVja2VkIiwiYXR0cnMiLCJjb21wcmVzc0ljb24iLCJjb2x1bW5zSWNvbiIsInNwYW5zIiwibWF0Y2giLCJmb3JFYWNoIiwiZHJhZ2dhYmxlIiwicmVzaXphYmxlIiwidXBkYXRlVGFyZ2V0IiwicmVjdCIsIm9wdCIsInNlbGVjdGVkIiwiZ2V0U2VsZWN0ZWQiLCJkb2NXaWR0aCIsImdldFJvb3ROb2RlIiwiYm9keSIsIm9mZnNldFdpZHRoIiwiY3VycmVudFNpemUiLCJwYXJlbnRFbGVtZW50Iiwib25lQ29sV2lkdGgiLCJ0aHJlc2hvbGQiLCJncm93IiwidyIsInNocmluayIsInRlc3RSZWdleHAiLCJSZWdFeHAiLCJmb3VuZCIsInNpemVzU3BhbnMiLCJvbGRTcGFuIiwib2xkQ2xhc3MiLCJfaXRlcmF0b3IiLCJfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlciIsIl9zdGVwIiwicyIsIm4iLCJkb25lIiwiY2wiLCJpbmRleE9mIiwiX2NsJHNwbGl0Iiwic3BsaXQiLCJfY2wkc3BsaXQyIiwiX3NsaWNlZFRvQXJyYXkiLCJzaXplIiwic3BhbiIsImVyciIsImYiLCJzaXplT3JkZXIiLCJfaSIsIl9zaXplT3JkZXIiLCJuZXdTcGFuIiwiTnVtYmVyIiwibmV3Q2xhc3MiLCJhZGRDbGFzcyIsInJlbW92ZUNsYXNzIiwiZ2V0VHJhaXQiLCJwb3N0VXBkYXRlIiwidGwiLCJ0YyIsInRyIiwiY3IiLCJibCIsImJjIiwiYnIiLCJpIiwiZXF1YWxzSWNvbiIsIndpbmRvd0ljb24iLCJjb250ZXh0c193X3doaXRlIiwiYmluZCIsImNsYXNzZXNDaGFuZ2VkIiwibmV3X3R5cGUiLCJjb2xsIiwiY29sbGVjdGlvbiIsImF0IiwiYnV0dG9uX29wdHMiLCJnZXRTdHlsZSIsImdldEF0dHJpYnV0ZXMiLCJyZW1vdmUiLCJjYXJldEljb24iLCJoYXNFdmVudCIsImVjYSIsIl9ldmVudHMiLCJjYWxsYmFjayIsInRvZ2dsZSIsInRvZ2dsZV9jb21wIiwiYXBwZW5kIiwibWVudSIsIm1lbnVfY29tcCIsInNldHVwVG9nZ2xlIiwiZm9yY2UiLCJhIiwiYiIsImlnbm9yZSIsInRvZ2dsZV9hdHRycyIsIm1lbnVfYXR0cnMiLCJoYXNPd25Qcm9wZXJ0eSIsInVwZGF0ZWQiLCJwcm9wZXJ0eSIsImRpdmlkZXIiLCJlbEhhc0NsYXNzIiwiZmlsZUlucHV0SWNvbiIsInRyYWl0X211bHRpcGxlIiwiZm9ybUljb24iLCJhY3Rpb25UcmFpdCIsImZvcm1QcmVkZWZpbmVkQWN0aW9ucyIsInRyYWl0X2FjdGlvbiIsImFjdGlvbiIsInB1c2giLCJ0cmFpdF9lbmN0eXBlIiwidHJhaXRfbWV0aG9kIiwidXBkYXRlRm9ybVN0YXRlIiwic2hvd1N0YXRlIiwic3QiLCJmYWlsVmlzIiwic3VjY2Vzc1ZpcyIsInN1Y2Nlc3NNb2RlbCIsImdldFN0YXRlTW9kZWwiLCJmYWlsTW9kZWwiLCJzdWNjZXNzU3R5bGUiLCJmYWlsU3R5bGUiLCJkaXNwbGF5Iiwic2V0U3R5bGUiLCJzdGF0ZU5hbWUiLCJzdGF0ZU1vZGVsIiwibW9kZWxzIiwiY29udGVudFN0ciIsImZvcm1Nc2dTdWNjZXNzIiwiZm9ybU1zZ0Vycm9yIiwicmVtb3ZhYmxlIiwic3VibWl0IiwiaGVhZGluZ0ljb24iLCJpbWFnZUljb24iLCJkb21Db21wb25lbnQiLCJpbWdfc3JjX2RlZmF1bHQiLCJzcmMiLCJpbnB1dEljb24iLCJ0cmFpdF90eXBlIiwidHlwZV90ZXh0IiwidHlwZV9lbWFpbCIsInR5cGVfcGFzc3dvcmQiLCJ0eXBlX251bWJlciIsInR5cGVfZGF0ZSIsInR5cGVfaGlkZGVuIiwiZm9ybUdyb3VwSWNvbiIsImlucHV0R3JvdXBJY29uIiwiaW5wdXRfZ3JvdXAiLCJjb25zb2xlIiwibG9nIiwibGFiZWxJY29uIiwibGlua0ljb24iLCJsaW5rVHlwZSIsImxpbmtWaWV3IiwiZWRpdGFibGUiLCJlbHMiLCJlbSIsImdldFdyYXBwZXIiLCJmaW5kIiwiZWxfYXR0cnMiLCJlbF9jbGFzc2VzIiwiZWxfY2xhc3Nlc19saXN0Iiwic3Vic3RyaW5nIiwicGFyYWdyYXBoSWNvbiIsInJhZGlvSWNvbiIsImNoZWNrVHlwZSIsInNlbGVjdEljb24iLCJwcmV2ZW50RGVmYXVsdENsaWNrIiwidHJhaXRfb3B0aW9ucyIsInRyYWl0TWFuYWdlciIsIlRyYWl0TWFuYWdlciIsIm9uVmFsdWVDaGFuZ2UiLCJvcHRpb25zU3RyIiwidHJpbSIsIm9wdENvbXBzIiwib3B0aW9uU3RyIiwib3B0aW9uIiwib3B0aW9uc1N0cmluZ1NlcGFyYXRvciIsInRhcmdldCIsInJlc2V0IiwicmVuZGVyIiwiZ2V0SW5wdXRFbCIsIiRpbnB1dCIsIm9wdEF0dHIiLCJvcHRWYWx1ZSIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsImZvbnRJY29uIiwidGV4dGFyZWFJY29uIiwiY29uc3RhbnRzIiwidGFiTmFtZSIsIm5hdmlnYXRpb25TZWxlY3RvciIsImNsYXNzSWQiLCJjbGFzc1RhYiIsInBsdWNrIiwidGFiUGFuZU5hbWUiLCJ0YWJQYW5lc1NlbGVjdG9yIiwiY2xhc3NUYWJQYW5lIiwiZWxsaXBzaXNJY29uIiwiY2lyY2xlSWNvbiIsInRhYiIsInRhYlBhbmUiLCJuYXZpZ2F0aW9uTmFtZSIsInRhYlNlbGVjdG9yIiwiY2xhc3NOYXZpZ2F0aW9uIiwicHJvcHMiLCJyZWFjdFRvIiwiam9pbiIsInRhYlBhbmVzTmFtZSIsInRhYlBhbmVTZWxlY3RvciIsImNsYXNzVGFiUGFuZXMiLCJwcmVmaXgiLCJjb250YWluZXJOYW1lIiwiY29udGFpbmVySWQiLCJuYXZpZ2F0aW9uSWQiLCJ0YWJQYW5lc0lkIiwidGFiSWQiLCJ0YWJQYW5lSWQiLCJzcmNfZGVmYXVsdCIsImNsYXNzTmFtZSIsInZpZGVvSWNvbiIsInZpZGVvVHlwZSIsInJlc3VsdCIsInByb3ZpZGVyIiwiaXNZdFByb3YiLCJ0ZXN0IiwiaXNZdG5jUHJvdiIsImlzVmlQcm92IiwiaXNFeHRQcm92IiwiZGV2aWNlTWFuYWdlciIsIkRldmljZU1hbmFnZXIiLCJncmlkRGV2aWNlcyIsImdyaWREZXZpY2VzUGFuZWwiLCJwYW5lbHMiLCJQYW5lbHMiLCJwYW5lbERldmljZXMiLCJhZGRQYW5lbCIsImRldmljZUJ0bnMiLCJjb21tYW5kIiwiYWN0aXZlIiwicnVuIiwic2V0RGV2aWNlIiwidG0iLCJjcmVhdGVJbnB1dCIsIl9yZWYiLCJ0cmFpdCIsIm1kIiwib3B0cyIsInRhcmdldF92aWV3X2VsIiwiX2xvb3AiLCJ2YWx1ZV9hIiwic2V0QXR0cmlidXRlIiwib25VcGRhdGUiLCJfcmVmMiIsImVsSW5wdXQiLCJjb21wb25lbnQiLCJnZXRDbGFzc2VzIiwib25FdmVudCIsIl9yZWYzIiwiZXZlbnQiLCJjbGFzc2VzX2lfYSIsImoiLCJlbEF0dHJpYnV0ZXMiLCJ0cmlnZ2VyIiwidGV4dFRyYWl0IiwiaW5wdXRFbCIsInRvRmluZCIsImNscyIsInRvU3RyaW5nIiwicGhyYXNlIiwidG9Mb3dlckNhc2UiLCJ3b3JkIiwiY2hhckF0IiwidG9VcHBlckNhc2UiLCJzbGljZSIsImdyYXBlc2pzIiwibG9hZENvbW1hbmRzIiwibG9hZFRyYWl0cyIsImxvYWRDb21wb25lbnRzIiwibG9hZERldmljZXMiLCJsb2FkQ3NzIiwiQ29uZmlnIiwiY2FudmFzQ3NzIiwicGx1Z2lucyIsIndpbmRvdyIsIm9wdHNfYmxvY2tzIiwib3B0c19sYWJlbHMiLCJvcHRzX2NhdGVnb3JpZXMiLCJkZWZhdWx0X2Jsb2NrcyIsImxpc3QiLCJkZWZhdWx0X2xhYmVscyIsImRyb3Bkb3duX21lbnUiLCJkcm9wZG93bl9pdGVtIiwic2VsZWN0X29wdGlvbiIsInRyYWl0X3N0YXRlIiwidHlwZV9zdWJtaXQiLCJ0eXBlX3Jlc2V0IiwidHlwZV9idXR0b24iLCJkZWZhdWx0X2NhdGVnb3JpZXMiXSwic291cmNlUm9vdCI6IiJ9